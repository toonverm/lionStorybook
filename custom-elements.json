{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/atom-listbox.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "atom-listbox",
          "declaration": {
            "name": "AtomListbox",
            "module": "/packages/atom-listbox/src/atom-listbox.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "atom-option",
          "declaration": {
            "name": "AtomOption",
            "module": "/packages/atom-listbox/src/atom-option.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "AtomListbox",
          "declaration": {
            "name": "AtomListbox",
            "module": "./src/atom-listbox.js"
          }
        },
        {
          "kind": "js",
          "name": "AtomOption",
          "declaration": {
            "name": "AtomOption",
            "module": "./src/atom-option.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/src/atom-listbox.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AtomListbox",
          "members": [
            {
              "kind": "method",
              "name": "_dispatchSelected"
            },
            {
              "kind": "field",
              "name": "selectionFollowsFocus",
              "type": {
                "text": "boolean"
              },
              "description": "When true, will synchronize activedescendant and selected element on\narrow key navigation.\nThis behavior can usually be seen on <select> on the Windows platform.\nNote that this behavior cannot be used when multiple-choice is true.\nSee: https://www.w3.org/TR/wai-aria-practices/#kbd_selection_follows_focus",
              "default": "true",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "rotateKeyboardNavigation",
              "type": {
                "text": "boolean"
              },
              "description": "Will give first option active state when navigated to the next option from\nlast option.",
              "default": "true",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "multipleChoice",
              "type": {
                "text": "boolean"
              },
              "description": "When false (default), modelValue and serializedValue will reflect the\ncurrently selected choice (usually a string). When true, modelValue will and\nserializedValue will be an array of strings.",
              "default": "false",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackConditionMeta",
              "description": "Allows Subclassers to add meta info for feedbackCondition",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_focusableNode",
              "description": "The focusable element:\ncould be an input, textarea, select, button or any other element with tabindex > -1",
              "privacy": "protected",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "{block} .input-group\n\nStructure:\n- {element} .input-group__before (optional) : a prefix that resides outside the container\n- {element} .input-group__container : an inner container: this element contains all styling\n - {element} .input-group__prefix (optional) : a prefix that resides in the container,\n              allowing it to be detectable as a :first-child\n - {element} .input-group__input : a wrapper around the form-control component\n  - {block} .form-control : the actual input element (input/select/textarea)\n - {element} .input-group__suffix (optional) : a suffix that resides inside the container,\n              allowing it to be detectable as a :last-child\n - {element} .input-group__bottom (optional) : placeholder element for additional styling\n              (like an animated line for material design input)\n- {element} .input-group__after (optional) :  a suffix that resides outside the container",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "description": "Obtains the scoped elements definitions map if specified.",
              "return": {
                "type": {
                  "text": "ScopedElementsMap"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "slots",
              "return": {
                "type": {
                  "text": "SlotsMap"
                }
              },
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "description": "The interactive (form) element. Can be a native element like input/textarea/select or\nan element with tabindex > -1",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxNode",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxActiveDescendantNode",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxSlot",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_scrollTargetNode",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_activeDescendantOwnerNode",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "activeIndex",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "checkedIndex",
              "type": {
                "text": "number | number[]"
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number|number[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "description": "Empty pending queue in order to guarantee order independence",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "setCheckedIndex",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number|number[]"
                  }
                }
              ],
              "description": "If an array is passed for multiple-choice, it will check the indexes in array, and uncheck the rest\nIf a number is passed, the item with the passed index is checked without unchecking others\nFor single choice, __onChildCheckedChanged we ensure that we uncheck siblings",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addFormElement",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControlHost & LionOption"
                  }
                },
                {
                  "name": "indexToInsertAt",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "resetInteractionState",
              "description": "Resets touched and dirty, and recomputes prefilled",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "clear",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getCheckedElements",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_setupListboxNode",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onListboxContentChanged",
              "description": "A Subclasser can perform additional logic whenever the elements inside the listbox are\nupdated. For instance, when a combobox does server side autocomplete, we want to\nmatch highlighted parts client side.",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_teardownListboxNode",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getNextEnabledOption",
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "default": "1",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getPreviousEnabledOption",
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "default": "-1",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onChildActiveChanged",
              "parameters": [
                {
                  "name": "{ target }"
                },
                {
                  "name": "ev",
                  "type": {
                    "text": "Event & { target: LionOption }"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_listboxOnKeyDown",
              "parameters": [
                {
                  "name": "ev",
                  "description": "the keydown event object",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_listboxOnClick",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_listboxOnKeyUp",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onLabelClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_scrollIntoView",
              "parameters": [
                {
                  "name": "el",
                  "description": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "scrollTargetEl",
                  "description": "container",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupEventListeners",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__teardownEventListeners",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setChildActive",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "LionOption | null"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_uncheckChildren",
              "parameters": [
                {
                  "name": "exclude",
                  "default": "[]",
                  "optional": true,
                  "type": {
                    "text": "LionOption|LionOption[]"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onChildCheckedChanged",
              "parameters": [
                {
                  "name": "cfgOrEvent",
                  "type": {
                    "text": "Event & { target: LionOption }"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setAttributeForAllFormElements",
              "parameters": [
                {
                  "name": "attribute",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "// TODO: add to choiceGroup",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__proxyChildModelValueChanged",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent & { target: LionOption; }"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getEnabledOption",
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__moveOptionsToListboxNode",
              "description": "Moves options put in unnamed slot to slot with [role=\"listbox\"]",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__preventScrollingWithArrowKeys",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupListboxNodeInteractions",
              "description": "Helper method used within `._setupListboxNode`",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__requestOptionsToBeDisabled",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__retractRequestOptionsToBeDisabled",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__initInteractionStates",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "hasNoDefaultSelected",
              "type": {
                "text": "boolean"
              },
              "description": "When setting this to true, on initial render, no option will be selected.\nIt is advisable to override `_noSelectionTemplate` method in the select-invoker\nto render some kind of placeholder initially",
              "default": "false",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "string"
              },
              "description": "Informs screen reader and affects keyboard navigation.\nBy default 'vertical'",
              "default": "'vertical'",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxActiveDescendant",
              "type": {
                "text": "number | null"
              },
              "privacy": "protected",
              "default": "null",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__hasInitialSelectedFormElement",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_repropagationRole",
              "type": {
                "text": "'child'|'choice-group'|'fieldset'"
              },
              "description": "Based on the role, details of handling model-value-changed repropagation differ.",
              "default": "'choice-group'",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxReceivesNoFocus",
              "type": {
                "text": "boolean"
              },
              "description": "When listbox is coupled to a textbox (in case we are dealing with a combobox),\nspaces should not select an element (they need to be put in the textbox)",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_oldModelValue",
              "type": {
                "text": "string | string[] | undefined"
              },
              "privacy": "protected",
              "default": "undefined",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The label text for the input node.\nWhen no value is defined, textContent of [slot=label] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "description": "The helpt text for the input node.\nWhen no value is defined, textContent of [slot=help-text] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "fieldName",
              "description": "Will be used in validation messages to refer to the current field",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_labelNode",
              "description": "Element where label will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_helpTextNode",
              "description": "Element where help text will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackNode",
              "description": "Element where validation feedback will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11y",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11yForAdditionalSlots",
              "parameters": [
                {
                  "name": "additionalSlots",
                  "default": "['prefix', 'suffix', 'before', 'after']",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Enhances additional slots(prefix, suffix, before, after) defined by developer.\n\nWhen boolean attribute data-label or data-description is found,\nthe slot element will be connected to the input via aria-labelledby or aria-describedby",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__reflectAriaAttr",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "reorder",
                  "type": {
                    "text": "boolean|undefined"
                  }
                }
              ],
              "description": "Will handle help text, validation feedback and character counter,\nprefix/suffix/before/after (if they contain data-description flag attr).\nAlso, contents of id references that will be put in the <lion-field>._ariaDescribedby property\nfrom an external context, will be read by a screen reader.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Default Render Result:\n<div class=\"form-field__group-one\">\n  <div class=\"form-field__label\">\n    <slot name=\"label\"></slot>\n  </div>\n  <small class=\"form-field__help-text\">\n    <slot name=\"help-text\"></slot>\n  </small>\n</div>\n<div class=\"form-field__group-two\">\n  <div class=\"input-group\">\n    <div class=\"input-group__before\">\n      <slot name=\"before\"></slot>\n    </div>\n    <div class=\"input-group__container\">\n      <div class=\"input-group__prefix\">\n        <slot name=\"prefix\"></slot>\n      </div>\n      <div class=\"input-group__input\">\n        <slot name=\"input\"></slot>\n      </div>\n      <div class=\"input-group__suffix\">\n        <slot name=\"suffix\"></slot>\n      </div>\n    </div>\n    <div class=\"input-group__after\">\n      <slot name=\"after\"></slot>\n    </div>\n  </div>\n  <div class=\"form-field__feedback\">\n    <slot name=\"feedback\"></slot>\n  </div>\n</div>",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupOneTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupTwoTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_helpTextTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupBeforeTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupPrefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupSuffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupAfterTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_feedbackTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "parameters": [
                {
                  "name": "modelValue",
                  "default": "(this).modelValue",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Used for Required validation and computation of interaction states",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getAriaDescriptionElements",
              "description": "This function exposes descripion elements that a FormGroup should expose to its\nchildren. See FormGroupMixin.__getAllDescriptionElementsInParentChain()",
              "return": {
                "type": {
                  "text": "Array.<HTMLElement>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add element references to aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getDirectSlotChild",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchInitialModelValueChangedEvent",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to add logic before repropagation",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__repropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_repropagationCondition",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "description": "Based on provided target, this condition determines whether received model-value-changed\nevent should be repropagated",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the element will be registered with to the .formElements collection\nof the parent. Also, it serves as the key of key/value pairs in\n modelValue/serializedValue objects",
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "A Boolean attribute which, if present, indicates that the user should not be able to edit\nthe value of the input. The difference between disabled and readonly is that read-only\ncontrols can still function, whereas disabled controls generally do not function as\ncontrols until they are enabled.\n(From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputId",
              "description": "Unique id that can be used in all light dom",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaLabelledNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-labelledby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaDescribedNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-describedby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isRepropagationEndpoint",
              "type": {
                "text": "boolean"
              },
              "description": "By default, a field with _repropagationRole 'choice-group' will act as an\n'endpoint'. This means it will be considered as an individual field: for\na select, individual options will not be part of the formPath. They\nwill.\nSimilarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n(from Application Developer perspective) need to be more like fields\n(think of an amount-input with a currency select box next to it), can set this\nto true to hide private internals in the formPath.",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "static": true,
              "description": "Obtains the ShadowRoot options.",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "ShadowRootInit"
                  }
                }
              ],
              "type": {
                "text": "ShadowRootInit"
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "static": true,
              "description": "Obtains the element styles.",
              "return": {
                "type": {
                  "text": "CSSResultFlatArray"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registry",
              "description": "Set the CustomElementRegistry associated to the ShadowRoot",
              "return": {
                "type": {
                  "text": "CustomElementRegistry"
                }
              },
              "parameters": [
                {
                  "name": "registry",
                  "type": {
                    "text": "CustomElementRegistry"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "defineScopedElement",
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "klass",
                  "type": {
                    "text": "typeof HTMLElement"
                  }
                }
              ],
              "description": "Defines a scoped element.",
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "getScopedTagName",
              "static": true,
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "modelValue",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_completeRegistration",
              "description": "Resolves the registrationComplete promise. Subclassers can delay if needed",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElementsFilter",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "FormControl"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "A filter function which will exclude a form field when returning false\nBy default, exclude form fields which are disabled\n\nThe type is be passed as well for more fine grained control, e.g.\ndistinguish the filter when fetching modelValue versus serializedValue",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElements",
              "parameters": [
                {
                  "name": "property",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "filterFn",
                  "optional": true,
                  "type": {
                    "text": "(el: FormControl, property?: string) => boolean"
                  }
                }
              ],
              "description": "Implicit :( @override for FormGroupMixin, as choice fields \"fieldsets\"\nwill always implement both mixins\n\nTODO: Consider making this explicit by extracting this method to its own mixin and\nusing it in both FormGroupMixin and ChoiceGroupMixin, then override it here\nThis also makes it more DRY as we have same method with similar implementation\nin FormGroupMixin. I (@jorenbroekema) think the abstraction is worth it here..",
              "return": {
                "type": {
                  "text": "{[name:string]: any}"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_throwWhenInvalidChildModelValue",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControl"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_checkSingleChoiceElements",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent & {target:FormControl}"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_setCheckedElements",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | any[]"
                  }
                },
                {
                  "name": "check",
                  "type": {
                    "text": "Function"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setChoiceGroupTouched",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isInitialModelValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isInitialSerializedValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isInitialFormattedValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__renderAsNodes",
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "parameters": [
                {
                  "name": "slotName",
                  "description": "Name of the slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__privateSlots",
              "privacy": "private",
              "default": "new Set(null)",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "isRegisteredFormElement",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "ElementWithParentFormGroup"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFormElement",
              "parameters": [
                {
                  "name": "child",
                  "description": "the child element (field)",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToAddFormElement",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to perform logic before an element is added",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToChangeFormElementName",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToRemoveFormElement",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formElements",
              "description": "Closely mimics the natively supported HTMLFormControlsCollection. It can be accessed\nboth like an array and an object (based on control/element names).",
              "type": {
                "text": "FormControlsCollection"
              },
              "default": "new FormControlsCollection()",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isFormOrFieldset",
              "type": {
                "text": "boolean"
              },
              "description": "Flag that determines how \".formElements\" should behave.\nFor a regular fieldset (see LionFieldset) we expect \".formElements\"\nto be accessible as an object.\nIn case of a radio-group, a checkbox-group or a select/listbox,\nit should act like an array (see ChoiceGroupMixin).\nUsually, when false, we deal with a choice-group (radio-group, checkbox-group,\n(multi)select)",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "initComplete",
              "description": "initComplete resolves after all pending initialization logic\n(for instance `<form-group .serializedValue=${{ child1: 'a', child2: 'b' }}>`)\nis executed",
              "type": {
                "text": "Promise<any>"
              },
              "default": "new Promise((resolve, reject) => {\n        this.__resolveInitComplete = resolve;\n        this.__rejectInitComplete = reject;\n      })",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registrationComplete",
              "description": "registrationComplete waits for all children formElements to have registered",
              "type": {
                "text": "Promise<any> & {done?:boolean}"
              },
              "default": "new Promise((resolve, reject) => {\n        this.__resolveRegistrationComplete = resolve;\n        this.__rejectRegistrationComplete = reject;\n      })",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "done",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Calls `focus()` on focusable element within",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Calls `blur()` on focusable element within",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onBlur",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__registerEventsForFocusMixin",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__teardownEventsForFocusMixin",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) is focused.\nReflects to attribute '[focused]' as a styling hook",
              "default": "false",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "focusedVisible",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) matches ':focus-visible'\nReflects to attribute '[focused-visible]' as a styling hook\nSee: https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible",
              "default": "false",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldVal",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "initInteractionState",
              "description": "Evaluations performed on connectedCallback.\nThis method is public, so it can be called at a later moment (when we need to wait for\nregistering children for instance) as well.\nSince this method will be called twice in last mentioned scenario, it must stay idempotent.",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_iStateOnLeave",
              "description": "Sets touched value to true and reevaluates prefilled state.\nWhen false, on next interaction, user will start with a clean state.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_iStateOnValueChange",
              "description": "Sets dirty value and validates when already touched or invalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onTouchedChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onDirtyChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_showFeedbackConditionFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "type": {
                    "text": "InteractionStates"
                  }
                }
              ],
              "description": "Default feedbackCondition condition, used by Subclassers, that will be used when\n`feedbackCondition()` is not overridden by Application Developer.\nShow the validity feedback when returning true, don't show when false",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "touched",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has focused and left(blurred) the field.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "dirty",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has changed the value of the field.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "prefilled",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has left non-empty field or input is prefilled.\nThe name must be seen from the point of view of the input field:\nonce the user enters the input field, the value is non-empty.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "description": "True when the modelValue is non-empty (see _isEmpty in FormControlMixin)",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_leaveEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the touched state",
              "privacy": "protected",
              "default": "'blur'",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_valueChangedEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the dirty state",
              "privacy": "protected",
              "default": "'model-value-changed'",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationTypes",
              "static": true,
              "description": "Types of validation supported by this FormControl (for instance 'error'|'warning'|'info')",
              "type": {
                "text": "ValidationType[]"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_allValidators",
              "description": "Combination of validators provided by Application Developer and the default validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updateSync",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "An abstraction that has the exact same api as `requestUpdate`, but taking\ninto account:\n- [member order independence](https://github.com/webcomponents/gold-standard/wiki/Member-Order-Independence)\n- property effects start when all (light) dom has initialized (on firstUpdated)\n- property effects don't interrupt the first meaningful paint\n- compatible with propertyAccessor.`hasChanged`: no manual checks needed or accidentally\nrun property effects / events when no change happened\neffects when values didn't change\nAll code previously present in requestUpdate can be placed in this method.",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "parameters": [
                {
                  "name": "{ clearCurrentResult }",
                  "default": "{}"
                },
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "{ clearCurrentResult?: boolean }"
                  }
                }
              ],
              "description": "Triggered by:\n - modelValue change\n - change in the 'validators' array\n-  change in the config of an individual Validator\n\nThree situations are handled:\n- a1) the FormControl is empty: further execution is halted. When the Required Validator\n(being mutually exclusive to the other Validators) is applied, it will end up in the\nvalidation result (as the only Validator, since further execution was halted).\n- a2) there are synchronous Validators: this is the most common flow. When modelValue hasn't\nchanged since last async results were generated, 'sync results' are merged with the\n'async results'.\n- a3) there are asynchronous Validators: for instance when server side evaluation is needed.\nExecutions are scheduled and awaited and the 'async results' are merged with the\n'sync results'.\n\n- b) there are ResultValidators. After steps a1, a2, or a3 are finished, the holistic\nResultValidators (evaluating the total result of the 'regular' (a1, a2 and a3) validators)\nwill be run...\n\nSituations a2 and a3 are not mutually exclusive and can be triggered within one `validate()`\ncall. Situation b will occur after every call.",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeValidators",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeSyncValidators",
              "parameters": [
                {
                  "name": "syncValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "{ hasAsync }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ hasAsync: boolean }"
                  }
                }
              ],
              "description": "step a2 (as explained in `validate()`): calls `__finishValidation`",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeAsyncValidators",
              "parameters": [
                {
                  "name": "asyncValidators",
                  "description": "all Validators except required and ResultValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "step a3 (as explained in `validate()`), calls __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeResultValidators",
              "parameters": [
                {
                  "name": "regularValidationResult",
                  "description": "result of steps 1-3",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "description": "step b (as explained in `validate()`), called by __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__finishValidation",
              "parameters": [
                {
                  "name": "{ source, hasAsync }"
                },
                {
                  "name": "options",
                  "type": {
                    "text": "@param {'sync'|'async'} options.source\n     * @param {boolean} [options.hasAsync] whether async validators are configured in this run.\n     * "
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__clearValidationResults",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onValidatorUpdated",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event|CustomEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__isEmpty",
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Helper method for the mutually exclusive Required Validator",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getFeedbackMessages",
              "parameters": [
                {
                  "name": "validators",
                  "description": "list of objects having a .getMessage method",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise.<FeedbackMessage[]>"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateFeedbackComponent",
              "description": "Responsible for retrieving messages from Validators and\n(delegation of) rendering them.\n\nFor `._feedbackNode` (extension of LionValidationFeedback):\n- retrieve messages from highest prio Validators\n- provide the result to custom feedback node and let the\ncustom node decide on their renderings\n\nIn both cases:\n- we compute the 'show' flag (like 'hasErrorVisible') for all types\n- we set the customValidity message of the highest prio Validator\n- we set aria-invalid=\"true\" in case hasErrorVisible is true",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "feedbackCondition",
              "parameters": [
                {
                  "name": "type",
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "default": "this._feedbackConditionMeta",
                  "description": "meta info (interaction states etc)",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "name": "currentCondition",
                  "default": "this._showFeedbackConditionFor.bind(this)",
                  "description": "this is the _showFeedbackConditionFor\nthat can be used if a developer wants to override for a certain type, but wants to fallback\nfor other types",
                  "type": {
                    "text": "((type: string, meta: object) => boolean)"
                  }
                }
              ],
              "description": "Allows the end user to specify when a feedback message should be shown",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_hasFeedbackVisibleFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Used to translate `.hasFeedbackFor` and `.shouldShowFeedbackFor` to `.showsFeedbackFor`",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateShouldShowFeedbackFor",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_prioritizeAndFilterFeedback",
              "parameters": [
                {
                  "name": "{ validationResult }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ validationResult: Validator[] }"
                  }
                }
              ],
              "description": "Orders all active validators in this.__validationResult. Can\nalso filter out occurrences (based on interaction states)",
              "return": {
                "type": {
                  "text": "Validator[]"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "hasFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "As soon as validation happens (after modelValue/validators/validator param change), this\narray is updated with the active ValidationTypes ('error'|'warning'|'success'|'info' etc.).\nNotice the difference with `.showsFeedbackFor`, which filters `.hasFeedbackFor` based on\n`.feedbackCondition()`.\n\nFor styling purposes, will be reflected to [has-feedback-for=\"error warning\"]. This can\nbe useful for subtle visual feedback on keyup, like a red/green border around an input.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "showsFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "Based on outcome of feedbackCondition, this array decides what ValidationTypes should be\nshown in validationFeedback, based on meta data like interaction states.\n\nFor styling purposes, it reflects it `[shows-feedback-for=\"error warning\"]`",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shouldShowFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "A temporary storage to transition from hasFeedbackFor to showsFeedbackFor",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationStates",
              "type": {
                "text": "Object.<string, Object.<string, boolean>>"
              },
              "description": "The outcome of a validation 'round'. Keyed by ValidationType and Validator name",
              "default": "{}",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "isPending",
              "type": {
                "text": "boolean"
              },
              "description": "Flag indicating whether async validation is pending.\nCreates attribute [is-pending] as a styling hook",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Application Developers to add Validators to a FormControl.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "defaultValidators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Subclassers to add default Validators to a particular FormControl.\nA date input for instance, always needs the isDate validator.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_visibleMessagesAmount",
              "type": {
                "text": "number"
              },
              "description": "The amount of feedback messages that will visible in LionValidationFeedback",
              "privacy": "protected",
              "default": "1",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__syncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__asyncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__validationResult",
              "type": {
                "text": "Validator[]"
              },
              "description": "Aggregated result from sync Validators, async Validators and ResultValidators",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevShownValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__childModelValueChanged",
              "type": {
                "text": "boolean"
              },
              "description": "The updated children validity affects the validity of the parent. Helper to recompute\nvalidatity of parent FormGroup",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableHasChanged",
              "static": true,
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Makes the propertyAccessor.`hasChanged` compatible in synchronous updates",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableInitialize",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__SyncUpdatableNamespace",
              "type": {
                "text": "SyncUpdatableNamespace"
              },
              "description": "Namespace for this mixin that guarantees naming clashes will not occur...",
              "default": "{}",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "form-element-name-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "focus",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "blur",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "focusin",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "focusout",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "touched-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "name": "dirty-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "name": "showsFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "shouldShowFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "validate-performed",
              "type": {
                "text": "Event"
              },
              "description": "private event that should be listened to by LionFieldSet",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            }
          ],
          "superclass": {
            "name": "LionListbox",
            "package": "@lion/listbox"
          },
          "tagName": "atom-listbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AtomListbox",
          "declaration": {
            "name": "AtomListbox",
            "module": "packages/atom-listbox/src/atom-listbox.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/src/atom-option.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AtomOption",
          "members": [
            {
              "kind": "method",
              "name": "onFilterMatch",
              "parameters": [
                {
                  "name": "currentValue",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onFilterUnmatch"
            },
            {
              "kind": "field",
              "name": "match",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "privacy": "public",
              "attribute": "match",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "slots",
              "inheritedFrom": {
                "name": "LionOption",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOption.js"
              }
            },
            {
              "kind": "method",
              "name": "__registerEventListeners",
              "privacy": "private",
              "inheritedFrom": {
                "name": "LionOption",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOption.js"
              }
            },
            {
              "kind": "method",
              "name": "__unRegisterEventListeners",
              "privacy": "private",
              "inheritedFrom": {
                "name": "LionOption",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOption.js"
              }
            },
            {
              "kind": "method",
              "name": "__onClick",
              "privacy": "private",
              "inheritedFrom": {
                "name": "LionOption",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOption.js"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "privacy": "public",
              "attribute": "active",
              "reflects": true,
              "inheritedFrom": {
                "name": "LionOption",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOption.js"
              }
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Boolean indicating whether or not this element is disabled.",
              "default": "false",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "choiceValue",
              "description": "The value that will be registered to the modelValue of the parent ChoiceGroup. Recommended\nto be a string",
              "type": {
                "text": "string|any"
              },
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "Styles for [input=radio] and [input=checkbox] wrappers.\nFor [role=option] extensions, please override completely",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Template for [input=radio] and [input=checkbox] wrappers.\nFor [role=option] extensions, please override completely",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_choiceGraphicTemplate",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_afterTemplate",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_preventDuplicateLabelClick",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "The native platform fires an event for both the click on the label, and also\nthe redispatched click on the native input element.\nThis results in two click events arriving at the host, but we only want one.\nThis method prevents the duplicate click and ensures the correct isTrusted event\nwith the correct event.target arrives at the host.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_toggleChecked",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_syncNameToParentFormGroup",
              "description": "Override this in case of extending ChoiceInputMixin and requiring\nto sync differently with parent form group name\nRight now it checks tag name match where the parent form group tagname\nshould include the child field tagname ('checkbox' is included in 'checkbox-group')",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncModelCheckedToChecked",
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncCheckedToModel",
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncCheckedToInputElement",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_proxyInputEvent",
              "description": "This can be called whenever the view value should be updated. Dependent on component type\n(\"input\" for <input> or \"change\" for <select>(mainly for IE)) a different event should be\nused  as source for the \"user-input-changed\" event (which can be seen as an abstraction\nlayer on top of other events (input, change, whatever))",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onModelValueChanged",
              "parameters": [
                {
                  "name": "{ modelValue }"
                },
                {
                  "name": "old",
                  "optional": true,
                  "type": {
                    "text": "{ modelValue:unknown }"
                  }
                },
                {
                  "name": "newV",
                  "type": {
                    "text": "{ modelValue:unknown }"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "parser",
              "parameters": [
                {
                  "name": "v",
                  "description": "viewValue: the formatted value inside <input>",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "FormatOptions"
                  }
                }
              ],
              "description": "Converts viewValue to modelValue\nFor instance, a localized date to a Date Object",
              "return": {
                "type": {
                  "text": "*"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "formatter",
              "parameters": [
                {
                  "name": "modelValue",
                  "type": {
                    "text": "ChoiceInputModelValue"
                  }
                }
              ],
              "description": "Converts modelValue to formattedValue (formattedValue will be synced with\n`._inputNode.value`)\nFor instance, a Date object to a localized date.",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "clear",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "description": "Used for required validator.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_syncValueUpwards",
              "description": "Synchronization from `._inputNode.value` to `LionField` (flow [2])\nDownwards syncing should only happen for `LionField`.value changes from 'above'.\nThis triggers _onModelValueChanged and connects user input\nto the parsing/formatting/serializing loop.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "modelValue",
              "type": {
                "text": "{value:string|any,checked:boolean}"
              },
              "description": "Whereas 'normal' `.modelValue`s usually store a complex/typed version\nof a view value, choice inputs have a slightly different approach.\nIn order to remain their Single Source of Truth characteristic, choice inputs\nstore both the value and 'checkedness', in the format { value: 'x', checked: true }\nDifferent from the platform, this also allows to serialize the 'non checkedness',\nallowing to restore form state easily and inform the server about unchecked options.",
              "default": "{ value: '', checked: false }",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The view value. Will be delegated to `._inputNode.value`",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "preprocessor",
              "parameters": [
                {
                  "name": "v",
                  "description": "the raw value from the <input> after keyUp/Down event",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Preprocesses the viewValue before it's parsed to a modelValue. Can be used to filter\ninvalid input amongst others.",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "serializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.modelValue` to `.serializedValue`\nFor instance, a Date object to an iso formatted date string",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "deserializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.serializedValue` to `.modelValue`\nFor instance, an iso formatted date string to a Date object",
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_calculateValues",
              "parameters": [
                {
                  "name": "{ source }",
                  "default": "{ source: null }"
                },
                {
                  "description": "the type of value that triggered this method. It should not be\nset again, so that its observer won't be triggered. Can be:\n'model'|'formatted'|'serialized'.",
                  "name": "config",
                  "type": {
                    "text": "{source:'model'|'serialized'|'formatted'|null}"
                  }
                }
              ],
              "description": "Responsible for storing all representations(modelValue, serializedValue, formattedValue\nand value) of the input value. Prevents infinite loops, so all value observers can be\ntreated like they will only be called once, without indirectly calling other observers.\n(in fact, some are called twice, but the __preventRecursiveTrigger lock prevents the\nsecond call from having effect).",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_callParser",
              "parameters": [
                {
                  "name": "value",
                  "default": "this.formattedValue",
                  "type": {
                    "text": "string|undefined"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_callFormatter",
              "return": {
                "type": {
                  "text": "string|undefined"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchModelValueChangedEvent",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "{ modelValue: unknown; }[]"
                  }
                }
              ],
              "description": "This is wrapped in a distinct method, so that parents can control when the changed event\nis fired. For objects, a deep comparison might be needed.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_reflectBackFormattedValueToUser",
              "description": "Synchronization from `LionField.value` to `._inputNode.value`\n- flow [1] will always be reflected back\n- flow [2] will not be reflected back when this flow was triggered via\n  `@user-input-changed` (this will happen later, when `formatOn` condition is met)",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_reflectBackOn",
              "description": "Every time .formattedValue is attempted to sync to the view value (on change/blur and on\nmodelValue change), this condition is checked. When enhancing it, it's recommended to\ncall `super._reflectBackOn()`",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onUserInputChanged",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onCompositionEvent",
              "parameters": [
                {
                  "name": "{ type }"
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onPaste",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formatOn",
              "type": {
                "text": "string"
              },
              "description": "Event that will trigger formatting (more precise, visual update of the view, so the\nuser sees the formatted value)\nDefault: 'change'",
              "privacy": "protected",
              "default": "'change'",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formatOptions",
              "description": "Configuration object that will be available inside the formatter function",
              "default": "({})",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "description": "The view value is the result of the formatter function (when available).\nThe result will be stored in the native _inputNode (usually an input[type=text]).\n\nExamples:\n- For a date input, this would be '20/01/1999' (dependent on locale).\n- For a number input, this could be '1,234.56' (a String representation of modelValue\n1234.56)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "description": "The serialized version of the model value.\nThis value exists for maximal compatibility with the platform API.\nThe serialized value can be an interface in context where data binding is not\nsupported and a serialized string needs to be set.\n\nExamples:\n- For a date input, this would be the iso format of a date, e.g. '1999-01-20'.\n- For a number input this would be the String representation of a float ('1234.56'\n  instead of 1234.56)\n\nWhen no parser is available, the value is usually the same as the formattedValue\n(being _inputNode.value)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isPasting",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the user is pasting content. Allows Subclassers to do this in their subclass:",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isHandlingUserInput",
              "type": {
                "text": "boolean"
              },
              "description": "Flag that will be set when user interaction takes place (for instance after an 'input'\nevent). Will be added as meta info to the `model-value-changed` event. Depending on\nwhether a user is interacting, formatting logic will be handled differently.",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevViewValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_reflectBackFormattedValueDebounced",
              "privacy": "private",
              "default": "() => {\n        // Make sure this is fired after the change event of _inputNode, so that formattedValue\n        // is guaranteed to be calculated\n        setTimeout(this._reflectBackFormattedValueToUser);\n      }",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "match",
              "fieldName": "match"
            },
            {
              "name": "active",
              "fieldName": "active",
              "inheritedFrom": {
                "name": "LionOption",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOption.js"
              }
            }
          ],
          "superclass": {
            "name": "LionOption",
            "package": "@lion/listbox"
          },
          "tagName": "atom-option",
          "customElement": true,
          "events": [
            {
              "name": "active-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "LionOption",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOption.js"
              }
            },
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "name": "user-input-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AtomOption",
          "declaration": {
            "name": "AtomOption",
            "module": "packages/atom-listbox/src/atom-option.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/test/atom-list-box.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/async-directive.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/async-directive.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/async-directive.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/async-directive.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/custom-element.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/property.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/state.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/event-options.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query-all.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query-async.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query-assigned-nodes.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directive-helpers.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directive-helpers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directive-helpers.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directive-helpers.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directive.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directive.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directive.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directive.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/experimental-hydrate-support.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-element/experimental-hydrate-support.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/experimental-hydrate-support.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-element/experimental-hydrate-support.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/experimental-hydrate.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/experimental-hydrate.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/experimental-hydrate.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/experimental-hydrate.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/html.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/html.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-element/lit-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-element/lit-element.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/polyfill-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/polyfill-support.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/static-html.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/static.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/static-html.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/static.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/base.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/base.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/custom-element.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/property.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/state.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/event-options.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query-all.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query-async.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query-assigned-nodes.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/experimental-hydrate-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/experimental-hydrate-support.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./lit-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html\""
          }
        },
        {
          "kind": "js",
          "name": "LitElement",
          "declaration": {
            "name": "LitElement",
            "module": "\"./lit-element.js\""
          }
        },
        {
          "kind": "js",
          "name": "UpdatingElement",
          "declaration": {
            "name": "UpdatingElement",
            "module": "\"./lit-element.js\""
          }
        },
        {
          "kind": "js",
          "name": "_$LE",
          "declaration": {
            "name": "_$LE",
            "module": "\"./lit-element.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/base.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/custom-element.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/property.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/state.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/event-options.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query-all.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query-async.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query-assigned-nodes.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/lit-element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "UpdatingElement",
          "type": {
            "text": "typeof ReactiveElement"
          }
        },
        {
          "kind": "class",
          "description": "Base element class that manages element properties and attributes, and\nrenders a lit-html template.\n\nTo define a component, subclass `LitElement` and implement a\n`render` method to provide the component's template. Define properties\nusing the [[`properties`]] property or the [[`property`]] decorator.",
          "name": "LitElement",
          "members": [
            {
              "kind": "field",
              "name": "['finalized']",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Ensure this class is marked as `finalized` as an optimization ensuring\nit will not needlessly try to `finalize`.\n\nNote this property name is a string to prevent breaking Closure JS Compiler\noptimizations. See @lit/reactive-element for more information."
            },
            {
              "kind": "field",
              "name": "['_$litElement$']",
              "type": {
                "text": "boolean"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": "Element | ShadowRoot"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "superclass": {
            "name": "ReactiveElement",
            "package": "@lit/reactive-element"
          }
        },
        {
          "kind": "variable",
          "name": "_$LE",
          "type": {
            "text": "{\n    _$attributeToProperty: (el: LitElement, name: string, value: string | null) => void;\n    _$changedProperties: (el: LitElement) => any;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nPrivate exports for use by other Lit packages, not intended for use by\nexternal users.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports  mangled in the\nclient side code, we export a _$LE object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.\n\nThis has a unique name, to disambiguate it from private exports in\nlit-html, since this module re-exports all of lit-html.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html"
          }
        },
        {
          "kind": "js",
          "name": "UpdatingElement",
          "declaration": {
            "name": "UpdatingElement",
            "module": "packages/atom-listbox/node_modules/lit-element/lit-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "LitElement",
          "declaration": {
            "name": "LitElement",
            "module": "packages/atom-listbox/node_modules/lit-element/lit-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "_$LE",
          "declaration": {
            "name": "_$LE",
            "module": "packages/atom-listbox/node_modules/lit-element/lit-element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/lit-element.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "s",
          "default": "t"
        },
        {
          "kind": "class",
          "description": "",
          "name": "n",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot"
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{host:this}"
            },
            {
              "kind": "field",
              "name": "_$Dt",
              "default": "void 0"
            }
          ],
          "superclass": {
            "name": "t",
            "package": "@lit/reactive-element"
          }
        },
        {
          "kind": "variable",
          "name": "h",
          "type": {
            "text": "object"
          },
          "default": "{_$AK:(t,e,i)=>{t._$AK(e,i)},_$AL:t=>t._$AL}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html\""
          }
        },
        {
          "kind": "js",
          "name": "LitElement",
          "declaration": {
            "name": "n",
            "module": "packages/atom-listbox/node_modules/lit-element/lit-element.js"
          }
        },
        {
          "kind": "js",
          "name": "UpdatingElement",
          "declaration": {
            "name": "s",
            "module": "packages/atom-listbox/node_modules/lit-element/lit-element.js"
          }
        },
        {
          "kind": "js",
          "name": "_$LE",
          "declaration": {
            "name": "h",
            "module": "packages/atom-listbox/node_modules/lit-element/lit-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/polyfill-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/polyfill-support.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/private-ssr-support.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "_$LE",
          "type": {
            "text": "{\n    attributeToProperty: (el: import(\"./lit-element.js\").LitElement, name: string, value: string | null) => void;\n    changedProperties: (el: import(\"./lit-element.js\").LitElement) => any;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports  mangled in the\nclient side code, we export a _$LE object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "_$LE",
          "declaration": {
            "name": "_$LE",
            "module": "packages/atom-listbox/node_modules/lit-element/private-ssr-support.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/private-ssr-support.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "e",
          "type": {
            "text": "object"
          },
          "default": "{attributeToProperty:t._$AK,changedProperties:t._$AL}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "_$LE",
          "declaration": {
            "name": "e",
            "module": "packages/atom-listbox/node_modules/lit-element/private-ssr-support.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/async-directive.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An abstract `Directive` base class whose `disconnected` method will be\ncalled when the part containing the directive is cleared as a result of\nre-rendering, or when the user calls `part.setConnected(false)` on\na part that was previously rendered containing the directive (as happens\nwhen e.g. a LitElement disconnects from the DOM).\n\nIf `part.setConnected(true)` is subsequently called on a\ncontaining part, the directive's `reconnected` method will be called prior\nto its next `update`/`render` callbacks. When implementing `disconnected`,\n`reconnected` should also be implemented to be compatible with reconnection.\n\nNote that updates may occur while the directive is disconnected. As such,\ndirectives should generally check the `this.isConnected` flag during\nrender/update to determine whether it is safe to subscribe to resources\nthat may prevent garbage collection.",
          "name": "AsyncDirective",
          "members": [
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive."
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields"
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`."
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render."
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/directive.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "directive",
          "declaration": {
            "name": "directive",
            "module": "./directive.js"
          }
        },
        {
          "kind": "js",
          "name": "AsyncDirective",
          "declaration": {
            "name": "AsyncDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/async-directive.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/async-directive.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "d",
          "members": [
            {
              "kind": "method",
              "name": "_$AT",
              "parameters": [
                {
                  "name": "i"
                },
                {
                  "name": "t"
                },
                {
                  "name": "s"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$AO",
              "parameters": [
                {
                  "name": "i"
                },
                {
                  "name": "t",
                  "default": "!0"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "disconnected"
            },
            {
              "kind": "method",
              "name": "reconnected"
            },
            {
              "kind": "field",
              "name": "_$AN",
              "default": "void 0"
            }
          ],
          "superclass": {
            "name": "t",
            "module": "/packages/atom-listbox/node_modules/lit-html/directive.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "directive",
          "declaration": {
            "name": "directive",
            "module": "\"./directive.js\""
          }
        },
        {
          "kind": "js",
          "name": "AsyncDirective",
          "declaration": {
            "name": "d",
            "module": "packages/atom-listbox/node_modules/lit-html/async-directive.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directive-helpers.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "isPrimitive",
          "type": {
            "text": "(value: unknown) => value is Primitive"
          },
          "description": "Tests if a value is a primitive value.\n\nSee https://tc39.github.io/ecma262/#sec-typeof-operator"
        },
        {
          "kind": "variable",
          "name": "TemplateResultType",
          "type": {
            "text": "{\n    readonly HTML: 1;\n    readonly SVG: 2;\n}"
          }
        },
        {
          "kind": "variable",
          "name": "isTemplateResult",
          "type": {
            "text": "(value: unknown, type?: TemplateResultType | undefined) => value is TemplateResult<1 | 2>"
          },
          "description": "Tests if a value is a TemplateResult."
        },
        {
          "kind": "variable",
          "name": "isDirectiveResult",
          "type": {
            "text": "(value: unknown) => value is DirectiveResult<DirectiveClass>"
          },
          "description": "Tests if a value is a DirectiveResult."
        },
        {
          "kind": "variable",
          "name": "getDirectiveClass",
          "type": {
            "text": "(value: unknown) => DirectiveClass | undefined"
          },
          "description": "Retrieves the Directive class for a DirectiveResult"
        },
        {
          "kind": "variable",
          "name": "isSingleExpression",
          "type": {
            "text": "(part: PartInfo) => boolean"
          },
          "description": "Tests whether a part has only a single-expression with no strings to\ninterpolate between.\n\nOnly AttributePart and PropertyPart can have multiple expressions.\nMulti-expression parts have a `strings` property and single-expression\nparts do not."
        },
        {
          "kind": "variable",
          "name": "insertPart",
          "type": {
            "text": "(containerPart: import(\"./lit-html.js\").ChildPart, refPart?: import(\"./lit-html.js\").ChildPart | undefined, part?: import(\"./lit-html.js\").ChildPart | undefined) => import(\"./lit-html.js\").ChildPart"
          },
          "description": "Inserts a ChildPart into the given container ChildPart's DOM, either at the\nend of the container ChildPart, or before the optional `refPart`.\n\nThis does not add the part to the containerPart's committed value. That must\nbe done by callers.",
          "parameters": [
            {
              "description": "Part within which to add the new ChildPart",
              "name": "containerPart"
            },
            {
              "description": "Part before which to add the new ChildPart; when omitted the\npart added to the end of the `containerPart`",
              "name": "refPart"
            },
            {
              "description": "Part to insert, or undefined to create a new part",
              "name": "part"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "setChildPartValue",
          "type": {
            "text": "<T extends import(\"./lit-html.js\").ChildPart>(part: T, value: unknown, directiveParent?: DirectiveParent) => T"
          },
          "description": "Sets the value of a Part.\n\nNote that this should only be used to set/update the value of user-created\nparts (i.e. those created using `insertPart`); it should not be used\nby directives to set the value of the directive's container part. Directives\nshould return a value from `update`/`render` to update their part state.\n\nFor directives that require setting their part value asynchronously, they\nshould extend `AsyncDirective` and call `this.setValue()`.",
          "parameters": [
            {
              "description": "Part to set",
              "name": "part"
            },
            {
              "description": "Value to set",
              "name": "value"
            },
            {
              "description": "For `AttributePart`s, the index to set",
              "name": "index"
            },
            {
              "description": "Used internally; should not be set by user",
              "name": "directiveParent"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "setCommittedValue",
          "type": {
            "text": "(part: Part, value?: unknown) => unknown"
          },
          "description": "Sets the committed value of a ChildPart directly without triggering the\ncommit stage of the part.\n\nThis is useful in cases where a directive needs to update the part such\nthat the next update detects a value change or not. When value is omitted,\nthe next update will be guaranteed to be detected as a change.",
          "parameters": [
            {
              "name": "part"
            },
            {
              "name": "value"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "getCommittedValue",
          "type": {
            "text": "(part: import(\"./lit-html.js\").ChildPart) => unknown"
          },
          "description": "Returns the committed value of a ChildPart.\n\nThe committed value is used for change detection and efficient updates of\nthe part. It can differ from the value set by the template or directive in\ncases where the template value is transformed before being commited.\n\n- `TemplateResult`s are committed as a `TemplateInstance`\n- Iterables are committed as `Array<ChildPart>`\n- All other types are committed as the template value or value returned or\n  set by a directive.",
          "parameters": [
            {
              "name": "part"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "removePart",
          "type": {
            "text": "(part: import(\"./lit-html.js\").ChildPart) => void"
          },
          "description": "Removes a ChildPart from the DOM, including any of its content.",
          "parameters": [
            {
              "description": "The Part to remove",
              "name": "part"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "clearPart",
          "type": {
            "text": "(part: import(\"./lit-html.js\").ChildPart) => void"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isPrimitive",
          "declaration": {
            "name": "isPrimitive",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TemplateResultType",
          "declaration": {
            "name": "TemplateResultType",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isTemplateResult",
          "declaration": {
            "name": "isTemplateResult",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isDirectiveResult",
          "declaration": {
            "name": "isDirectiveResult",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getDirectiveClass",
          "declaration": {
            "name": "getDirectiveClass",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isSingleExpression",
          "declaration": {
            "name": "isSingleExpression",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "insertPart",
          "declaration": {
            "name": "insertPart",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "setChildPartValue",
          "declaration": {
            "name": "setChildPartValue",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "setCommittedValue",
          "declaration": {
            "name": "setCommittedValue",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getCommittedValue",
          "declaration": {
            "name": "getCommittedValue",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "removePart",
          "declaration": {
            "name": "removePart",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "clearPart",
          "declaration": {
            "name": "clearPart",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directive-helpers.js",
      "declarations": [
        {
          "kind": "function",
          "name": "t",
          "parameters": [
            {
              "name": "o"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "n",
          "type": {
            "text": "object"
          },
          "default": "{HTML:1,SVG:2}"
        },
        {
          "kind": "variable",
          "name": "v",
          "default": "(o,i)=>{var t,n;return void 0===i?void 0!==(null===(t=o)||void 0===t?void 0:t._$litType$):(null===(n=o)||void 0===n?void 0:n._$litType$)===i}"
        },
        {
          "kind": "variable",
          "name": "l",
          "default": "o=>{var i;return void 0!==(null===(i=o)||void 0===i?void 0:i._$litDirective$)}"
        },
        {
          "kind": "variable",
          "name": "d",
          "default": "o=>{var i;return null===(i=o)||void 0===i?void 0:i._$litDirective$}"
        },
        {
          "kind": "variable",
          "name": "r",
          "default": "o=>void 0===o.strings"
        },
        {
          "kind": "variable",
          "name": "u",
          "default": "(o,t,n)=>{var v;const l=o._$AA.parentNode,d=void 0===t?o._$AB:t._$AA;if(void 0===n){const t=l.insertBefore(e(),d),v=l.insertBefore(e(),d);n=new i(t,v,o,o.options)}else{const i=n._$AB.nextSibling,t=n._$AM,r=t!==o;if(r){let i;null===(v=n._$AQ)||void 0===v||v.call(n,o),n._$AM=o,void 0!==n._$AP&&(i=o._$AU)!==t._$AU&&n._$AP(i)}if(i!==d||r){let o=n._$AA;for(;o!==i;){const i=o.nextSibling;l.insertBefore(o,d),o=i}}}return n}"
        },
        {
          "kind": "variable",
          "name": "c",
          "default": "(o,i,t=o)=>(o._$AI(i,t),o)"
        },
        {
          "kind": "variable",
          "name": "s",
          "default": "(o,i=f)=>o._$AH=i"
        },
        {
          "kind": "variable",
          "name": "a",
          "default": "o=>o._$AH"
        },
        {
          "kind": "variable",
          "name": "m",
          "default": "o=>{var i;null===(i=o._$AP)||void 0===i||i.call(o,!1,!0);let t=o._$AA;const n=o._$AB.nextSibling;for(;t!==n;){const o=t.nextSibling;t.remove(),t=o}}"
        },
        {
          "kind": "variable",
          "name": "p",
          "default": "o=>{o._$AR()}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TemplateResultType",
          "declaration": {
            "name": "n",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "clearPart",
          "declaration": {
            "name": "p",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "getCommittedValue",
          "declaration": {
            "name": "a",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "getDirectiveClass",
          "declaration": {
            "name": "d",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "insertPart",
          "declaration": {
            "name": "u",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "isDirectiveResult",
          "declaration": {
            "name": "l",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "isPrimitive",
          "declaration": {
            "name": "t",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "isSingleExpression",
          "declaration": {
            "name": "r",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "isTemplateResult",
          "declaration": {
            "name": "v",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "removePart",
          "declaration": {
            "name": "m",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "setChildPartValue",
          "declaration": {
            "name": "c",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "setCommittedValue",
          "declaration": {
            "name": "s",
            "module": "packages/atom-listbox/node_modules/lit-html/directive-helpers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directive.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "PartType",
          "type": {
            "text": "{\n    readonly ATTRIBUTE: 1;\n    readonly CHILD: 2;\n    readonly PROPERTY: 3;\n    readonly BOOLEAN_ATTRIBUTE: 4;\n    readonly EVENT: 5;\n    readonly ELEMENT: 6;\n}"
          }
        },
        {
          "kind": "variable",
          "name": "directive",
          "type": {
            "text": "<C extends DirectiveClass>(c: C) => (...values: Parameters<InstanceType<C>[\"render\"]>) => DirectiveResult<C>"
          },
          "description": "Creates a user-facing directive function from a Directive class. This\nfunction has the same parameters as the directive's render() method."
        },
        {
          "kind": "class",
          "description": "Base class for creating custom directives. Users should extend this class,\nimplement `render` and/or `update`, and then pass their subclass to\n`directive`.",
          "name": "Directive",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AttributePart",
          "declaration": {
            "name": "AttributePart",
            "module": "./lit-html"
          }
        },
        {
          "kind": "js",
          "name": "BooleanAttributePart",
          "declaration": {
            "name": "BooleanAttributePart",
            "module": "./lit-html"
          }
        },
        {
          "kind": "js",
          "name": "ChildPart",
          "declaration": {
            "name": "ChildPart",
            "module": "./lit-html"
          }
        },
        {
          "kind": "js",
          "name": "ElementPart",
          "declaration": {
            "name": "ElementPart",
            "module": "./lit-html"
          }
        },
        {
          "kind": "js",
          "name": "EventPart",
          "declaration": {
            "name": "EventPart",
            "module": "./lit-html"
          }
        },
        {
          "kind": "js",
          "name": "Part",
          "declaration": {
            "name": "Part",
            "module": "./lit-html"
          }
        },
        {
          "kind": "js",
          "name": "PropertyPart",
          "declaration": {
            "name": "PropertyPart",
            "module": "./lit-html"
          }
        },
        {
          "kind": "js",
          "name": "PartType",
          "declaration": {
            "name": "PartType",
            "module": "packages/atom-listbox/node_modules/lit-html/directive.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "directive",
          "declaration": {
            "name": "directive",
            "module": "packages/atom-listbox/node_modules/lit-html/directive.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Directive",
          "declaration": {
            "name": "Directive",
            "module": "packages/atom-listbox/node_modules/lit-html/directive.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directive.js",
      "declarations": [
        {
          "kind": "function",
          "name": "e",
          "parameters": [
            {
              "name": "t"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "t",
          "type": {
            "text": "object"
          },
          "default": "{ATTRIBUTE:1,CHILD:2,PROPERTY:3,BOOLEAN_ATTRIBUTE:4,EVENT:5,ELEMENT:6}"
        },
        {
          "kind": "class",
          "description": "",
          "name": "i",
          "members": [
            {
              "kind": "field",
              "name": "_$AU"
            },
            {
              "kind": "method",
              "name": "_$AT",
              "parameters": [
                {
                  "name": "t"
                },
                {
                  "name": "e"
                },
                {
                  "name": "i"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$AS",
              "parameters": [
                {
                  "name": "t"
                },
                {
                  "name": "e"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Directive",
          "declaration": {
            "name": "i",
            "module": "packages/atom-listbox/node_modules/lit-html/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "PartType",
          "declaration": {
            "name": "t",
            "module": "packages/atom-listbox/node_modules/lit-html/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "directive",
          "declaration": {
            "name": "e",
            "module": "packages/atom-listbox/node_modules/lit-html/directive.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/experimental-hydrate.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "hydrate",
          "type": {
            "text": "(rootValue: unknown, container: Element | DocumentFragment, options?: Partial<RenderOptions>) => void"
          },
          "description": "hydrate() operates on a container with server-side rendered content and\nrestores the client side data structures needed for lit-html updates such as\nTemplateInstances and Parts. After calling `hydrate`, lit-html will behave as\nif it initially rendered the DOM, and any subsequent updates will update\nefficiently, the same as if lit-html had rendered the DOM on the client.\n\nhydrate() must be called on DOM that adheres the to lit-ssr structure for\nparts. ChildParts must be represented with both a start and end comment\nmarker, and ChildParts that contain a TemplateInstance must have the template\ndigest written into the comment data.\n\nSince render() encloses its output in a ChildPart, there must always be a root\nChildPart.\n\nExample (using for # ... for annotations in HTML)\n\nGiven this input:\n\n  html`<div class=${x}>${y}</div>`\n\nThe SSR DOM is:\n\n  <!--lit-part AEmR7W+R0Ak=-->  # Start marker for the root ChildPart created\n                                # by render(). Includes the digest of the\n                                # template\n  <div class=\"TEST_X\">\n    <!--lit-node 0--> # Indicates there are attribute bindings here\n                          # The number is the depth-first index of the parent\n                          # node in the template.\n    <!--lit-part-->  # Start marker for the ${x} expression\n    TEST_Y\n    <!--/lit-part-->  # End marker for the ${x} expression\n  </div>\n\n  <!--/lit-part-->  # End marker for the root ChildPart",
          "parameters": [
            {
              "name": "rootValue"
            },
            {
              "name": "container"
            },
            {
              "name": "userOptions"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "digestForTemplateResult",
          "type": {
            "text": "(templateResult: TemplateResult) => string"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "hydrate",
          "declaration": {
            "name": "hydrate",
            "module": "packages/atom-listbox/node_modules/lit-html/experimental-hydrate.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "digestForTemplateResult",
          "declaration": {
            "name": "digestForTemplateResult",
            "module": "packages/atom-listbox/node_modules/lit-html/experimental-hydrate.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/experimental-hydrate.js",
      "declarations": [
        {
          "kind": "function",
          "name": "p",
          "parameters": [
            {
              "name": "e"
            },
            {
              "name": "t"
            },
            {
              "name": "r",
              "default": "{}"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "m",
          "default": "e=>{const t=new Uint32Array(2).fill(5381);for(const r of e.strings)for(let e=0;e<r.length;e++)t[e%2]=33*t[e%2]^r.charCodeAt(e);return btoa(String.fromCharCode(...new Uint8Array(t.buffer)))}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "digestForTemplateResult",
          "declaration": {
            "name": "m",
            "module": "packages/atom-listbox/node_modules/lit-html/experimental-hydrate.js"
          }
        },
        {
          "kind": "js",
          "name": "hydrate",
          "declaration": {
            "name": "p",
            "module": "packages/atom-listbox/node_modules/lit-html/experimental-hydrate.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "html",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult<1>"
          },
          "description": "Interprets a template literal as an HTML template that can efficiently\nrender to and update a container.\n\n```ts\nconst header = (title: string) => html`<h1>${title}</h1>`;\n```\n\nThe `html` tag returns a description of the DOM to render as a value. It is\nlazy, meaning no work is done until the template is rendered. When rendering,\nif a template comes from the same expression as a previously rendered result,\nit's efficiently updated instead of replaced."
        },
        {
          "kind": "variable",
          "name": "svg",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult<2>"
          },
          "description": "Interprets a template literal as an SVG template that can efficiently\nrender to and update a container."
        },
        {
          "kind": "variable",
          "name": "noChange",
          "type": {
            "text": "unique symbol"
          },
          "description": "A sentinel value that signals that a value was handled by a directive and\nshould not be written to the DOM."
        },
        {
          "kind": "variable",
          "name": "nothing",
          "type": {
            "text": "unique symbol"
          },
          "description": "A sentinel value that signals a ChildPart to fully clear its content.\n\n```ts\nconst button = html`${\n user.isAdmin\n   ? html`<button>DELETE</button>`\n   : nothing\n}`;\n```\n\nPrefer using `nothing` over other falsy values as it provides a consistent\nbehavior between various expression binding contexts.\n\nIn child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\nsame and render no nodes. In attribute expressions, `nothing` _removes_ the\nattribute, while `undefined` and `null` will render an empty string. In\nproperty expressions `nothing` becomes `undefined`."
        },
        {
          "kind": "variable",
          "name": "render",
          "type": {
            "text": "{\n    (value: unknown, container: HTMLElement | DocumentFragment, options?: RenderOptions | undefined): RootPart;\n    setSanitizer: (newSanitizer: SanitizerFactory) => void;\n    createSanitizer: SanitizerFactory;\n    _testOnlyClearSanitizerFactoryDoNotCallOrElse: () => void;\n}"
          },
          "description": "Renders a value, usually a lit-html TemplateResult, to the container.",
          "parameters": [
            {
              "name": "value"
            },
            {
              "name": "container"
            },
            {
              "name": "options"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "ChildPart",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`."
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation."
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation."
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "AttributePart",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "PropertyPart",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AttributePart",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "BooleanAttributePart",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AttributePart",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "EventPart",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AttributePart",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "ElementPart",
          "members": [
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "variable",
          "name": "_$LH",
          "type": {
            "text": "{\n    _boundAttributeSuffix: string;\n    _marker: string;\n    _markerMatch: string;\n    _HTML_RESULT: number;\n    _getTemplateHtml: (strings: TemplateStringsArray, type: ResultType) => [TrustedHTML, Array<string | undefined>];\n    _TemplateInstance: typeof TemplateInstance;\n    _isIterable: (value: unknown) => value is Iterable<unknown>;\n    _resolveDirective: typeof resolveDirective;\n    _ChildPart: typeof ChildPart;\n    _AttributePart: typeof AttributePart;\n    _BooleanAttributePart: typeof BooleanAttributePart;\n    _EventPart: typeof EventPart;\n    _PropertyPart: typeof PropertyPart;\n    _ElementPart: typeof ElementPart;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nPrivate exports for use by other Lit packages, not intended for use by\nexternal users.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports  mangled in the\nclient side code, we export a _$LH object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.\n\nThis has a unique name, to disambiguate it from private exports in\nlit-element, which re-exports all of lit-html.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "html",
          "declaration": {
            "name": "html",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "svg",
          "declaration": {
            "name": "svg",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "noChange",
          "declaration": {
            "name": "noChange",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "nothing",
          "declaration": {
            "name": "nothing",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "render",
          "declaration": {
            "name": "render",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ChildPart",
          "declaration": {
            "name": "ChildPart",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "AttributePart",
          "declaration": {
            "name": "AttributePart",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "PropertyPart",
          "declaration": {
            "name": "PropertyPart",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "BooleanAttributePart",
          "declaration": {
            "name": "BooleanAttributePart",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "EventPart",
          "declaration": {
            "name": "EventPart",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ElementPart",
          "declaration": {
            "name": "ElementPart",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "_$LH",
          "declaration": {
            "name": "_$LH",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/lit-html.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "y"
        },
        {
          "kind": "variable",
          "name": "b"
        },
        {
          "kind": "variable",
          "name": "T"
        },
        {
          "kind": "variable",
          "name": "x"
        },
        {
          "kind": "variable",
          "name": "A",
          "default": "(t,i,s)=>{var e,o;const n=null!==(e=null==s?void 0:s.renderBefore)&&void 0!==e?e:i;let l=n._$litPart$;if(void 0===l){const t=null!==(o=null==s?void 0:s.renderBefore)&&void 0!==o?o:null;n._$litPart$=l=new S(i.insertBefore(r(),t),t,void 0,null!=s?s:{})}return l._$AI(t),l}"
        },
        {
          "kind": "variable",
          "name": "R",
          "type": {
            "text": "object"
          },
          "default": "{P:\"$lit$\",V:o,L:n,I:1,N:P,R:N,D:v,j:E,H:S,O:M,F:H,B:I,W:k,Z:L}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "_$LH",
          "declaration": {
            "name": "R",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "html",
          "declaration": {
            "name": "y",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "noChange",
          "declaration": {
            "name": "T",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "nothing",
          "declaration": {
            "name": "x",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "render",
          "declaration": {
            "name": "A",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "svg",
          "declaration": {
            "name": "b",
            "module": "packages/atom-listbox/node_modules/lit-html/lit-html.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/polyfill-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/polyfill-support.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/private-ssr-support.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "_$LH",
          "type": {
            "text": "{\n    boundAttributeSuffix: string;\n    marker: string;\n    markerMatch: string;\n    HTML_RESULT: number;\n    getTemplateHtml: (strings: TemplateStringsArray, type: 1 | 2) => [import(\"trusted-types/lib\").TrustedHTML, (string | undefined)[]];\n    overrideDirectiveResolve: (directiveClass: new (part: PartInfo) => Directive & {\n        render(): unknown;\n    }, resolveOverrideFn: (directive: Directive, values: unknown[]) => unknown) => {\n        new (part: PartInfo): {\n            _$resolve(this: Directive, _part: Part, values: unknown[]): unknown;\n            __part: Part;\n            __attributeIndex: number | undefined;\n            __directive?: Directive | undefined;\n            _$parent: Disconnectable;\n            _$disconnectableChildren?: Set<Disconnectable> | undefined;\n            _$notifyDirectiveConnectionChanged?(isConnected: boolean): void;\n            readonly _$isConnected: boolean;\n            _$initialize(part: Part, parent: Disconnectable, attributeIndex: number | undefined): void;\n            render: ((...props: unknown[]) => unknown) & (() => unknown);\n            update(_part: Part, props: unknown[]): unknown;\n        };\n    };\n    setDirectiveClass(value: DirectiveResult, directiveClass: DirectiveClass): void;\n    getAttributePartCommittedValue: (part: AttributePart, value: unknown, index: number | undefined) => unknown;\n    connectedDisconnectable: (props?: object | undefined) => Disconnectable;\n    resolveDirective: (part: import(\"./lit-html.js\").ChildPart | AttributePart | import(\"./lit-html.js\").ElementPart, value: unknown, parent?: import(\"./lit-html.js\").DirectiveParent, attributeIndex?: number | undefined) => unknown;\n    AttributePart: typeof AttributePart;\n    PropertyPart: typeof import(\"./lit-html.js\").PropertyPart;\n    BooleanAttributePart: typeof import(\"./lit-html.js\").BooleanAttributePart;\n    EventPart: typeof import(\"./lit-html.js\").EventPart;\n    ElementPart: typeof import(\"./lit-html.js\").ElementPart;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports mangled in the\nclient side code, we export a _$LH object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Template",
          "declaration": {
            "name": "Template",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "_$LH",
          "declaration": {
            "name": "_$LH",
            "module": "packages/atom-listbox/node_modules/lit-html/private-ssr-support.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/private-ssr-support.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "r",
          "type": {
            "text": "object"
          },
          "default": "{boundAttributeSuffix:t.P,marker:t.V,markerMatch:t.L,HTML_RESULT:t.I,getTemplateHtml:t.N,overrideDirectiveResolve:(t,e)=>class extends t{_$AS(t,r){return e(this,r)}},setDirectiveClass(t,e){t._$litDirective$=e},getAttributePartCommittedValue:(t,r,i)=>{let a=e;return t.k=t=>a=t,t._$AI(r,t,i),a},connectedDisconnectable:t=>({...t,_$AU:!0}),resolveDirective:t.j,AttributePart:t.O,PropertyPart:t.W,BooleanAttributePart:t.F,EventPart:t.B,ElementPart:t.Z}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "_$LH",
          "declaration": {
            "name": "r",
            "module": "packages/atom-listbox/node_modules/lit-html/private-ssr-support.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/static.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "unsafeStatic",
          "type": {
            "text": "(value: string) => {\n    _$litStatic$: string;\n}"
          },
          "description": "Wraps a string so that it behaves like part of the static template\nstrings instead of a dynamic value.\n\nUsers must take care to ensure that adding the static string to the template\nresults in well-formed HTML, or else templates may break unexpectedly.\n\nNote that this function is unsafe to use on untrusted content, as it will be\ndirectly parsed into HTML. Do not pass user input to this function\nwithout sanitizing it.\n\nStatic values can be changed, but they will cause a complete re-render\nsince they effectively create a new template."
        },
        {
          "kind": "variable",
          "name": "literal",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => {\n    _$litStatic$: unknown;\n}"
          },
          "description": "Tags a string literal so that it behaves like part of the static template\nstrings instead of a dynamic value.\n\nThe only values that may be used in template expressions are other tagged\n`literal` results or `unsafeStatic` values (note that untrusted content\nshould never be passed to `unsafeStatic`).\n\nUsers must take care to ensure that adding the static string to the template\nresults in well-formed HTML, or else templates may break unexpectedly.\n\nStatic values can be changed, but they will cause a complete re-render since\nthey effectively create a new template."
        },
        {
          "kind": "variable",
          "name": "withStatic",
          "type": {
            "text": "(coreTag: typeof coreHtml | typeof coreSvg) => (strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
          },
          "description": "Wraps a lit-html template tag (`html` or `svg`) to add static value support."
        },
        {
          "kind": "variable",
          "name": "html",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
          },
          "description": "Interprets a template literal as an HTML template that can efficiently\nrender to and update a container.\n\nIncludes static value support from `lit-html/static.js`."
        },
        {
          "kind": "variable",
          "name": "svg",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
          },
          "description": "Interprets a template literal as an SVG template that can efficiently\nrender to and update a container.\n\nIncludes static value support from `lit-html/static.js`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "unsafeStatic",
          "declaration": {
            "name": "unsafeStatic",
            "module": "packages/atom-listbox/node_modules/lit-html/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "literal",
          "declaration": {
            "name": "literal",
            "module": "packages/atom-listbox/node_modules/lit-html/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "withStatic",
          "declaration": {
            "name": "withStatic",
            "module": "packages/atom-listbox/node_modules/lit-html/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "html",
          "declaration": {
            "name": "html",
            "module": "packages/atom-listbox/node_modules/lit-html/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "svg",
          "declaration": {
            "name": "svg",
            "module": "packages/atom-listbox/node_modules/lit-html/static.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/static.js",
      "declarations": [
        {
          "kind": "function",
          "name": "o",
          "parameters": [
            {
              "name": "t"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "r",
          "default": "(t,...e)=>({_$litStatic$:e.reduce(((e,o,r)=>e+(t=>{if(void 0!==t._$litStatic$)return t._$litStatic$;throw Error(`Value passed to 'literal' function must be a 'literal' result: ${t}. Use 'unsafeStatic' to pass non-literal values, but\\n            take care to ensure page security.`)})(o)+t[r+1]),t[0])})"
        },
        {
          "kind": "variable",
          "name": "a",
          "default": "t=>(e,...o)=>{var r;const a=o.length;let l,s;const n=[],u=[];let c,$=0,v=!1;for(;$<a;){for(c=e[$];$<a&&void 0!==(s=o[$],l=null===(r=s)||void 0===r?void 0:r._$litStatic$);)c+=l+e[++$],v=!0;u.push(s),n.push(c),$++}if($===a&&n.push(e[a]),v){const t=n.join(\"$$lit$$\");void 0===(e=i.get(t))&&i.set(t,e=n),o=u}return t(e,...o)}"
        },
        {
          "kind": "variable",
          "name": "l"
        },
        {
          "kind": "variable",
          "name": "s"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "html",
          "declaration": {
            "name": "l",
            "module": "packages/atom-listbox/node_modules/lit-html/static.js"
          }
        },
        {
          "kind": "js",
          "name": "literal",
          "declaration": {
            "name": "r",
            "module": "packages/atom-listbox/node_modules/lit-html/static.js"
          }
        },
        {
          "kind": "js",
          "name": "svg",
          "declaration": {
            "name": "s",
            "module": "packages/atom-listbox/node_modules/lit-html/static.js"
          }
        },
        {
          "kind": "js",
          "name": "unsafeStatic",
          "declaration": {
            "name": "o",
            "module": "packages/atom-listbox/node_modules/lit-html/static.js"
          }
        },
        {
          "kind": "js",
          "name": "withStatic",
          "declaration": {
            "name": "a",
            "module": "packages/atom-listbox/node_modules/lit-html/static.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/singleton-manager/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "singletonManager",
          "type": {
            "text": "SingletonManagerClass"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SingletonManagerClass",
          "declaration": {
            "name": "SingletonManagerClass",
            "module": "\"./src/SingletonManagerClass.js\""
          }
        },
        {
          "kind": "js",
          "name": "singletonManager",
          "declaration": {
            "name": "singletonManager",
            "module": "packages/atom-listbox/node_modules/singleton-manager/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/singleton-manager/index.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "singletonManager",
          "default": "new SingletonManagerClass()"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SingletonManagerClass",
          "declaration": {
            "name": "SingletonManagerClass",
            "module": "./src/SingletonManagerClass.js"
          }
        },
        {
          "kind": "js",
          "name": "singletonManager",
          "declaration": {
            "name": "singletonManager",
            "module": "packages/atom-listbox/node_modules/singleton-manager/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@bundled-es-modules/message-format/index.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "MessageFormat",
          "default": "MessageFormatDefault"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MessageFormat",
          "declaration": {
            "name": "MessageFormat",
            "module": "packages/atom-listbox/node_modules/@bundled-es-modules/message-format/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@bundled-es-modules/message-format/MessageFormat.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "messageFormat",
          "default": "MessageFormat"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "messageFormat",
            "module": "packages/atom-listbox/node_modules/@bundled-es-modules/message-format/MessageFormat.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/closestPolyfill.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/closestPolyfill.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/differentKeyEventNamesShimIE.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/differentKeyEventNamesShimIE.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "html",
          "declaration": {
            "name": "html",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "CSSResult",
          "declaration": {
            "name": "CSSResult",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "adoptStyles",
          "declaration": {
            "name": "adoptStyles",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "css",
          "declaration": {
            "name": "css",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "getCompatibleStyle",
          "declaration": {
            "name": "getCompatibleStyle",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "supportsAdoptingStyleSheets",
          "declaration": {
            "name": "supportsAdoptingStyleSheets",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "unsafeCSS",
          "declaration": {
            "name": "unsafeCSS",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "UpdatingElement",
          "declaration": {
            "name": "UpdatingElement",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "notEqual",
          "declaration": {
            "name": "notEqual",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "ReactiveElement",
          "declaration": {
            "name": "ReactiveElement",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "svg",
          "declaration": {
            "name": "svg",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "noChange",
          "declaration": {
            "name": "noChange",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "nothing",
          "declaration": {
            "name": "nothing",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "render",
          "declaration": {
            "name": "render",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "RenderOptions",
          "declaration": {
            "name": "RenderOptions",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "LitElement",
          "declaration": {
            "name": "LitElement",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "defaultConverter",
          "declaration": {
            "name": "defaultConverter",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "CSSResultArray",
          "declaration": {
            "name": "CSSResultArray",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "PropertyValues",
          "declaration": {
            "name": "PropertyValues",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "TemplateResult",
          "declaration": {
            "name": "TemplateResult",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "customElement",
          "declaration": {
            "name": "customElement",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "property",
          "declaration": {
            "name": "property",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "state",
          "declaration": {
            "name": "state",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "eventOptions",
          "declaration": {
            "name": "eventOptions",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "query",
          "declaration": {
            "name": "query",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "queryAll",
          "declaration": {
            "name": "queryAll",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "queryAsync",
          "declaration": {
            "name": "queryAsync",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "queryAssignedNodes",
          "declaration": {
            "name": "queryAssignedNodes",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "AttributePart",
          "declaration": {
            "name": "AttributePart",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "BooleanAttributePart",
          "declaration": {
            "name": "BooleanAttributePart",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "ChildPart",
          "declaration": {
            "name": "ChildPart",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "ElementPart",
          "declaration": {
            "name": "ElementPart",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "EventPart",
          "declaration": {
            "name": "EventPart",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "Part",
          "declaration": {
            "name": "Part",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "PartType",
          "declaration": {
            "name": "PartType",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "directive",
          "declaration": {
            "name": "directive",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "Directive",
          "declaration": {
            "name": "Directive",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "DirectiveResult",
          "declaration": {
            "name": "DirectiveResult",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "AsyncDirective",
          "declaration": {
            "name": "AsyncDirective",
            "package": "lit/async-directive.js"
          }
        },
        {
          "kind": "js",
          "name": "isPrimitive",
          "declaration": {
            "name": "isPrimitive",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "TemplateResultType",
          "declaration": {
            "name": "TemplateResultType",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "isTemplateResult",
          "declaration": {
            "name": "isTemplateResult",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "isDirectiveResult",
          "declaration": {
            "name": "isDirectiveResult",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "getDirectiveClass",
          "declaration": {
            "name": "getDirectiveClass",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "isSingleExpression",
          "declaration": {
            "name": "isSingleExpression",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "insertPart",
          "declaration": {
            "name": "insertPart",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "setChildPartValue",
          "declaration": {
            "name": "setChildPartValue",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "setCommittedValue",
          "declaration": {
            "name": "setCommittedValue",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "getCommittedValue",
          "declaration": {
            "name": "getCommittedValue",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "removePart",
          "declaration": {
            "name": "removePart",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "clearPart",
          "declaration": {
            "name": "clearPart",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "asyncAppend",
          "declaration": {
            "name": "asyncAppend",
            "package": "lit/directives/async-append.js"
          }
        },
        {
          "kind": "js",
          "name": "asyncReplace",
          "declaration": {
            "name": "asyncReplace",
            "package": "lit/directives/async-replace.js"
          }
        },
        {
          "kind": "js",
          "name": "cache",
          "declaration": {
            "name": "cache",
            "package": "lit/directives/cache.js"
          }
        },
        {
          "kind": "js",
          "name": "classMap",
          "declaration": {
            "name": "classMap",
            "package": "lit/directives/class-map.js"
          }
        },
        {
          "kind": "js",
          "name": "guard",
          "declaration": {
            "name": "guard",
            "package": "lit/directives/guard.js"
          }
        },
        {
          "kind": "js",
          "name": "ifDefined",
          "declaration": {
            "name": "ifDefined",
            "package": "lit/directives/if-defined.js"
          }
        },
        {
          "kind": "js",
          "name": "repeat",
          "declaration": {
            "name": "repeat",
            "package": "lit/directives/repeat.js"
          }
        },
        {
          "kind": "js",
          "name": "styleMap",
          "declaration": {
            "name": "styleMap",
            "package": "lit/directives/style-map.js"
          }
        },
        {
          "kind": "js",
          "name": "unsafeHTML",
          "declaration": {
            "name": "unsafeHTML",
            "package": "lit/directives/unsafe-html.js"
          }
        },
        {
          "kind": "js",
          "name": "until",
          "declaration": {
            "name": "until",
            "package": "lit/directives/until.js"
          }
        },
        {
          "kind": "js",
          "name": "ScopedElementsMixin",
          "declaration": {
            "name": "ScopedElementsMixin",
            "package": "@open-wc/scoped-elements"
          }
        },
        {
          "kind": "js",
          "name": "dedupeMixin",
          "declaration": {
            "name": "dedupeMixin",
            "package": "@open-wc/dedupe-mixin"
          }
        },
        {
          "kind": "js",
          "name": "DelegateMixin",
          "declaration": {
            "name": "DelegateMixin",
            "module": "./src/DelegateMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "DisabledMixin",
          "declaration": {
            "name": "DisabledMixin",
            "module": "./src/DisabledMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "DisabledWithTabIndexMixin",
          "declaration": {
            "name": "DisabledWithTabIndexMixin",
            "module": "./src/DisabledWithTabIndexMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "SlotMixin",
          "declaration": {
            "name": "SlotMixin",
            "module": "./src/SlotMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "UpdateStylesMixin",
          "declaration": {
            "name": "UpdateStylesMixin",
            "module": "./src/UpdateStylesMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "browserDetection",
          "declaration": {
            "name": "browserDetection",
            "module": "./src/browserDetection.js"
          }
        },
        {
          "kind": "js",
          "name": "EventTargetShim",
          "declaration": {
            "name": "EventTargetShim",
            "module": "./src/EventTargetShim.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "html",
          "declaration": {
            "name": "html",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "CSSResult",
          "declaration": {
            "name": "CSSResult",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "adoptStyles",
          "declaration": {
            "name": "adoptStyles",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "css",
          "declaration": {
            "name": "css",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "getCompatibleStyle",
          "declaration": {
            "name": "getCompatibleStyle",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "supportsAdoptingStyleSheets",
          "declaration": {
            "name": "supportsAdoptingStyleSheets",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "unsafeCSS",
          "declaration": {
            "name": "unsafeCSS",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "UpdatingElement",
          "declaration": {
            "name": "UpdatingElement",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "notEqual",
          "declaration": {
            "name": "notEqual",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "ReactiveElement",
          "declaration": {
            "name": "ReactiveElement",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "svg",
          "declaration": {
            "name": "svg",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "noChange",
          "declaration": {
            "name": "noChange",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "nothing",
          "declaration": {
            "name": "nothing",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "render",
          "declaration": {
            "name": "render",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "LitElement",
          "declaration": {
            "name": "LitElement",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "defaultConverter",
          "declaration": {
            "name": "defaultConverter",
            "package": "lit"
          }
        },
        {
          "kind": "js",
          "name": "customElement",
          "declaration": {
            "name": "customElement",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "property",
          "declaration": {
            "name": "property",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "state",
          "declaration": {
            "name": "state",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "eventOptions",
          "declaration": {
            "name": "eventOptions",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "query",
          "declaration": {
            "name": "query",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "queryAll",
          "declaration": {
            "name": "queryAll",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "queryAsync",
          "declaration": {
            "name": "queryAsync",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "queryAssignedNodes",
          "declaration": {
            "name": "queryAssignedNodes",
            "package": "lit/decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "directive",
          "declaration": {
            "name": "directive",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "Directive",
          "declaration": {
            "name": "Directive",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "AsyncDirective",
          "declaration": {
            "name": "AsyncDirective",
            "package": "lit/async-directive.js"
          }
        },
        {
          "kind": "js",
          "name": "isPrimitive",
          "declaration": {
            "name": "isPrimitive",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "TemplateResultType",
          "declaration": {
            "name": "TemplateResultType",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "isTemplateResult",
          "declaration": {
            "name": "isTemplateResult",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "isDirectiveResult",
          "declaration": {
            "name": "isDirectiveResult",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "getDirectiveClass",
          "declaration": {
            "name": "getDirectiveClass",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "isSingleExpression",
          "declaration": {
            "name": "isSingleExpression",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "insertPart",
          "declaration": {
            "name": "insertPart",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "setChildPartValue",
          "declaration": {
            "name": "setChildPartValue",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "setCommittedValue",
          "declaration": {
            "name": "setCommittedValue",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "getCommittedValue",
          "declaration": {
            "name": "getCommittedValue",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "removePart",
          "declaration": {
            "name": "removePart",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "clearPart",
          "declaration": {
            "name": "clearPart",
            "package": "lit/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "asyncAppend",
          "declaration": {
            "name": "asyncAppend",
            "package": "lit/directives/async-append.js"
          }
        },
        {
          "kind": "js",
          "name": "asyncReplace",
          "declaration": {
            "name": "asyncReplace",
            "package": "lit/directives/async-replace.js"
          }
        },
        {
          "kind": "js",
          "name": "cache",
          "declaration": {
            "name": "cache",
            "package": "lit/directives/cache.js"
          }
        },
        {
          "kind": "js",
          "name": "classMap",
          "declaration": {
            "name": "classMap",
            "package": "lit/directives/class-map.js"
          }
        },
        {
          "kind": "js",
          "name": "guard",
          "declaration": {
            "name": "guard",
            "package": "lit/directives/guard.js"
          }
        },
        {
          "kind": "js",
          "name": "ifDefined",
          "declaration": {
            "name": "ifDefined",
            "package": "lit/directives/if-defined.js"
          }
        },
        {
          "kind": "js",
          "name": "repeat",
          "declaration": {
            "name": "repeat",
            "package": "lit/directives/repeat.js"
          }
        },
        {
          "kind": "js",
          "name": "styleMap",
          "declaration": {
            "name": "styleMap",
            "package": "lit/directives/style-map.js"
          }
        },
        {
          "kind": "js",
          "name": "unsafeHTML",
          "declaration": {
            "name": "unsafeHTML",
            "package": "lit/directives/unsafe-html.js"
          }
        },
        {
          "kind": "js",
          "name": "until",
          "declaration": {
            "name": "until",
            "package": "lit/directives/until.js"
          }
        },
        {
          "kind": "js",
          "name": "ScopedElementsMixin",
          "declaration": {
            "name": "ScopedElementsMixin",
            "package": "@open-wc/scoped-elements"
          }
        },
        {
          "kind": "js",
          "name": "dedupeMixin",
          "declaration": {
            "name": "dedupeMixin",
            "package": "@open-wc/dedupe-mixin"
          }
        },
        {
          "kind": "js",
          "name": "DelegateMixin",
          "declaration": {
            "name": "DelegateMixin",
            "module": "./src/DelegateMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "DisabledMixin",
          "declaration": {
            "name": "DisabledMixin",
            "module": "./src/DisabledMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "DisabledWithTabIndexMixin",
          "declaration": {
            "name": "DisabledWithTabIndexMixin",
            "module": "./src/DisabledWithTabIndexMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "SlotMixin",
          "declaration": {
            "name": "SlotMixin",
            "module": "./src/SlotMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "UpdateStylesMixin",
          "declaration": {
            "name": "UpdateStylesMixin",
            "module": "./src/UpdateStylesMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "browserDetection",
          "declaration": {
            "name": "browserDetection",
            "module": "./src/browserDetection.js"
          }
        },
        {
          "kind": "js",
          "name": "EventTargetShim",
          "declaration": {
            "name": "EventTargetShim",
            "module": "./src/EventTargetShim.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/define.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/define.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "FocusMixin",
          "declaration": {
            "name": "FocusMixin",
            "module": "\"./src/FocusMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "FormatMixin",
          "declaration": {
            "name": "FormatMixin",
            "module": "\"./src/FormatMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "FormControlMixin",
          "declaration": {
            "name": "FormControlMixin",
            "module": "\"./src/FormControlMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "InteractionStateMixin",
          "declaration": {
            "name": "InteractionStateMixin",
            "module": "\"./src/InteractionStateMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "LionField",
          "declaration": {
            "name": "LionField",
            "module": "\"./src/LionField.js\""
          }
        },
        {
          "kind": "js",
          "name": "FormRegisteringMixin",
          "declaration": {
            "name": "FormRegisteringMixin",
            "module": "\"./src/registration/FormRegisteringMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "FormRegistrarMixin",
          "declaration": {
            "name": "FormRegistrarMixin",
            "module": "\"./src/registration/FormRegistrarMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "FormRegistrarPortalMixin",
          "declaration": {
            "name": "FormRegistrarPortalMixin",
            "module": "\"./src/registration/FormRegistrarPortalMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "NativeTextFieldMixin",
          "declaration": {
            "name": "NativeTextFieldMixin",
            "module": "\"./src/NativeTextFieldMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "FormControlsCollection",
          "declaration": {
            "name": "FormControlsCollection",
            "module": "\"./src/registration/FormControlsCollection.js\""
          }
        },
        {
          "kind": "js",
          "name": "ValidateMixin",
          "declaration": {
            "name": "ValidateMixin",
            "module": "\"./src/validate/ValidateMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "Unparseable",
          "declaration": {
            "name": "Unparseable",
            "module": "\"./src/validate/Unparseable.js\""
          }
        },
        {
          "kind": "js",
          "name": "Validator",
          "declaration": {
            "name": "Validator",
            "module": "\"./src/validate/Validator.js\""
          }
        },
        {
          "kind": "js",
          "name": "ResultValidator",
          "declaration": {
            "name": "ResultValidator",
            "module": "\"./src/validate/ResultValidator.js\""
          }
        },
        {
          "kind": "js",
          "name": "Required",
          "declaration": {
            "name": "Required",
            "module": "\"./src/validate/validators/Required.js\""
          }
        },
        {
          "kind": "js",
          "name": "DefaultSuccess",
          "declaration": {
            "name": "DefaultSuccess",
            "module": "\"./src/validate/resultValidators/DefaultSuccess.js\""
          }
        },
        {
          "kind": "js",
          "name": "LionValidationFeedback",
          "declaration": {
            "name": "LionValidationFeedback",
            "module": "\"./src/validate/LionValidationFeedback.js\""
          }
        },
        {
          "kind": "js",
          "name": "ChoiceGroupMixin",
          "declaration": {
            "name": "ChoiceGroupMixin",
            "module": "\"./src/choice-group/ChoiceGroupMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "ChoiceInputMixin",
          "declaration": {
            "name": "ChoiceInputMixin",
            "module": "\"./src/choice-group/ChoiceInputMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "FormGroupMixin",
          "declaration": {
            "name": "FormGroupMixin",
            "module": "\"./src/form-group/FormGroupMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "IsString",
          "declaration": {
            "name": "IsString",
            "module": "\"./src/validate/validators/StringValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "EqualsLength",
          "declaration": {
            "name": "EqualsLength",
            "module": "\"./src/validate/validators/StringValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "MinLength",
          "declaration": {
            "name": "MinLength",
            "module": "\"./src/validate/validators/StringValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "MaxLength",
          "declaration": {
            "name": "MaxLength",
            "module": "\"./src/validate/validators/StringValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "MinMaxLength",
          "declaration": {
            "name": "MinMaxLength",
            "module": "\"./src/validate/validators/StringValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "IsEmail",
          "declaration": {
            "name": "IsEmail",
            "module": "\"./src/validate/validators/StringValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "Pattern",
          "declaration": {
            "name": "Pattern",
            "module": "\"./src/validate/validators/StringValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "IsNumber",
          "declaration": {
            "name": "IsNumber",
            "module": "\"./src/validate/validators/NumberValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "MinNumber",
          "declaration": {
            "name": "MinNumber",
            "module": "\"./src/validate/validators/NumberValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "MaxNumber",
          "declaration": {
            "name": "MaxNumber",
            "module": "\"./src/validate/validators/NumberValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "MinMaxNumber",
          "declaration": {
            "name": "MinMaxNumber",
            "module": "\"./src/validate/validators/NumberValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "IsDate",
          "declaration": {
            "name": "IsDate",
            "module": "\"./src/validate/validators/DateValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "MinDate",
          "declaration": {
            "name": "MinDate",
            "module": "\"./src/validate/validators/DateValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "MaxDate",
          "declaration": {
            "name": "MaxDate",
            "module": "\"./src/validate/validators/DateValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "MinMaxDate",
          "declaration": {
            "name": "MinMaxDate",
            "module": "\"./src/validate/validators/DateValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "IsDateDisabled",
          "declaration": {
            "name": "IsDateDisabled",
            "module": "\"./src/validate/validators/DateValidators.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "FocusMixin",
          "declaration": {
            "name": "FocusMixin",
            "module": "./src/FocusMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "FormatMixin",
          "declaration": {
            "name": "FormatMixin",
            "module": "./src/FormatMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "FormControlMixin",
          "declaration": {
            "name": "FormControlMixin",
            "module": "./src/FormControlMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "InteractionStateMixin",
          "declaration": {
            "name": "InteractionStateMixin",
            "module": "./src/InteractionStateMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "LionField",
          "declaration": {
            "name": "LionField",
            "module": "./src/LionField.js"
          }
        },
        {
          "kind": "js",
          "name": "FormRegisteringMixin",
          "declaration": {
            "name": "FormRegisteringMixin",
            "module": "./src/registration/FormRegisteringMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "FormRegistrarMixin",
          "declaration": {
            "name": "FormRegistrarMixin",
            "module": "./src/registration/FormRegistrarMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "FormRegistrarPortalMixin",
          "declaration": {
            "name": "FormRegistrarPortalMixin",
            "module": "./src/registration/FormRegistrarPortalMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "NativeTextFieldMixin",
          "declaration": {
            "name": "NativeTextFieldMixin",
            "module": "./src/NativeTextFieldMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "FormControlsCollection",
          "declaration": {
            "name": "FormControlsCollection",
            "module": "./src/registration/FormControlsCollection.js"
          }
        },
        {
          "kind": "js",
          "name": "ValidateMixin",
          "declaration": {
            "name": "ValidateMixin",
            "module": "./src/validate/ValidateMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "Unparseable",
          "declaration": {
            "name": "Unparseable",
            "module": "./src/validate/Unparseable.js"
          }
        },
        {
          "kind": "js",
          "name": "Validator",
          "declaration": {
            "name": "Validator",
            "module": "./src/validate/Validator.js"
          }
        },
        {
          "kind": "js",
          "name": "ResultValidator",
          "declaration": {
            "name": "ResultValidator",
            "module": "./src/validate/ResultValidator.js"
          }
        },
        {
          "kind": "js",
          "name": "Required",
          "declaration": {
            "name": "Required",
            "module": "./src/validate/validators/Required.js"
          }
        },
        {
          "kind": "js",
          "name": "IsString",
          "declaration": {
            "name": "IsString",
            "module": "./src/validate/validators/StringValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "EqualsLength",
          "declaration": {
            "name": "EqualsLength",
            "module": "./src/validate/validators/StringValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MinLength",
          "declaration": {
            "name": "MinLength",
            "module": "./src/validate/validators/StringValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MaxLength",
          "declaration": {
            "name": "MaxLength",
            "module": "./src/validate/validators/StringValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MinMaxLength",
          "declaration": {
            "name": "MinMaxLength",
            "module": "./src/validate/validators/StringValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "IsEmail",
          "declaration": {
            "name": "IsEmail",
            "module": "./src/validate/validators/StringValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "Pattern",
          "declaration": {
            "name": "Pattern",
            "module": "./src/validate/validators/StringValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "IsNumber",
          "declaration": {
            "name": "IsNumber",
            "module": "./src/validate/validators/NumberValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MinNumber",
          "declaration": {
            "name": "MinNumber",
            "module": "./src/validate/validators/NumberValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MaxNumber",
          "declaration": {
            "name": "MaxNumber",
            "module": "./src/validate/validators/NumberValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MinMaxNumber",
          "declaration": {
            "name": "MinMaxNumber",
            "module": "./src/validate/validators/NumberValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "IsDate",
          "declaration": {
            "name": "IsDate",
            "module": "./src/validate/validators/DateValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MinDate",
          "declaration": {
            "name": "MinDate",
            "module": "./src/validate/validators/DateValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MaxDate",
          "declaration": {
            "name": "MaxDate",
            "module": "./src/validate/validators/DateValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MinMaxDate",
          "declaration": {
            "name": "MinMaxDate",
            "module": "./src/validate/validators/DateValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "IsDateDisabled",
          "declaration": {
            "name": "IsDateDisabled",
            "module": "./src/validate/validators/DateValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "DefaultSuccess",
          "declaration": {
            "name": "DefaultSuccess",
            "module": "./src/validate/resultValidators/DefaultSuccess.js"
          }
        },
        {
          "kind": "js",
          "name": "LionValidationFeedback",
          "declaration": {
            "name": "LionValidationFeedback",
            "module": "./src/validate/LionValidationFeedback.js"
          }
        },
        {
          "kind": "js",
          "name": "ChoiceGroupMixin",
          "declaration": {
            "name": "ChoiceGroupMixin",
            "module": "./src/choice-group/ChoiceGroupMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "ChoiceInputMixin",
          "declaration": {
            "name": "ChoiceInputMixin",
            "module": "./src/choice-group/ChoiceInputMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "FormGroupMixin",
          "declaration": {
            "name": "FormGroupMixin",
            "module": "./src/form-group/FormGroupMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/lion-field.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/lion-field.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "lion-field",
          "declaration": {
            "name": "LionField",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/LionField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/lion-validation-feedback.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/lion-validation-feedback.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "lion-validation-feedback",
          "declaration": {
            "name": "LionValidationFeedback",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/LionValidationFeedback.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/define.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/define.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "renderLitAsNode",
          "declaration": {
            "name": "renderLitAsNode",
            "module": "\"./renderLitAsNode/src/renderLitAsNode.js\""
          }
        },
        {
          "kind": "js",
          "name": "sortEachDepth",
          "declaration": {
            "name": "sortEachDepth",
            "module": "\"./sortEachDepth/src/sortEachDepth.js\""
          }
        },
        {
          "kind": "js",
          "name": "SbActionLogger",
          "declaration": {
            "name": "SbActionLogger",
            "module": "\"./sb-action-logger/src/SbActionLogger.js\""
          }
        },
        {
          "kind": "js",
          "name": "SbLocaleSwitcher",
          "declaration": {
            "name": "SbLocaleSwitcher",
            "module": "\"./sb-locale-switcher/src/SbLocaleSwitcher.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "renderLitAsNode",
          "declaration": {
            "name": "renderLitAsNode",
            "module": "./renderLitAsNode/src/renderLitAsNode.js"
          }
        },
        {
          "kind": "js",
          "name": "sortEachDepth",
          "declaration": {
            "name": "sortEachDepth",
            "module": "./sortEachDepth/src/sortEachDepth.js"
          }
        },
        {
          "kind": "js",
          "name": "SbActionLogger",
          "declaration": {
            "name": "SbActionLogger",
            "module": "./sb-action-logger/src/SbActionLogger.js"
          }
        },
        {
          "kind": "js",
          "name": "SbLocaleSwitcher",
          "declaration": {
            "name": "SbLocaleSwitcher",
            "module": "./sb-locale-switcher/src/SbLocaleSwitcher.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/sb-action-logger.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/sb-action-logger.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sb-action-logger",
          "declaration": {
            "name": "SbActionLogger",
            "module": "/packages/atom-listbox/node_modules/@lion/helpers/sb-action-logger/src/SbActionLogger.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/sb-locale-switcher.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/sb-locale-switcher.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sb-locale-switcher",
          "declaration": {
            "name": "SbLocaleSwitcher",
            "module": "/packages/atom-listbox/node_modules/@lion/helpers/sb-locale-switcher/src/SbLocaleSwitcher.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/define.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/define.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "LionListbox",
          "declaration": {
            "name": "LionListbox",
            "module": "\"./src/LionListbox.js\""
          }
        },
        {
          "kind": "js",
          "name": "ListboxMixin",
          "declaration": {
            "name": "ListboxMixin",
            "module": "\"./src/ListboxMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "LionOption",
          "declaration": {
            "name": "LionOption",
            "module": "\"./src/LionOption.js\""
          }
        },
        {
          "kind": "js",
          "name": "LionOptions",
          "declaration": {
            "name": "LionOptions",
            "module": "\"./src/LionOptions.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "LionListbox",
          "declaration": {
            "name": "LionListbox",
            "module": "./src/LionListbox.js"
          }
        },
        {
          "kind": "js",
          "name": "ListboxMixin",
          "declaration": {
            "name": "ListboxMixin",
            "module": "./src/ListboxMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "LionOption",
          "declaration": {
            "name": "LionOption",
            "module": "./src/LionOption.js"
          }
        },
        {
          "kind": "js",
          "name": "LionOptions",
          "declaration": {
            "name": "LionOptions",
            "module": "./src/LionOptions.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/lion-listbox.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/lion-listbox.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "lion-listbox",
          "declaration": {
            "name": "LionListbox",
            "module": "/packages/atom-listbox/node_modules/@lion/listbox/src/LionListbox.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/lion-option.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/lion-option.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "lion-option",
          "declaration": {
            "name": "LionOption",
            "module": "/packages/atom-listbox/node_modules/@lion/listbox/src/LionOption.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/lion-options.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/lion-options.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "lion-options",
          "declaration": {
            "name": "LionOptions",
            "module": "/packages/atom-listbox/node_modules/@lion/listbox/src/LionOptions.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "formatDate",
          "declaration": {
            "name": "formatDate",
            "module": "\"./src/date/formatDate.js\""
          }
        },
        {
          "kind": "js",
          "name": "getDateFormatBasedOnLocale",
          "declaration": {
            "name": "getDateFormatBasedOnLocale",
            "module": "\"./src/date/getDateFormatBasedOnLocale.js\""
          }
        },
        {
          "kind": "js",
          "name": "getMonthNames",
          "declaration": {
            "name": "getMonthNames",
            "module": "\"./src/date/getMonthNames.js\""
          }
        },
        {
          "kind": "js",
          "name": "getWeekdayNames",
          "declaration": {
            "name": "getWeekdayNames",
            "module": "\"./src/date/getWeekdayNames.js\""
          }
        },
        {
          "kind": "js",
          "name": "normalizeDateTime",
          "declaration": {
            "name": "normalizeDateTime",
            "module": "\"./src/date/normalizeDateTime.js\""
          }
        },
        {
          "kind": "js",
          "name": "parseDate",
          "declaration": {
            "name": "parseDate",
            "module": "\"./src/date/parseDate.js\""
          }
        },
        {
          "kind": "js",
          "name": "LocalizeManager",
          "declaration": {
            "name": "LocalizeManager",
            "module": "\"./src/LocalizeManager.js\""
          }
        },
        {
          "kind": "js",
          "name": "LocalizeMixin",
          "declaration": {
            "name": "LocalizeMixin",
            "module": "\"./src/LocalizeMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "formatNumber",
          "declaration": {
            "name": "formatNumber",
            "module": "\"./src/number/formatNumber.js\""
          }
        },
        {
          "kind": "js",
          "name": "formatNumberToParts",
          "declaration": {
            "name": "formatNumberToParts",
            "module": "\"./src/number/formatNumberToParts.js\""
          }
        },
        {
          "kind": "js",
          "name": "getCurrencyName",
          "declaration": {
            "name": "getCurrencyName",
            "module": "\"./src/number/getCurrencyName.js\""
          }
        },
        {
          "kind": "js",
          "name": "getDecimalSeparator",
          "declaration": {
            "name": "getDecimalSeparator",
            "module": "\"./src/number/getDecimalSeparator.js\""
          }
        },
        {
          "kind": "js",
          "name": "getFractionDigits",
          "declaration": {
            "name": "getFractionDigits",
            "module": "\"./src/number/getFractionDigits.js\""
          }
        },
        {
          "kind": "js",
          "name": "getGroupSeparator",
          "declaration": {
            "name": "getGroupSeparator",
            "module": "\"./src/number/getGroupSeparator.js\""
          }
        },
        {
          "kind": "js",
          "name": "normalizeCurrencyLabel",
          "declaration": {
            "name": "normalizeCurrencyLabel",
            "module": "\"./src/number/normalizeCurrencyLabel.js\""
          }
        },
        {
          "kind": "js",
          "name": "parseNumber",
          "declaration": {
            "name": "parseNumber",
            "module": "\"./src/number/parseNumber.js\""
          }
        },
        {
          "kind": "js",
          "name": "localize",
          "declaration": {
            "name": "localize",
            "module": "\"./src/localize.js\""
          }
        },
        {
          "kind": "js",
          "name": "setLocalize",
          "declaration": {
            "name": "setLocalize",
            "module": "\"./src/localize.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "formatDate",
          "declaration": {
            "name": "formatDate",
            "module": "./src/date/formatDate.js"
          }
        },
        {
          "kind": "js",
          "name": "getDateFormatBasedOnLocale",
          "declaration": {
            "name": "getDateFormatBasedOnLocale",
            "module": "./src/date/getDateFormatBasedOnLocale.js"
          }
        },
        {
          "kind": "js",
          "name": "getMonthNames",
          "declaration": {
            "name": "getMonthNames",
            "module": "./src/date/getMonthNames.js"
          }
        },
        {
          "kind": "js",
          "name": "getWeekdayNames",
          "declaration": {
            "name": "getWeekdayNames",
            "module": "./src/date/getWeekdayNames.js"
          }
        },
        {
          "kind": "js",
          "name": "normalizeDateTime",
          "declaration": {
            "name": "normalizeDateTime",
            "module": "./src/date/normalizeDateTime.js"
          }
        },
        {
          "kind": "js",
          "name": "parseDate",
          "declaration": {
            "name": "parseDate",
            "module": "./src/date/parseDate.js"
          }
        },
        {
          "kind": "js",
          "name": "localize",
          "declaration": {
            "name": "localize",
            "module": "./src/localize.js"
          }
        },
        {
          "kind": "js",
          "name": "setLocalize",
          "declaration": {
            "name": "setLocalize",
            "module": "./src/localize.js"
          }
        },
        {
          "kind": "js",
          "name": "LocalizeManager",
          "declaration": {
            "name": "LocalizeManager",
            "module": "./src/LocalizeManager.js"
          }
        },
        {
          "kind": "js",
          "name": "LocalizeMixin",
          "declaration": {
            "name": "LocalizeMixin",
            "module": "./src/LocalizeMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "formatNumber",
          "declaration": {
            "name": "formatNumber",
            "module": "./src/number/formatNumber.js"
          }
        },
        {
          "kind": "js",
          "name": "formatNumberToParts",
          "declaration": {
            "name": "formatNumberToParts",
            "module": "./src/number/formatNumberToParts.js"
          }
        },
        {
          "kind": "js",
          "name": "getCurrencyName",
          "declaration": {
            "name": "getCurrencyName",
            "module": "./src/number/getCurrencyName.js"
          }
        },
        {
          "kind": "js",
          "name": "getDecimalSeparator",
          "declaration": {
            "name": "getDecimalSeparator",
            "module": "./src/number/getDecimalSeparator.js"
          }
        },
        {
          "kind": "js",
          "name": "getFractionDigits",
          "declaration": {
            "name": "getFractionDigits",
            "module": "./src/number/getFractionDigits.js"
          }
        },
        {
          "kind": "js",
          "name": "getGroupSeparator",
          "declaration": {
            "name": "getGroupSeparator",
            "module": "./src/number/getGroupSeparator.js"
          }
        },
        {
          "kind": "js",
          "name": "normalizeCurrencyLabel",
          "declaration": {
            "name": "normalizeCurrencyLabel",
            "module": "./src/number/normalizeCurrencyLabel.js"
          }
        },
        {
          "kind": "js",
          "name": "parseNumber",
          "declaration": {
            "name": "parseNumber",
            "module": "./src/number/parseNumber.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/css-tag.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "supportsAdoptingStyleSheets",
          "type": {
            "text": "boolean"
          },
          "description": "Whether the current browser supports `adoptedStyleSheets`."
        },
        {
          "kind": "class",
          "description": "A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n\nCSSResult is the return value of `css`-tagged template literals and\n`unsafeCSS()`. In order to ensure that CSSResults are only created via the\n`css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.",
          "name": "CSSResult",
          "members": [
            {
              "kind": "field",
              "name": "['_$cssResult$']",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "cssText",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "styleSheet",
              "type": {
                "text": "CSSStyleSheet | undefined"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "unsafeCSS",
          "type": {
            "text": "(value: unknown) => CSSResult"
          },
          "description": "Wrap a value for interpolation in a [[`css`]] tagged template literal.\n\nThis is unsafe because untrusted CSS text can be used to phone home\nor exfiltrate data to an attacker controlled site. Take care to only use\nthis with trusted input."
        },
        {
          "kind": "variable",
          "name": "css",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: (CSSResultGroup | number)[]) => CSSResult"
          },
          "description": "A template literal tag which can be used with LitElement's\n[[LitElement.styles | `styles`]] property to set element styles.\n\nFor security reasons, only literal string values and number may be used in\nembedded expressions. To incorporate non-literal values [[`unsafeCSS`]] may\nbe used inside an expression."
        },
        {
          "kind": "variable",
          "name": "adoptStyles",
          "type": {
            "text": "(renderRoot: ShadowRoot, styles: Array<CSSResultOrNative>) => void"
          },
          "description": "Applies the given styles to a `shadowRoot`. When Shadow DOM is\navailable but `adoptedStyleSheets` is not, styles are appended to the\n`shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\nNote, when shimming is used, any styles that are subsequently placed into\nthe shadowRoot should be placed *before* any shimmed adopted styles. This\nwill match spec behavior that gives adopted sheets precedence over styles in\nshadowRoot."
        },
        {
          "kind": "variable",
          "name": "getCompatibleStyle",
          "type": {
            "text": "(s: CSSResultOrNative) => CSSResultOrNative"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "supportsAdoptingStyleSheets",
          "declaration": {
            "name": "supportsAdoptingStyleSheets",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "CSSResult",
          "declaration": {
            "name": "CSSResult",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "unsafeCSS",
          "declaration": {
            "name": "unsafeCSS",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "css",
          "declaration": {
            "name": "css",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "adoptStyles",
          "declaration": {
            "name": "adoptStyles",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getCompatibleStyle",
          "declaration": {
            "name": "getCompatibleStyle",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/css-tag.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/css-tag.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "t"
        },
        {
          "kind": "class",
          "description": "",
          "name": "s",
          "members": [
            {
              "kind": "field",
              "name": "styleSheet"
            },
            {
              "kind": "method",
              "name": "toString"
            },
            {
              "kind": "field",
              "name": "cssText",
              "default": "t"
            }
          ]
        },
        {
          "kind": "function",
          "name": "o",
          "parameters": [
            {
              "name": "t"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "r",
          "default": "(t,...n)=>{const o=1===t.length?t[0]:n.reduce(((e,n,s)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if(\"number\"==typeof t)return t;throw Error(\"Value passed to 'css' function must be a 'css' function result: \"+t+\". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\")})(n)+t[s+1]),t[0]);return new s(o,e)}"
        },
        {
          "kind": "variable",
          "name": "i",
          "default": "(e,n)=>{t?e.adoptedStyleSheets=n.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):n.forEach((t=>{const n=document.createElement(\"style\"),s=window.litNonce;void 0!==s&&n.setAttribute(\"nonce\",s),n.textContent=t.cssText,e.appendChild(n)}))}"
        },
        {
          "kind": "variable",
          "name": "S"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CSSResult",
          "declaration": {
            "name": "s",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/css-tag.js"
          }
        },
        {
          "kind": "js",
          "name": "adoptStyles",
          "declaration": {
            "name": "i",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/css-tag.js"
          }
        },
        {
          "kind": "js",
          "name": "css",
          "declaration": {
            "name": "r",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/css-tag.js"
          }
        },
        {
          "kind": "js",
          "name": "getCompatibleStyle",
          "declaration": {
            "name": "S",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/css-tag.js"
          }
        },
        {
          "kind": "js",
          "name": "supportsAdoptingStyleSheets",
          "declaration": {
            "name": "t",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/css-tag.js"
          }
        },
        {
          "kind": "js",
          "name": "unsafeCSS",
          "declaration": {
            "name": "o",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/css-tag.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/base.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/custom-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/property.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/state.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/event-options.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-all.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-async.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "decorateProperty",
          "declaration": {
            "name": "decorateProperty",
            "module": "\"./decorators/base.js\""
          }
        },
        {
          "kind": "js",
          "name": "legacyPrototypeMethod",
          "declaration": {
            "name": "legacyPrototypeMethod",
            "module": "\"./decorators/base.js\""
          }
        },
        {
          "kind": "js",
          "name": "standardPrototypeMethod",
          "declaration": {
            "name": "standardPrototypeMethod",
            "module": "\"./decorators/base.js\""
          }
        },
        {
          "kind": "js",
          "name": "customElement",
          "declaration": {
            "name": "customElement",
            "module": "\"./decorators/custom-element.js\""
          }
        },
        {
          "kind": "js",
          "name": "property",
          "declaration": {
            "name": "property",
            "module": "\"./decorators/property.js\""
          }
        },
        {
          "kind": "js",
          "name": "state",
          "declaration": {
            "name": "state",
            "module": "\"./decorators/state.js\""
          }
        },
        {
          "kind": "js",
          "name": "eventOptions",
          "declaration": {
            "name": "eventOptions",
            "module": "\"./decorators/event-options.js\""
          }
        },
        {
          "kind": "js",
          "name": "query",
          "declaration": {
            "name": "query",
            "module": "\"./decorators/query.js\""
          }
        },
        {
          "kind": "js",
          "name": "queryAll",
          "declaration": {
            "name": "queryAll",
            "module": "\"./decorators/query-all.js\""
          }
        },
        {
          "kind": "js",
          "name": "queryAsync",
          "declaration": {
            "name": "queryAsync",
            "module": "\"./decorators/query-async.js\""
          }
        },
        {
          "kind": "js",
          "name": "queryAssignedNodes",
          "declaration": {
            "name": "queryAssignedNodes",
            "module": "\"./decorators/query-assigned-nodes.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/polyfill-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/polyfill-support.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/reactive-controller.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/reactive-controller.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/reactive-element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultConverter",
          "type": {
            "text": "ComplexAttributeConverter"
          }
        },
        {
          "kind": "variable",
          "name": "notEqual",
          "type": {
            "text": "HasChanged"
          },
          "description": "Change function that returns true if `value` is different from `oldValue`.\nThis method is used as the default for a property's `hasChanged` function."
        },
        {
          "kind": "class",
          "description": "Base element class which manages element properties and attributes. When\nproperties change, the `update` method is asynchronously called. This method\nshould be supplied by subclassers to render updates as desired.",
          "name": "ReactiveElement",
          "members": [
            {
              "kind": "field",
              "name": "enabledWarnings",
              "type": {
                "text": "WarningKind[] | undefined"
              },
              "static": true,
              "description": "Read or set all the enabled warning categories for this class.\n\nThis property is only used in development builds."
            },
            {
              "kind": "field",
              "name": "enableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Enable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Enable for all ReactiveElement subclasses\nReactiveElement.enableWarning.?('migration');\n\n// Enable for only MyElement and subclasses\nMyElement.enableWarning.?('migration');\n```"
            },
            {
              "kind": "field",
              "name": "disableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Disable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Disable for all ReactiveElement subclasses\nReactiveElement.disableWarning.?('migration');\n\n// Disable for only MyElement and subclasses\nMyElement.disableWarning.?('migration');\n```"
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "initializer",
                  "type": {
                    "text": "Initializer"
                  }
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {"
            },
            {
              "kind": "field",
              "name": "_initializers",
              "type": {
                "text": "Initializer[] | undefined"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "__attributeToPropertyMap",
              "privacy": "private",
              "static": true,
              "description": "Maps attribute names to properties; for example `foobar` attribute to\n`fooBar` property. Created lazily on user subclasses when finalizing the\nclass."
            },
            {
              "kind": "field",
              "name": "[finalized]",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Marks class as having finished creating properties."
            },
            {
              "kind": "field",
              "name": "elementProperties",
              "type": {
                "text": "PropertyDeclarationMap"
              },
              "static": true,
              "description": "Memoized list of all element properties, including any superclass properties.\nCreated lazily on user subclasses when finalizing the class."
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "type": {
                "text": "Array<CSSResultOrNative>"
              },
              "static": true,
              "description": "Memoized list of all element styles.\nCreated lazily on user subclasses when finalizing the class."
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```"
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "{\n        get(): any;\n        set(this: ReactiveElement, value: unknown): void;\n        configurable: boolean;\n        enumerable: boolean;\n    }"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```"
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDeclaration<unknown, unknown>"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]]."
            },
            {
              "kind": "method",
              "name": "finalize",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized."
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "description": "Options used when calling `attachShadow`. Set this property to customize\nthe options for the shadowRoot; for example, to create a closed\nshadowRoot: `{mode: 'closed'}`.\n\nNote, these options are used in `createRenderRoot`. If this method\nis customized, options should be respected if possible."
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "Array<CSSResultOrNative>"
                }
              },
              "parameters": [
                {
                  "name": "styles",
                  "optional": true,
                  "type": {
                    "text": "CSSResultGroup"
                  }
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles."
            },
            {
              "kind": "field",
              "name": "renderRoot",
              "type": {
                "text": "HTMLElement | ShadowRoot"
              },
              "description": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot."
            },
            {
              "kind": "field",
              "name": "__attributeNameForProperty",
              "privacy": "private",
              "static": true,
              "description": "Returns the property name for the given attribute `name`."
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__updatePromise",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read."
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`."
            },
            {
              "kind": "field",
              "name": "__reflectingProperties",
              "privacy": "private",
              "description": "Map with keys of properties that should be reflected when updated."
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "privacy": "private",
              "description": "Name of currently reflecting property"
            },
            {
              "kind": "field",
              "name": "__controllers",
              "privacy": "private",
              "description": "Set of controllers."
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called."
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Removes a `ReactiveController` from the element."
            },
            {
              "kind": "field",
              "name": "__saveInstanceProperties",
              "privacy": "private",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default)."
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`."
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_requestedUpdate",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate."
            },
            {
              "kind": "field",
              "name": "__propertyToAttribute",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__enqueueUpdate",
              "privacy": "private",
              "description": "Sets up the element to asynchronously update."
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void | Promise<unknown>"
                }
              },
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```"
            },
            {
              "kind": "field",
              "name": "__markUpdated",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./css-tag.js"
          }
        },
        {
          "kind": "js",
          "name": "ReactiveController",
          "declaration": {
            "name": "ReactiveController",
            "module": "./reactive-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "ReactiveControllerHost",
          "declaration": {
            "name": "ReactiveControllerHost",
            "module": "./reactive-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "defaultConverter",
          "declaration": {
            "name": "defaultConverter",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/reactive-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "notEqual",
          "declaration": {
            "name": "notEqual",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/reactive-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ReactiveElement",
          "declaration": {
            "name": "ReactiveElement",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/reactive-element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/reactive-element.js",
      "declarations": [
        {
          "kind": "function",
          "name": "h",
          "parameters": [
            {
              "name": "t"
            },
            {
              "name": "i"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "r",
          "type": {
            "text": "object"
          },
          "default": "{toAttribute(t,i){switch(i){case Boolean:t=t?\"\":null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,i){let s=t;switch(i){case Boolean:s=null!==t;break;case Number:s=null===t?null:Number(t);break;case Object:case Array:try{s=JSON.parse(t)}catch(t){s=null}}return s}}"
        },
        {
          "kind": "class",
          "description": "",
          "name": "n",
          "members": [
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "t"
                },
                {
                  "name": "i",
                  "default": "o"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "t"
                },
                {
                  "name": "i"
                },
                {
                  "name": "s"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "i"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$Eh",
              "static": true,
              "parameters": [
                {
                  "name": "t"
                },
                {
                  "name": "i"
                }
              ]
            },
            {
              "kind": "method",
              "name": "o"
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$Ep"
            },
            {
              "kind": "method",
              "name": "createRenderRoot"
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$Eg",
              "parameters": [
                {
                  "name": "t"
                },
                {
                  "name": "i"
                },
                {
                  "name": "s",
                  "default": "o"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$AK",
              "parameters": [
                {
                  "name": "t"
                },
                {
                  "name": "i"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$EC"
            },
            {
              "kind": "method",
              "name": "scheduleUpdate"
            },
            {
              "kind": "method",
              "name": "_$AE",
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$ET"
            },
            {
              "kind": "field",
              "name": "updateComplete"
            },
            {
              "kind": "method",
              "name": "getUpdateComplete"
            },
            {
              "kind": "field",
              "name": "_$Et",
              "default": "new Map"
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "default": "!1"
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "default": "!1"
            },
            {
              "kind": "field",
              "name": "_$Ei",
              "type": {
                "text": "null"
              },
              "default": "null"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CSSResult",
          "declaration": {
            "name": "CSSResult",
            "module": "\"./css-tag.js\""
          }
        },
        {
          "kind": "js",
          "name": "adoptStyles",
          "declaration": {
            "name": "adoptStyles",
            "module": "\"./css-tag.js\""
          }
        },
        {
          "kind": "js",
          "name": "css",
          "declaration": {
            "name": "css",
            "module": "\"./css-tag.js\""
          }
        },
        {
          "kind": "js",
          "name": "getCompatibleStyle",
          "declaration": {
            "name": "getCompatibleStyle",
            "module": "\"./css-tag.js\""
          }
        },
        {
          "kind": "js",
          "name": "supportsAdoptingStyleSheets",
          "declaration": {
            "name": "supportsAdoptingStyleSheets",
            "module": "\"./css-tag.js\""
          }
        },
        {
          "kind": "js",
          "name": "unsafeCSS",
          "declaration": {
            "name": "unsafeCSS",
            "module": "\"./css-tag.js\""
          }
        },
        {
          "kind": "js",
          "name": "ReactiveElement",
          "declaration": {
            "name": "n",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/reactive-element.js"
          }
        },
        {
          "kind": "js",
          "name": "defaultConverter",
          "declaration": {
            "name": "r",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/reactive-element.js"
          }
        },
        {
          "kind": "js",
          "name": "notEqual",
          "declaration": {
            "name": "h",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/reactive-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@open-wc/dedupe-mixin/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "dedupeMixin",
          "return": {
            "type": {
              "text": "T"
            }
          },
          "parameters": [
            {
              "name": "mixin",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dedupeMixin",
          "declaration": {
            "name": "dedupeMixin",
            "module": "packages/atom-listbox/node_modules/@open-wc/dedupe-mixin/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@open-wc/dedupe-mixin/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "dedupeMixin",
          "declaration": {
            "name": "dedupeMixin",
            "module": "./src/dedupeMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ScopedElementsMixin",
          "declaration": {
            "name": "ScopedElementsMixin",
            "module": "./src/ScopedElementsMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@types/trusted-types/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "TrustedTypePolicy",
          "type": {
            "text": "typeof lib.TrustedTypePolicy"
          }
        },
        {
          "kind": "variable",
          "name": "TrustedTypePolicyFactory",
          "type": {
            "text": "typeof lib.TrustedTypePolicyFactory"
          }
        },
        {
          "kind": "variable",
          "name": "trustedTypes",
          "type": {
            "text": "InternalTrustedTypePolicyFactory"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "TrustedTypesEnforcer",
          "members": [
            {
              "kind": "field",
              "name": "install",
              "type": {
                "text": "() => void"
              }
            },
            {
              "kind": "field",
              "name": "uninstall",
              "type": {
                "text": "() => void"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "TrustedTypeConfig"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "trustedTypes",
          "declaration": {
            "name": "trustedTypes",
            "module": "packages/atom-listbox/node_modules/@types/trusted-types/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TrustedTypesEnforcer",
          "declaration": {
            "name": "TrustedTypesEnforcer",
            "module": "packages/atom-listbox/node_modules/@types/trusted-types/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TrustedTypeConfig",
          "declaration": {
            "name": "TrustedTypeConfig",
            "module": "packages/atom-listbox/node_modules/@types/trusted-types/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TrustedTypePolicy",
          "declaration": {
            "name": "TrustedTypePolicy",
            "module": "packages/atom-listbox/node_modules/@types/trusted-types/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TrustedTypePolicyFactory",
          "declaration": {
            "name": "TrustedTypePolicyFactory",
            "module": "packages/atom-listbox/node_modules/@types/trusted-types/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@webcomponents/scoped-custom-element-registry/scoped-custom-element-registry.min.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/custom-element.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/custom-element.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/custom-element.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/event-options.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/event-options.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/event-options.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/property.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/property.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/property.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/query-all.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/query-all.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query-all.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/query-assigned-nodes.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/query-assigned-nodes.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query-assigned-nodes.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/query-async.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/query-async.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query-async.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/query.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/query.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/state.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/decorators/state.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/state.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/async-append.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/async-append.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/async-append.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directives/async-append.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/async-replace.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/async-replace.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/async-replace.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directives/async-replace.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/cache.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/cache.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/cache.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directives/cache.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/class-map.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/class-map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/class-map.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directives/class-map.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/guard.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/guard.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/guard.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directives/guard.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/if-defined.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/if-defined.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/if-defined.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directives/if-defined.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/live.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/live.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/live.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directives/live.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/ref.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/ref.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/ref.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directives/ref.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/repeat.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/repeat.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/repeat.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directives/repeat.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/style-map.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/style-map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/style-map.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directives/style-map.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/template-content.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/template-content.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/template-content.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directives/template-content.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/unsafe-html.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/unsafe-html.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/unsafe-html.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directives/unsafe-html.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/unsafe-svg.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/unsafe-svg.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/unsafe-svg.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directives/unsafe-svg.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/until.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/until.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit/directives/until.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"lit-html/directives/until.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/custom-element.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/custom-element.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/custom-element.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/event-options.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/event-options.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/event-options.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/property.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/property.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/property.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/query-all.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/query-all.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query-all.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/query-assigned-nodes.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/query-assigned-nodes.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query-assigned-nodes.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/query-async.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/query-async.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query-async.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/query.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/query.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/query.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/state.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/decorators/state.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"@lit/reactive-element/decorators/state.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/base.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/base.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/experimental-hydrate-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/experimental-hydrate-support.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./lit-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./lit-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/lit-element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "UpdatingElement",
          "type": {
            "text": "typeof ReactiveElement"
          }
        },
        {
          "kind": "class",
          "description": "Base element class that manages element properties and attributes, and\nrenders a lit-html template.\n\nTo define a component, subclass `LitElement` and implement a\n`render` method to provide the component's template. Define properties\nusing the [[`properties`]] property or the [[`property`]] decorator.",
          "name": "LitElement",
          "members": [
            {
              "kind": "field",
              "name": "['finalized']",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Ensure this class is marked as `finalized` as an optimization ensuring\nit will not needlessly try to `finalize`.\n\nNote this property name is a string to prevent breaking Closure JS Compiler\noptimizations. See @lit/reactive-element for more information."
            },
            {
              "kind": "field",
              "name": "['_$litElement$']",
              "type": {
                "text": "boolean"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": "Element | ShadowRoot"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "superclass": {
            "name": "ReactiveElement",
            "package": "@lit/reactive-element"
          }
        },
        {
          "kind": "variable",
          "name": "_$LE",
          "type": {
            "text": "{\n    _$attributeToProperty: (el: LitElement, name: string, value: string | null) => void;\n    _$changedProperties: (el: LitElement) => any;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nPrivate exports for use by other Lit packages, not intended for use by\nexternal users.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports  mangled in the\nclient side code, we export a _$LE object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.\n\nThis has a unique name, to disambiguate it from private exports in\nlit-html, since this module re-exports all of lit-html.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html"
          }
        },
        {
          "kind": "js",
          "name": "UpdatingElement",
          "declaration": {
            "name": "UpdatingElement",
            "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "LitElement",
          "declaration": {
            "name": "LitElement",
            "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "_$LE",
          "declaration": {
            "name": "_$LE",
            "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "UpdatingElement",
          "default": "ReactiveElement"
        },
        {
          "kind": "class",
          "description": "Base element class that manages element properties and attributes, and\nrenders a lit-html template.\n\nTo define a component, subclass `LitElement` and implement a\n`render` method to provide the component's template. Define properties\nusing the [[`properties`]] property or the [[`property`]] decorator.",
          "name": "LitElement",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }"
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined"
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "superclass": {
            "name": "ReactiveElement",
            "package": "@lit/reactive-element"
          }
        },
        {
          "kind": "variable",
          "name": "_$LE",
          "type": {
            "text": "object"
          },
          "default": "{\n    _$attributeToProperty: (el, name, value) => {\n        // eslint-disable-next-line\n        el._$attributeToProperty(name, value);\n    },\n    // eslint-disable-next-line\n    _$changedProperties: (el) => el._$changedProperties,\n}",
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nPrivate exports for use by other Lit packages, not intended for use by\nexternal users.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports  mangled in the\nclient side code, we export a _$LE object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.\n\nThis has a unique name, to disambiguate it from private exports in\nlit-html, since this module re-exports all of lit-html.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html"
          }
        },
        {
          "kind": "js",
          "name": "UpdatingElement",
          "declaration": {
            "name": "UpdatingElement",
            "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
          }
        },
        {
          "kind": "js",
          "name": "LitElement",
          "declaration": {
            "name": "LitElement",
            "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
          }
        },
        {
          "kind": "js",
          "name": "_$LE",
          "declaration": {
            "name": "_$LE",
            "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/polyfill-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/polyfill-support.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/private-ssr-support.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "_$LE",
          "type": {
            "text": "{\n    attributeToProperty: (el: import(\"./lit-element.js\").LitElement, name: string, value: string | null) => void;\n    changedProperties: (el: import(\"./lit-element.js\").LitElement) => any;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports  mangled in the\nclient side code, we export a _$LE object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "_$LE",
          "declaration": {
            "name": "_$LE",
            "module": "packages/atom-listbox/node_modules/lit-element/development/private-ssr-support.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/private-ssr-support.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "_$LE",
          "type": {
            "text": "object"
          },
          "default": "{\n    attributeToProperty: p._$attributeToProperty,\n    changedProperties: p._$changedProperties,\n}",
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports  mangled in the\nclient side code, we export a _$LE object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "_$LE",
          "declaration": {
            "name": "_$LE",
            "module": "packages/atom-listbox/node_modules/lit-element/development/private-ssr-support.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/async-directive.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An abstract `Directive` base class whose `disconnected` method will be\ncalled when the part containing the directive is cleared as a result of\nre-rendering, or when the user calls `part.setConnected(false)` on\na part that was previously rendered containing the directive (as happens\nwhen e.g. a LitElement disconnects from the DOM).\n\nIf `part.setConnected(true)` is subsequently called on a\ncontaining part, the directive's `reconnected` method will be called prior\nto its next `update`/`render` callbacks. When implementing `disconnected`,\n`reconnected` should also be implemented to be compatible with reconnection.\n\nNote that updates may occur while the directive is disconnected. As such,\ndirectives should generally check the `this.isConnected` flag during\nrender/update to determine whether it is safe to subscribe to resources\nthat may prevent garbage collection.",
          "name": "AsyncDirective",
          "members": [
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive."
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields"
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`."
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render."
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/directive.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "directive",
          "declaration": {
            "name": "directive",
            "module": "./directive.js"
          }
        },
        {
          "kind": "js",
          "name": "AsyncDirective",
          "declaration": {
            "name": "AsyncDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js",
      "declarations": [
        {
          "kind": "class",
          "description": "An abstract `Directive` base class whose `disconnected` method will be\ncalled when the part containing the directive is cleared as a result of\nre-rendering, or when the user calls `part.setConnected(false)` on\na part that was previously rendered containing the directive (as happens\nwhen e.g. a LitElement disconnects from the DOM).\n\nIf `part.setConnected(true)` is subsequently called on a\ncontaining part, the directive's `reconnected` method will be called prior\nto its next `update`/`render` callbacks. When implementing `disconnected`,\n`reconnected` should also be implemented to be compatible with reconnection.\n\nNote that updates may occur while the directive is disconnected. As such,\ndirectives should generally check the `this.isConnected` flag during\nrender/update to determine whether it is safe to subscribe to resources\nthat may prevent garbage collection.",
          "name": "AsyncDirective",
          "members": [
            {
              "kind": "method",
              "name": "_$initialize",
              "parameters": [
                {
                  "name": "part"
                },
                {
                  "name": "parent"
                },
                {
                  "name": "attributeIndex"
                }
              ],
              "description": "Initialize the part with internal fields"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`."
            },
            {
              "kind": "method",
              "name": "disconnected",
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render."
            },
            {
              "kind": "method",
              "name": "reconnected"
            },
            {
              "kind": "field",
              "name": "_$disconnectableChildren",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/directive.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "directive",
          "declaration": {
            "name": "directive",
            "module": "./directive.js"
          }
        },
        {
          "kind": "js",
          "name": "AsyncDirective",
          "declaration": {
            "name": "AsyncDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "isPrimitive",
          "type": {
            "text": "(value: unknown) => value is Primitive"
          },
          "description": "Tests if a value is a primitive value.\n\nSee https://tc39.github.io/ecma262/#sec-typeof-operator"
        },
        {
          "kind": "variable",
          "name": "TemplateResultType",
          "type": {
            "text": "{\n    readonly HTML: 1;\n    readonly SVG: 2;\n}"
          }
        },
        {
          "kind": "variable",
          "name": "isTemplateResult",
          "type": {
            "text": "(value: unknown, type?: TemplateResultType | undefined) => value is TemplateResult<1 | 2>"
          },
          "description": "Tests if a value is a TemplateResult."
        },
        {
          "kind": "variable",
          "name": "isDirectiveResult",
          "type": {
            "text": "(value: unknown) => value is DirectiveResult<DirectiveClass>"
          },
          "description": "Tests if a value is a DirectiveResult."
        },
        {
          "kind": "variable",
          "name": "getDirectiveClass",
          "type": {
            "text": "(value: unknown) => DirectiveClass | undefined"
          },
          "description": "Retrieves the Directive class for a DirectiveResult"
        },
        {
          "kind": "variable",
          "name": "isSingleExpression",
          "type": {
            "text": "(part: PartInfo) => boolean"
          },
          "description": "Tests whether a part has only a single-expression with no strings to\ninterpolate between.\n\nOnly AttributePart and PropertyPart can have multiple expressions.\nMulti-expression parts have a `strings` property and single-expression\nparts do not."
        },
        {
          "kind": "variable",
          "name": "insertPart",
          "type": {
            "text": "(containerPart: import(\"./lit-html.js\").ChildPart, refPart?: import(\"./lit-html.js\").ChildPart | undefined, part?: import(\"./lit-html.js\").ChildPart | undefined) => import(\"./lit-html.js\").ChildPart"
          },
          "description": "Inserts a ChildPart into the given container ChildPart's DOM, either at the\nend of the container ChildPart, or before the optional `refPart`.\n\nThis does not add the part to the containerPart's committed value. That must\nbe done by callers.",
          "parameters": [
            {
              "description": "Part within which to add the new ChildPart",
              "name": "containerPart"
            },
            {
              "description": "Part before which to add the new ChildPart; when omitted the\npart added to the end of the `containerPart`",
              "name": "refPart"
            },
            {
              "description": "Part to insert, or undefined to create a new part",
              "name": "part"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "setChildPartValue",
          "type": {
            "text": "<T extends import(\"./lit-html.js\").ChildPart>(part: T, value: unknown, directiveParent?: DirectiveParent) => T"
          },
          "description": "Sets the value of a Part.\n\nNote that this should only be used to set/update the value of user-created\nparts (i.e. those created using `insertPart`); it should not be used\nby directives to set the value of the directive's container part. Directives\nshould return a value from `update`/`render` to update their part state.\n\nFor directives that require setting their part value asynchronously, they\nshould extend `AsyncDirective` and call `this.setValue()`.",
          "parameters": [
            {
              "description": "Part to set",
              "name": "part"
            },
            {
              "description": "Value to set",
              "name": "value"
            },
            {
              "description": "For `AttributePart`s, the index to set",
              "name": "index"
            },
            {
              "description": "Used internally; should not be set by user",
              "name": "directiveParent"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "setCommittedValue",
          "type": {
            "text": "(part: Part, value?: unknown) => unknown"
          },
          "description": "Sets the committed value of a ChildPart directly without triggering the\ncommit stage of the part.\n\nThis is useful in cases where a directive needs to update the part such\nthat the next update detects a value change or not. When value is omitted,\nthe next update will be guaranteed to be detected as a change.",
          "parameters": [
            {
              "name": "part"
            },
            {
              "name": "value"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "getCommittedValue",
          "type": {
            "text": "(part: import(\"./lit-html.js\").ChildPart) => unknown"
          },
          "description": "Returns the committed value of a ChildPart.\n\nThe committed value is used for change detection and efficient updates of\nthe part. It can differ from the value set by the template or directive in\ncases where the template value is transformed before being commited.\n\n- `TemplateResult`s are committed as a `TemplateInstance`\n- Iterables are committed as `Array<ChildPart>`\n- All other types are committed as the template value or value returned or\n  set by a directive.",
          "parameters": [
            {
              "name": "part"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "removePart",
          "type": {
            "text": "(part: import(\"./lit-html.js\").ChildPart) => void"
          },
          "description": "Removes a ChildPart from the DOM, including any of its content.",
          "parameters": [
            {
              "description": "The Part to remove",
              "name": "part"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "clearPart",
          "type": {
            "text": "(part: import(\"./lit-html.js\").ChildPart) => void"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isPrimitive",
          "declaration": {
            "name": "isPrimitive",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TemplateResultType",
          "declaration": {
            "name": "TemplateResultType",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isTemplateResult",
          "declaration": {
            "name": "isTemplateResult",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isDirectiveResult",
          "declaration": {
            "name": "isDirectiveResult",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getDirectiveClass",
          "declaration": {
            "name": "getDirectiveClass",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isSingleExpression",
          "declaration": {
            "name": "isSingleExpression",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "insertPart",
          "declaration": {
            "name": "insertPart",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "setChildPartValue",
          "declaration": {
            "name": "setChildPartValue",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "setCommittedValue",
          "declaration": {
            "name": "setCommittedValue",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getCommittedValue",
          "declaration": {
            "name": "getCommittedValue",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "removePart",
          "declaration": {
            "name": "removePart",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "clearPart",
          "declaration": {
            "name": "clearPart",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.js",
      "declarations": [
        {
          "kind": "function",
          "name": "isPrimitive",
          "parameters": [
            {
              "name": "value"
            }
          ],
          "description": "Tests if a value is a primitive value.\n\nSee https://tc39.github.io/ecma262/#sec-typeof-operator"
        },
        {
          "kind": "variable",
          "name": "TemplateResultType",
          "type": {
            "text": "object"
          },
          "default": "{\n    HTML: 1,\n    SVG: 2,\n}"
        },
        {
          "kind": "function",
          "name": "isTemplateResult",
          "parameters": [
            {
              "name": "value"
            },
            {
              "name": "type"
            }
          ],
          "description": "Tests if a value is a TemplateResult."
        },
        {
          "kind": "function",
          "name": "isDirectiveResult",
          "parameters": [
            {
              "name": "value"
            }
          ],
          "description": "Tests if a value is a DirectiveResult."
        },
        {
          "kind": "function",
          "name": "getDirectiveClass",
          "parameters": [
            {
              "name": "value"
            }
          ],
          "description": "Retrieves the Directive class for a DirectiveResult"
        },
        {
          "kind": "function",
          "name": "isSingleExpression",
          "parameters": [
            {
              "name": "part"
            }
          ],
          "description": "Tests whether a part has only a single-expression with no strings to\ninterpolate between.\n\nOnly AttributePart and PropertyPart can have multiple expressions.\nMulti-expression parts have a `strings` property and single-expression\nparts do not."
        },
        {
          "kind": "function",
          "name": "insertPart",
          "parameters": [
            {
              "name": "containerPart",
              "description": "Part within which to add the new ChildPart"
            },
            {
              "name": "refPart",
              "description": "Part before which to add the new ChildPart; when omitted the\npart added to the end of the `containerPart`"
            },
            {
              "name": "part",
              "description": "Part to insert, or undefined to create a new part"
            }
          ],
          "description": "Inserts a ChildPart into the given container ChildPart's DOM, either at the\nend of the container ChildPart, or before the optional `refPart`.\n\nThis does not add the part to the containerPart's committed value. That must\nbe done by callers."
        },
        {
          "kind": "function",
          "name": "setChildPartValue",
          "parameters": [
            {
              "name": "part",
              "description": "Part to set"
            },
            {
              "name": "value",
              "description": "Value to set"
            },
            {
              "name": "directiveParent",
              "default": "part",
              "description": "Used internally; should not be set by user"
            },
            {
              "description": "For `AttributePart`s, the index to set",
              "name": "index"
            }
          ],
          "description": "Sets the value of a Part.\n\nNote that this should only be used to set/update the value of user-created\nparts (i.e. those created using `insertPart`); it should not be used\nby directives to set the value of the directive's container part. Directives\nshould return a value from `update`/`render` to update their part state.\n\nFor directives that require setting their part value asynchronously, they\nshould extend `AsyncDirective` and call `this.setValue()`."
        },
        {
          "kind": "function",
          "name": "setCommittedValue",
          "parameters": [
            {
              "name": "part"
            },
            {
              "name": "value",
              "default": "RESET_VALUE"
            }
          ],
          "description": "Sets the committed value of a ChildPart directly without triggering the\ncommit stage of the part.\n\nThis is useful in cases where a directive needs to update the part such\nthat the next update detects a value change or not. When value is omitted,\nthe next update will be guaranteed to be detected as a change."
        },
        {
          "kind": "function",
          "name": "getCommittedValue",
          "parameters": [
            {
              "name": "part"
            }
          ],
          "description": "Returns the committed value of a ChildPart.\n\nThe committed value is used for change detection and efficient updates of\nthe part. It can differ from the value set by the template or directive in\ncases where the template value is transformed before being commited.\n\n- `TemplateResult`s are committed as a `TemplateInstance`\n- Iterables are committed as `Array<ChildPart>`\n- All other types are committed as the template value or value returned or\n  set by a directive."
        },
        {
          "kind": "function",
          "name": "removePart",
          "parameters": [
            {
              "name": "part",
              "description": "The Part to remove"
            }
          ],
          "description": "Removes a ChildPart from the DOM, including any of its content."
        },
        {
          "kind": "function",
          "name": "clearPart",
          "parameters": [
            {
              "name": "part"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isPrimitive",
          "declaration": {
            "name": "isPrimitive",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "TemplateResultType",
          "declaration": {
            "name": "TemplateResultType",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "isTemplateResult",
          "declaration": {
            "name": "isTemplateResult",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "isDirectiveResult",
          "declaration": {
            "name": "isDirectiveResult",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "getDirectiveClass",
          "declaration": {
            "name": "getDirectiveClass",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "isSingleExpression",
          "declaration": {
            "name": "isSingleExpression",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "insertPart",
          "declaration": {
            "name": "insertPart",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "setChildPartValue",
          "declaration": {
            "name": "setChildPartValue",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "setCommittedValue",
          "declaration": {
            "name": "setCommittedValue",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "getCommittedValue",
          "declaration": {
            "name": "getCommittedValue",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "removePart",
          "declaration": {
            "name": "removePart",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "clearPart",
          "declaration": {
            "name": "clearPart",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive-helpers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directive.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "PartType",
          "type": {
            "text": "{\n    readonly ATTRIBUTE: 1;\n    readonly CHILD: 2;\n    readonly PROPERTY: 3;\n    readonly BOOLEAN_ATTRIBUTE: 4;\n    readonly EVENT: 5;\n    readonly ELEMENT: 6;\n}"
          }
        },
        {
          "kind": "variable",
          "name": "directive",
          "type": {
            "text": "<C extends DirectiveClass>(c: C) => (...values: Parameters<InstanceType<C>[\"render\"]>) => DirectiveResult<C>"
          },
          "description": "Creates a user-facing directive function from a Directive class. This\nfunction has the same parameters as the directive's render() method."
        },
        {
          "kind": "class",
          "description": "Base class for creating custom directives. Users should extend this class,\nimplement `render` and/or `update`, and then pass their subclass to\n`directive`.",
          "name": "Directive",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AttributePart",
          "declaration": {
            "name": "AttributePart",
            "module": "./lit-html"
          }
        },
        {
          "kind": "js",
          "name": "BooleanAttributePart",
          "declaration": {
            "name": "BooleanAttributePart",
            "module": "./lit-html"
          }
        },
        {
          "kind": "js",
          "name": "ChildPart",
          "declaration": {
            "name": "ChildPart",
            "module": "./lit-html"
          }
        },
        {
          "kind": "js",
          "name": "ElementPart",
          "declaration": {
            "name": "ElementPart",
            "module": "./lit-html"
          }
        },
        {
          "kind": "js",
          "name": "EventPart",
          "declaration": {
            "name": "EventPart",
            "module": "./lit-html"
          }
        },
        {
          "kind": "js",
          "name": "Part",
          "declaration": {
            "name": "Part",
            "module": "./lit-html"
          }
        },
        {
          "kind": "js",
          "name": "PropertyPart",
          "declaration": {
            "name": "PropertyPart",
            "module": "./lit-html"
          }
        },
        {
          "kind": "js",
          "name": "PartType",
          "declaration": {
            "name": "PartType",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "directive",
          "declaration": {
            "name": "directive",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Directive",
          "declaration": {
            "name": "Directive",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directive.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "PartType",
          "type": {
            "text": "object"
          },
          "default": "{\n    ATTRIBUTE: 1,\n    CHILD: 2,\n    PROPERTY: 3,\n    BOOLEAN_ATTRIBUTE: 4,\n    EVENT: 5,\n    ELEMENT: 6,\n}"
        },
        {
          "kind": "function",
          "name": "directive",
          "parameters": [
            {
              "name": "c"
            }
          ],
          "description": "Creates a user-facing directive function from a Directive class. This\nfunction has the same parameters as the directive's render() method."
        },
        {
          "kind": "class",
          "description": "Base class for creating custom directives. Users should extend this class,\nimplement `render` and/or `update`, and then pass their subclass to\n`directive`.",
          "name": "Directive",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PartType",
          "declaration": {
            "name": "PartType",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "directive",
          "declaration": {
            "name": "directive",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
          }
        },
        {
          "kind": "js",
          "name": "Directive",
          "declaration": {
            "name": "Directive",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/experimental-hydrate.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "hydrate",
          "type": {
            "text": "(rootValue: unknown, container: Element | DocumentFragment, options?: Partial<RenderOptions>) => void"
          },
          "description": "hydrate() operates on a container with server-side rendered content and\nrestores the client side data structures needed for lit-html updates such as\nTemplateInstances and Parts. After calling `hydrate`, lit-html will behave as\nif it initially rendered the DOM, and any subsequent updates will update\nefficiently, the same as if lit-html had rendered the DOM on the client.\n\nhydrate() must be called on DOM that adheres the to lit-ssr structure for\nparts. ChildParts must be represented with both a start and end comment\nmarker, and ChildParts that contain a TemplateInstance must have the template\ndigest written into the comment data.\n\nSince render() encloses its output in a ChildPart, there must always be a root\nChildPart.\n\nExample (using for # ... for annotations in HTML)\n\nGiven this input:\n\n  html`<div class=${x}>${y}</div>`\n\nThe SSR DOM is:\n\n  <!--lit-part AEmR7W+R0Ak=-->  # Start marker for the root ChildPart created\n                                # by render(). Includes the digest of the\n                                # template\n  <div class=\"TEST_X\">\n    <!--lit-node 0--> # Indicates there are attribute bindings here\n                          # The number is the depth-first index of the parent\n                          # node in the template.\n    <!--lit-part-->  # Start marker for the ${x} expression\n    TEST_Y\n    <!--/lit-part-->  # End marker for the ${x} expression\n  </div>\n\n  <!--/lit-part-->  # End marker for the root ChildPart",
          "parameters": [
            {
              "name": "rootValue"
            },
            {
              "name": "container"
            },
            {
              "name": "userOptions"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "digestForTemplateResult",
          "type": {
            "text": "(templateResult: TemplateResult) => string"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "hydrate",
          "declaration": {
            "name": "hydrate",
            "module": "packages/atom-listbox/node_modules/lit-html/development/experimental-hydrate.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "digestForTemplateResult",
          "declaration": {
            "name": "digestForTemplateResult",
            "module": "packages/atom-listbox/node_modules/lit-html/development/experimental-hydrate.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/experimental-hydrate.js",
      "declarations": [
        {
          "kind": "function",
          "name": "hydrate",
          "parameters": [
            {
              "name": "rootValue"
            },
            {
              "name": "container"
            },
            {
              "name": "options",
              "default": "{}"
            },
            {
              "name": "userOptions"
            }
          ],
          "description": "hydrate() operates on a container with server-side rendered content and\nrestores the client side data structures needed for lit-html updates such as\nTemplateInstances and Parts. After calling `hydrate`, lit-html will behave as\nif it initially rendered the DOM, and any subsequent updates will update\nefficiently, the same as if lit-html had rendered the DOM on the client.\n\nhydrate() must be called on DOM that adheres the to lit-ssr structure for\nparts. ChildParts must be represented with both a start and end comment\nmarker, and ChildParts that contain a TemplateInstance must have the template\ndigest written into the comment data.\n\nSince render() encloses its output in a ChildPart, there must always be a root\nChildPart.\n\nExample (using for # ... for annotations in HTML)\n\nGiven this input:\n\n  html`<div class=${x}>${y}</div>`\n\nThe SSR DOM is:\n\n  <!--lit-part AEmR7W+R0Ak=-->  # Start marker for the root ChildPart created\n                                # by render(). Includes the digest of the\n                                # template\n  <div class=\"TEST_X\">\n    <!--lit-node 0--> # Indicates there are attribute bindings here\n                          # The number is the depth-first index of the parent\n                          # node in the template.\n    <!--lit-part-->  # Start marker for the ${x} expression\n    TEST_Y\n    <!--/lit-part-->  # End marker for the ${x} expression\n  </div>\n\n  <!--/lit-part-->  # End marker for the root ChildPart"
        },
        {
          "kind": "function",
          "name": "digestForTemplateResult",
          "parameters": [
            {
              "name": "templateResult"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "hydrate",
          "declaration": {
            "name": "hydrate",
            "module": "packages/atom-listbox/node_modules/lit-html/development/experimental-hydrate.js"
          }
        },
        {
          "kind": "js",
          "name": "digestForTemplateResult",
          "declaration": {
            "name": "digestForTemplateResult",
            "module": "packages/atom-listbox/node_modules/lit-html/development/experimental-hydrate.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "html",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult<1>"
          },
          "description": "Interprets a template literal as an HTML template that can efficiently\nrender to and update a container.\n\n```ts\nconst header = (title: string) => html`<h1>${title}</h1>`;\n```\n\nThe `html` tag returns a description of the DOM to render as a value. It is\nlazy, meaning no work is done until the template is rendered. When rendering,\nif a template comes from the same expression as a previously rendered result,\nit's efficiently updated instead of replaced."
        },
        {
          "kind": "variable",
          "name": "svg",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult<2>"
          },
          "description": "Interprets a template literal as an SVG template that can efficiently\nrender to and update a container."
        },
        {
          "kind": "variable",
          "name": "noChange",
          "type": {
            "text": "unique symbol"
          },
          "description": "A sentinel value that signals that a value was handled by a directive and\nshould not be written to the DOM."
        },
        {
          "kind": "variable",
          "name": "nothing",
          "type": {
            "text": "unique symbol"
          },
          "description": "A sentinel value that signals a ChildPart to fully clear its content.\n\n```ts\nconst button = html`${\n user.isAdmin\n   ? html`<button>DELETE</button>`\n   : nothing\n}`;\n```\n\nPrefer using `nothing` over other falsy values as it provides a consistent\nbehavior between various expression binding contexts.\n\nIn child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\nsame and render no nodes. In attribute expressions, `nothing` _removes_ the\nattribute, while `undefined` and `null` will render an empty string. In\nproperty expressions `nothing` becomes `undefined`."
        },
        {
          "kind": "variable",
          "name": "render",
          "type": {
            "text": "{\n    (value: unknown, container: HTMLElement | DocumentFragment, options?: RenderOptions | undefined): RootPart;\n    setSanitizer: (newSanitizer: SanitizerFactory) => void;\n    createSanitizer: SanitizerFactory;\n    _testOnlyClearSanitizerFactoryDoNotCallOrElse: () => void;\n}"
          },
          "description": "Renders a value, usually a lit-html TemplateResult, to the container.",
          "parameters": [
            {
              "name": "value"
            },
            {
              "name": "container"
            },
            {
              "name": "options"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "ChildPart",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`."
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation."
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation."
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "AttributePart",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "PropertyPart",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AttributePart",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "BooleanAttributePart",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AttributePart",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "EventPart",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AttributePart",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "ElementPart",
          "members": [
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "variable",
          "name": "_$LH",
          "type": {
            "text": "{\n    _boundAttributeSuffix: string;\n    _marker: string;\n    _markerMatch: string;\n    _HTML_RESULT: number;\n    _getTemplateHtml: (strings: TemplateStringsArray, type: ResultType) => [TrustedHTML, Array<string | undefined>];\n    _TemplateInstance: typeof TemplateInstance;\n    _isIterable: (value: unknown) => value is Iterable<unknown>;\n    _resolveDirective: typeof resolveDirective;\n    _ChildPart: typeof ChildPart;\n    _AttributePart: typeof AttributePart;\n    _BooleanAttributePart: typeof BooleanAttributePart;\n    _EventPart: typeof EventPart;\n    _PropertyPart: typeof PropertyPart;\n    _ElementPart: typeof ElementPart;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nPrivate exports for use by other Lit packages, not intended for use by\nexternal users.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports  mangled in the\nclient side code, we export a _$LH object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.\n\nThis has a unique name, to disambiguate it from private exports in\nlit-element, which re-exports all of lit-html.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "html",
          "declaration": {
            "name": "html",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "svg",
          "declaration": {
            "name": "svg",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "noChange",
          "declaration": {
            "name": "noChange",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "nothing",
          "declaration": {
            "name": "nothing",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "render",
          "declaration": {
            "name": "render",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ChildPart",
          "declaration": {
            "name": "ChildPart",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "AttributePart",
          "declaration": {
            "name": "AttributePart",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "PropertyPart",
          "declaration": {
            "name": "PropertyPart",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "BooleanAttributePart",
          "declaration": {
            "name": "BooleanAttributePart",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "EventPart",
          "declaration": {
            "name": "EventPart",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ElementPart",
          "declaration": {
            "name": "ElementPart",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "_$LH",
          "declaration": {
            "name": "_$LH",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/lit-html.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "html",
          "description": "Interprets a template literal as an HTML template that can efficiently\nrender to and update a container.\n\n```ts\nconst header = (title: string) => html`<h1>${title}</h1>`;\n```\n\nThe `html` tag returns a description of the DOM to render as a value. It is\nlazy, meaning no work is done until the template is rendered. When rendering,\nif a template comes from the same expression as a previously rendered result,\nit's efficiently updated instead of replaced."
        },
        {
          "kind": "variable",
          "name": "svg",
          "description": "Interprets a template literal as an SVG template that can efficiently\nrender to and update a container."
        },
        {
          "kind": "variable",
          "name": "noChange",
          "description": "A sentinel value that signals that a value was handled by a directive and\nshould not be written to the DOM."
        },
        {
          "kind": "variable",
          "name": "nothing",
          "description": "A sentinel value that signals a ChildPart to fully clear its content.\n\n```ts\nconst button = html`${\n user.isAdmin\n   ? html`<button>DELETE</button>`\n   : nothing\n}`;\n```\n\nPrefer using `nothing` over other falsy values as it provides a consistent\nbehavior between various expression binding contexts.\n\nIn child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\nsame and render no nodes. In attribute expressions, `nothing` _removes_ the\nattribute, while `undefined` and `null` will render an empty string. In\nproperty expressions `nothing` becomes `undefined`."
        },
        {
          "kind": "function",
          "name": "render",
          "parameters": [
            {
              "name": "value"
            },
            {
              "name": "container"
            },
            {
              "name": "options"
            }
          ],
          "description": "Renders a value, usually a lit-html TemplateResult, to the container."
        },
        {
          "kind": "variable",
          "name": "_$LH",
          "type": {
            "text": "object"
          },
          "default": "{\n    // Used in lit-ssr\n    _boundAttributeSuffix: boundAttributeSuffix,\n    _marker: marker,\n    _markerMatch: markerMatch,\n    _HTML_RESULT: HTML_RESULT,\n    _getTemplateHtml: getTemplateHtml,\n    // Used in hydrate\n    _TemplateInstance: TemplateInstance,\n    _isIterable: isIterable,\n    _resolveDirective: resolveDirective,\n    // Used in tests and private-ssr-support\n    _ChildPart: ChildPart,\n    _AttributePart: AttributePart,\n    _BooleanAttributePart: BooleanAttributePart,\n    _EventPart: EventPart,\n    _PropertyPart: PropertyPart,\n    _ElementPart: ElementPart,\n}",
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nPrivate exports for use by other Lit packages, not intended for use by\nexternal users.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports  mangled in the\nclient side code, we export a _$LH object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.\n\nThis has a unique name, to disambiguate it from private exports in\nlit-element, which re-exports all of lit-html.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "html",
          "declaration": {
            "name": "html",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "svg",
          "declaration": {
            "name": "svg",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "noChange",
          "declaration": {
            "name": "noChange",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "nothing",
          "declaration": {
            "name": "nothing",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "render",
          "declaration": {
            "name": "render",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "_$LH",
          "declaration": {
            "name": "_$LH",
            "module": "packages/atom-listbox/node_modules/lit-html/development/lit-html.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/polyfill-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/polyfill-support.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/private-ssr-support.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "_$LH",
          "type": {
            "text": "{\n    boundAttributeSuffix: string;\n    marker: string;\n    markerMatch: string;\n    HTML_RESULT: number;\n    getTemplateHtml: (strings: TemplateStringsArray, type: 1 | 2) => [import(\"trusted-types/lib\").TrustedHTML, (string | undefined)[]];\n    overrideDirectiveResolve: (directiveClass: new (part: PartInfo) => Directive & {\n        render(): unknown;\n    }, resolveOverrideFn: (directive: Directive, values: unknown[]) => unknown) => {\n        new (part: PartInfo): {\n            _$resolve(this: Directive, _part: Part, values: unknown[]): unknown;\n            __part: Part;\n            __attributeIndex: number | undefined;\n            __directive?: Directive | undefined;\n            _$parent: Disconnectable;\n            _$disconnectableChildren?: Set<Disconnectable> | undefined;\n            _$notifyDirectiveConnectionChanged?(isConnected: boolean): void;\n            readonly _$isConnected: boolean;\n            _$initialize(part: Part, parent: Disconnectable, attributeIndex: number | undefined): void;\n            render: ((...props: unknown[]) => unknown) & (() => unknown);\n            update(_part: Part, props: unknown[]): unknown;\n        };\n    };\n    setDirectiveClass(value: DirectiveResult, directiveClass: DirectiveClass): void;\n    getAttributePartCommittedValue: (part: AttributePart, value: unknown, index: number | undefined) => unknown;\n    connectedDisconnectable: (props?: object | undefined) => Disconnectable;\n    resolveDirective: (part: import(\"./lit-html.js\").ChildPart | AttributePart | import(\"./lit-html.js\").ElementPart, value: unknown, parent?: import(\"./lit-html.js\").DirectiveParent, attributeIndex?: number | undefined) => unknown;\n    AttributePart: typeof AttributePart;\n    PropertyPart: typeof import(\"./lit-html.js\").PropertyPart;\n    BooleanAttributePart: typeof import(\"./lit-html.js\").BooleanAttributePart;\n    EventPart: typeof import(\"./lit-html.js\").EventPart;\n    ElementPart: typeof import(\"./lit-html.js\").ElementPart;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports mangled in the\nclient side code, we export a _$LH object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Template",
          "declaration": {
            "name": "Template",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "_$LH",
          "declaration": {
            "name": "_$LH",
            "module": "packages/atom-listbox/node_modules/lit-html/development/private-ssr-support.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/private-ssr-support.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "_$LH",
          "type": {
            "text": "object"
          },
          "default": "{\n    boundAttributeSuffix: p._boundAttributeSuffix,\n    marker: p._marker,\n    markerMatch: p._markerMatch,\n    HTML_RESULT: p._HTML_RESULT,\n    getTemplateHtml: p._getTemplateHtml,\n    overrideDirectiveResolve: (directiveClass, resolveOverrideFn) => class extends directiveClass {\n        _$resolve(_part, values) {\n            return resolveOverrideFn(this, values);\n        }\n    },\n    setDirectiveClass(value, directiveClass) {\n        // This property needs to remain unminified.\n        value['_$litDirective$'] = directiveClass;\n    },\n    getAttributePartCommittedValue: (part, value, index) => {\n        // Use the part setter to resolve directives/concatenate multiple parts\n        // into a final value (captured by passing in a commitValue override)\n        let committedValue = noChange;\n        // Note that _commitValue need not be in `stableProperties` because this\n        // method is only run on `AttributePart`s created by lit-ssr using the same\n        // version of the library as this file\n        part._commitValue = (value) => (committedValue = value);\n        part._$setValue(value, part, index);\n        return committedValue;\n    },\n    connectedDisconnectable: (props) => ({\n        ...props,\n        _$isConnected: true,\n    }),\n    resolveDirective: p._resolveDirective,\n    AttributePart: p._AttributePart,\n    PropertyPart: p._PropertyPart,\n    BooleanAttributePart: p._BooleanAttributePart,\n    EventPart: p._EventPart,\n    ElementPart: p._ElementPart,\n}",
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports mangled in the\nclient side code, we export a _$LH object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "_$LH",
          "declaration": {
            "name": "_$LH",
            "module": "packages/atom-listbox/node_modules/lit-html/development/private-ssr-support.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/static.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "unsafeStatic",
          "type": {
            "text": "(value: string) => {\n    _$litStatic$: string;\n}"
          },
          "description": "Wraps a string so that it behaves like part of the static template\nstrings instead of a dynamic value.\n\nUsers must take care to ensure that adding the static string to the template\nresults in well-formed HTML, or else templates may break unexpectedly.\n\nNote that this function is unsafe to use on untrusted content, as it will be\ndirectly parsed into HTML. Do not pass user input to this function\nwithout sanitizing it.\n\nStatic values can be changed, but they will cause a complete re-render\nsince they effectively create a new template."
        },
        {
          "kind": "variable",
          "name": "literal",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => {\n    _$litStatic$: unknown;\n}"
          },
          "description": "Tags a string literal so that it behaves like part of the static template\nstrings instead of a dynamic value.\n\nThe only values that may be used in template expressions are other tagged\n`literal` results or `unsafeStatic` values (note that untrusted content\nshould never be passed to `unsafeStatic`).\n\nUsers must take care to ensure that adding the static string to the template\nresults in well-formed HTML, or else templates may break unexpectedly.\n\nStatic values can be changed, but they will cause a complete re-render since\nthey effectively create a new template."
        },
        {
          "kind": "variable",
          "name": "withStatic",
          "type": {
            "text": "(coreTag: typeof coreHtml | typeof coreSvg) => (strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
          },
          "description": "Wraps a lit-html template tag (`html` or `svg`) to add static value support."
        },
        {
          "kind": "variable",
          "name": "html",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
          },
          "description": "Interprets a template literal as an HTML template that can efficiently\nrender to and update a container.\n\nIncludes static value support from `lit-html/static.js`."
        },
        {
          "kind": "variable",
          "name": "svg",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
          },
          "description": "Interprets a template literal as an SVG template that can efficiently\nrender to and update a container.\n\nIncludes static value support from `lit-html/static.js`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "unsafeStatic",
          "declaration": {
            "name": "unsafeStatic",
            "module": "packages/atom-listbox/node_modules/lit-html/development/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "literal",
          "declaration": {
            "name": "literal",
            "module": "packages/atom-listbox/node_modules/lit-html/development/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "withStatic",
          "declaration": {
            "name": "withStatic",
            "module": "packages/atom-listbox/node_modules/lit-html/development/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "html",
          "declaration": {
            "name": "html",
            "module": "packages/atom-listbox/node_modules/lit-html/development/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "svg",
          "declaration": {
            "name": "svg",
            "module": "packages/atom-listbox/node_modules/lit-html/development/static.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/static.js",
      "declarations": [
        {
          "kind": "function",
          "name": "unsafeStatic",
          "parameters": [
            {
              "name": "value"
            }
          ],
          "description": "Wraps a string so that it behaves like part of the static template\nstrings instead of a dynamic value.\n\nUsers must take care to ensure that adding the static string to the template\nresults in well-formed HTML, or else templates may break unexpectedly.\n\nNote that this function is unsafe to use on untrusted content, as it will be\ndirectly parsed into HTML. Do not pass user input to this function\nwithout sanitizing it.\n\nStatic values can be changed, but they will cause a complete re-render\nsince they effectively create a new template."
        },
        {
          "kind": "function",
          "name": "literal",
          "parameters": [
            {
              "name": "strings"
            },
            {
              "name": "values"
            }
          ],
          "description": "Tags a string literal so that it behaves like part of the static template\nstrings instead of a dynamic value.\n\nThe only values that may be used in template expressions are other tagged\n`literal` results or `unsafeStatic` values (note that untrusted content\nshould never be passed to `unsafeStatic`).\n\nUsers must take care to ensure that adding the static string to the template\nresults in well-formed HTML, or else templates may break unexpectedly.\n\nStatic values can be changed, but they will cause a complete re-render since\nthey effectively create a new template."
        },
        {
          "kind": "function",
          "name": "withStatic",
          "parameters": [
            {
              "name": "coreTag"
            }
          ],
          "description": "Wraps a lit-html template tag (`html` or `svg`) to add static value support."
        },
        {
          "kind": "variable",
          "name": "html",
          "description": "Interprets a template literal as an HTML template that can efficiently\nrender to and update a container.\n\nIncludes static value support from `lit-html/static.js`."
        },
        {
          "kind": "variable",
          "name": "svg",
          "description": "Interprets a template literal as an SVG template that can efficiently\nrender to and update a container.\n\nIncludes static value support from `lit-html/static.js`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "unsafeStatic",
          "declaration": {
            "name": "unsafeStatic",
            "module": "packages/atom-listbox/node_modules/lit-html/development/static.js"
          }
        },
        {
          "kind": "js",
          "name": "literal",
          "declaration": {
            "name": "literal",
            "module": "packages/atom-listbox/node_modules/lit-html/development/static.js"
          }
        },
        {
          "kind": "js",
          "name": "withStatic",
          "declaration": {
            "name": "withStatic",
            "module": "packages/atom-listbox/node_modules/lit-html/development/static.js"
          }
        },
        {
          "kind": "js",
          "name": "html",
          "declaration": {
            "name": "html",
            "module": "packages/atom-listbox/node_modules/lit-html/development/static.js"
          }
        },
        {
          "kind": "js",
          "name": "svg",
          "declaration": {
            "name": "svg",
            "module": "packages/atom-listbox/node_modules/lit-html/development/static.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/async-append.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncAppendDirective",
          "members": [
            {
              "kind": "field",
              "name": "__childPart",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "commitValue",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directives/async-replace.js"
              }
            },
            {
              "kind": "method",
              "name": "disconnected",
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "__weakThis",
              "default": "new PseudoWeakRef(this)",
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directives/async-replace.js"
              }
            },
            {
              "kind": "field",
              "name": "__pauser",
              "default": "new Pauser()",
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directives/async-replace.js"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "parameters": [
                {
                  "name": "part"
                },
                {
                  "name": "parent"
                },
                {
                  "name": "attributeIndex"
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$disconnectableChildren",
              "default": "undefined",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "AsyncReplaceDirective",
            "module": "/packages/atom-listbox/node_modules/lit-html/directives/async-replace.js"
          }
        },
        {
          "kind": "variable",
          "name": "asyncAppend",
          "type": {
            "text": "(value: AsyncIterable<unknown>, _mapper?: ((v: unknown, index?: number | undefined) => unknown) | undefined) => import(\"../directive.js\").DirectiveResult<typeof AsyncAppendDirective>"
          },
          "description": "A directive that renders the items of an async iterable[1], appending new\nvalues after previous values, similar to the built-in support for iterables.\nThis directive is usable only in child expressions.\n\nAsync iterables are objects with a [Symbol.asyncIterator] method, which\nreturns an iterator who's `next()` method returns a Promise. When a new\nvalue is available, the Promise resolves and the value is appended to the\nPart controlled by the directive. If another value other than this\ndirective has been set on the Part, the iterable will no longer be listened\nto and new values won't be written to the Part.\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of",
          "parameters": [
            {
              "description": "An async iterable",
              "name": "value"
            },
            {
              "description": "An optional function that maps from (value, index) to another\nvalue. Useful for generating templates for each item in the iterable.",
              "name": "mapper"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "asyncAppend",
          "declaration": {
            "name": "asyncAppend",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/async-append.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "AsyncAppendDirective",
          "declaration": {
            "name": "AsyncAppendDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/async-append.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/async-append.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "c"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "asyncAppend",
          "declaration": {
            "name": "c",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/async-append.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/async-replace.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncReplaceDirective",
          "members": [
            {
              "kind": "field",
              "name": "__value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__weakThis",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__pauser",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "commitValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "_index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "disconnected",
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "parameters": [
                {
                  "name": "part"
                },
                {
                  "name": "parent"
                },
                {
                  "name": "attributeIndex"
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$disconnectableChildren",
              "default": "undefined",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "AsyncDirective",
            "module": "/packages/atom-listbox/node_modules/lit-html/async-directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "asyncReplace",
          "type": {
            "text": "(value: AsyncIterable<unknown>, _mapper?: Mapper<unknown> | undefined) => import(\"../directive.js\").DirectiveResult<typeof AsyncReplaceDirective>"
          },
          "description": "A directive that renders the items of an async iterable[1], replacing\nprevious values with new values, so that only one value is ever rendered\nat a time. This directive may be used in any expression type.\n\nAsync iterables are objects with a `[Symbol.asyncIterator]` method, which\nreturns an iterator who's `next()` method returns a Promise. When a new\nvalue is available, the Promise resolves and the value is rendered to the\nPart controlled by the directive. If another value other than this\ndirective has been set on the Part, the iterable will no longer be listened\nto and new values won't be written to the Part.\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of",
          "parameters": [
            {
              "description": "An async iterable",
              "name": "value"
            },
            {
              "description": "An optional function that maps from (value, index) to another\nvalue. Useful for generating templates for each item in the iterable.",
              "name": "mapper"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AsyncReplaceDirective",
          "declaration": {
            "name": "AsyncReplaceDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/async-replace.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "asyncReplace",
          "declaration": {
            "name": "asyncReplace",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/async-replace.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/async-replace.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "o",
          "members": [
            {
              "kind": "method",
              "name": "commitValue",
              "parameters": [
                {
                  "name": "t"
                },
                {
                  "name": "i"
                }
              ]
            },
            {
              "kind": "method",
              "name": "disconnected"
            },
            {
              "kind": "method",
              "name": "reconnected"
            },
            {
              "kind": "field",
              "name": "_$CG",
              "default": "new r(this)"
            },
            {
              "kind": "field",
              "name": "_$CK",
              "default": "new e"
            },
            {
              "kind": "method",
              "name": "disconnect",
              "inheritedFrom": {
                "name": "s",
                "module": "packages/atom-listbox/node_modules/lit-html/directives/private-async-helpers.js"
              }
            },
            {
              "kind": "method",
              "name": "reconnect",
              "parameters": [
                {
                  "name": "t"
                }
              ],
              "inheritedFrom": {
                "name": "s",
                "module": "packages/atom-listbox/node_modules/lit-html/directives/private-async-helpers.js"
              }
            },
            {
              "kind": "method",
              "name": "deref",
              "inheritedFrom": {
                "name": "s",
                "module": "packages/atom-listbox/node_modules/lit-html/directives/private-async-helpers.js"
              }
            },
            {
              "kind": "field",
              "name": "U",
              "default": "t",
              "inheritedFrom": {
                "name": "s",
                "module": "packages/atom-listbox/node_modules/lit-html/directives/private-async-helpers.js"
              }
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/packages/atom-listbox/node_modules/lit-html/async-directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "h"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AsyncReplaceDirective",
          "declaration": {
            "name": "o",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/async-replace.js"
          }
        },
        {
          "kind": "js",
          "name": "asyncReplace",
          "declaration": {
            "name": "h",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/async-replace.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/cache.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CacheDirective",
          "members": [
            {
              "kind": "field",
              "name": "_templateCache",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "cache",
          "type": {
            "text": "(v: unknown) => import(\"../directive.js\").DirectiveResult<typeof CacheDirective>"
          },
          "description": "Enables fast switching between multiple templates by caching the DOM nodes\nand TemplateInstances produced by the templates.\n\nExample:\n\n```js\nlet checked = false;\n\nhtml`\n  ${cache(checked ? html`input is checked` : html`input is not checked`)}\n`\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cache",
          "declaration": {
            "name": "cache",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/cache.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "CacheDirective",
          "declaration": {
            "name": "CacheDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/cache.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/cache.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "d"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cache",
          "declaration": {
            "name": "d",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/cache.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/class-map.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ClassMapDirective",
          "members": [
            {
              "kind": "field",
              "name": "_previousClasses",
              "privacy": "private",
              "description": "Stores the ClassInfo object applied to a given AttributePart.\nUsed to unset existing values when a new ClassInfo object is applied."
            },
            {
              "kind": "field",
              "name": "_staticClasses",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "classMap",
          "type": {
            "text": "(classInfo: ClassInfo) => import(\"../directive.js\").DirectiveResult<typeof ClassMapDirective>"
          },
          "description": "A directive that applies dynamic CSS classes.\n\nThis must be used in the `class` attribute and must be the only part used in\nthe attribute. It takes each property in the `classInfo` argument and adds\nthe property name to the element's `classList` if the property value is\ntruthy; if the property value is falsey, the property name is removed from\nthe element's `class`.\n\nFor example `{foo: bar}` applies the class `foo` if the value of `bar` is\ntruthy.",
          "parameters": [
            {
              "name": "classInfo"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "classMap",
          "declaration": {
            "name": "classMap",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/class-map.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ClassMapDirective",
          "declaration": {
            "name": "ClassMapDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/class-map.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/class-map.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "o"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "classMap",
          "declaration": {
            "name": "o",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/class-map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/guard.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GuardDirective",
          "members": [
            {
              "kind": "field",
              "name": "_previousValue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "guard",
          "type": {
            "text": "(_value: unknown, f: () => unknown) => import(\"../directive.js\").DirectiveResult<typeof GuardDirective>"
          },
          "description": "Prevents re-render of a template function until a single value or an array of\nvalues changes.\n\nValues are checked against previous values with strict equality (`===`), and\nso the check won't detect nested property changes inside objects or arrays.\nArrays values have each item checked against the previous value at the same\nindex with strict equality. Nested arrays are also checked only by strict\nequality.\n\nExample:\n\n```js\nhtml`\n  <div>\n    ${guard([user.id, company.id], () => html`...`)}\n  </div>\n`\n```\n\nIn this case, the template only rerenders if either `user.id` or `company.id`\nchanges.\n\nguard() is useful with immutable data patterns, by preventing expensive work\nuntil data updates.\n\nExample:\n\n```js\nhtml`\n  <div>\n    ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n  </div>\n`\n```\n\nIn this case, items are mapped over only when the array reference changes.",
          "parameters": [
            {
              "description": "the value to check before re-rendering",
              "name": "value"
            },
            {
              "description": "the template function",
              "name": "f"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "guard",
          "declaration": {
            "name": "guard",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/guard.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "GuardDirective",
          "declaration": {
            "name": "GuardDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/guard.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/guard.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "i"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "guard",
          "declaration": {
            "name": "i",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/guard.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/if-defined.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ifDefined",
          "type": {
            "text": "<T>(value: T) => typeof nothing | NonNullable<T>"
          },
          "description": "For AttributeParts, sets the attribute if the value is defined and removes\nthe attribute if the value is undefined.\n\nFor other part types, this directive is a no-op."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ifDefined",
          "declaration": {
            "name": "ifDefined",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/if-defined.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/if-defined.js",
      "declarations": [
        {
          "kind": "function",
          "name": "l",
          "parameters": [
            {
              "name": "l"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ifDefined",
          "declaration": {
            "name": "l",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/if-defined.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/live.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LiveDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "live",
          "type": {
            "text": "(value: unknown) => import(\"../directive.js\").DirectiveResult<typeof LiveDirective>"
          },
          "description": "Checks binding values against live DOM values, instead of previously bound\nvalues, when determining whether to update the value.\n\nThis is useful for cases where the DOM value may change from outside of\nlit-html, such as with a binding to an `<input>` element's `value` property,\na content editable elements text, or to a custom element that changes it's\nown properties or attributes.\n\nIn these cases if the DOM value changes, but the value set through lit-html\nbindings hasn't, lit-html won't know to update the DOM value and will leave\nit alone. If this is not what you want--if you want to overwrite the DOM\nvalue with the bound value no matter what--use the `live()` directive:\n\n```js\nhtml`<input .value=${live(x)}>`\n```\n\n`live()` performs a strict equality check agains the live DOM value, and if\nthe new value is equal to the live value, does nothing. This means that\n`live()` should not be used when the binding will cause a type conversion. If\nyou use `live()` with an attribute binding, make sure that only strings are\npassed in, or the binding will update every render."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "live",
          "declaration": {
            "name": "live",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/live.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "LiveDirective",
          "declaration": {
            "name": "LiveDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/live.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/live.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "l"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "live",
          "declaration": {
            "name": "l",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/live.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/private-async-helpers.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "forAwaitOf",
          "type": {
            "text": "<T>(iterable: AsyncIterable<T>, callback: (value: T) => Promise<boolean>) => Promise<void>"
          },
          "description": "Helper to iterate an AsyncIterable in its own closure.",
          "parameters": [
            {
              "description": "The iterable to iterate",
              "name": "iterable"
            },
            {
              "description": "The callback to call for each value. If the callback returns\n`false`, the loop will be broken.",
              "name": "callback"
            }
          ]
        },
        {
          "kind": "class",
          "description": "Holds a reference to an instance that can be disconnected and reconnected,\nso that a closure over the ref (e.g. in a then function to a promise) does\nnot strongly hold a ref to the instance. Approximates a WeakRef but must\nbe manually connected & disconnected to the backing instance.",
          "name": "PseudoWeakRef",
          "members": [
            {
              "kind": "field",
              "name": "_ref",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "disconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Disassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "reconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ref",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "description": "Reassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "deref",
              "return": {
                "type": {
                  "text": "T | undefined"
                }
              },
              "description": "Retrieves the backing instance (will be undefined when disconnected)"
            }
          ]
        },
        {
          "kind": "class",
          "description": "A helper to pause and resume waiting on a condition in an async function",
          "name": "Pauser",
          "members": [
            {
              "kind": "field",
              "name": "_promise",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resolve",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "get",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "When paused, returns a promise to be awaited; when unpaused, returns\nundefined. Note that in the microtask between the pauser being resumed\nan an await of this promise resolving, the pauser could be paused again,\nhence callers should check the promise in a loop when awaiting."
            },
            {
              "kind": "method",
              "name": "pause",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Creates a promise to be awaited"
            },
            {
              "kind": "method",
              "name": "resume",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resolves the promise which may be awaited"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forAwaitOf",
          "declaration": {
            "name": "forAwaitOf",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/private-async-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "PseudoWeakRef",
          "declaration": {
            "name": "PseudoWeakRef",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/private-async-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Pauser",
          "declaration": {
            "name": "Pauser",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/private-async-helpers.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/private-async-helpers.js",
      "declarations": [
        {
          "kind": "function",
          "name": "t",
          "parameters": [
            {
              "name": "t"
            },
            {
              "name": "s"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "s",
          "members": [
            {
              "kind": "method",
              "name": "disconnect"
            },
            {
              "kind": "method",
              "name": "reconnect",
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "deref"
            },
            {
              "kind": "field",
              "name": "U",
              "default": "t"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "i",
          "members": [
            {
              "kind": "method",
              "name": "get"
            },
            {
              "kind": "method",
              "name": "pause"
            },
            {
              "kind": "method",
              "name": "resume"
            },
            {
              "kind": "field",
              "name": "Y",
              "default": "void 0"
            },
            {
              "kind": "field",
              "name": "q",
              "default": "void 0"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Pauser",
          "declaration": {
            "name": "i",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/private-async-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "PseudoWeakRef",
          "declaration": {
            "name": "s",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/private-async-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "forAwaitOf",
          "declaration": {
            "name": "t",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/private-async-helpers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/ref.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "createRef",
          "type": {
            "text": "<T = Element>() => Ref<T>"
          },
          "description": "Creates a new Ref object, which is container for a reference to an element."
        },
        {
          "kind": "class",
          "description": "An object that holds a ref value.",
          "name": "Ref",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "description": "The current Element value of the ref, or else `undefined` if the ref is no\nlonger rendered."
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "RefDirective",
          "members": [
            {
              "kind": "field",
              "name": "_element",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_ref",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_context",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_updateRefValue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_lastElementForRef",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "disconnected",
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "parameters": [
                {
                  "name": "part"
                },
                {
                  "name": "parent"
                },
                {
                  "name": "attributeIndex"
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$disconnectableChildren",
              "default": "undefined",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "AsyncDirective",
            "module": "/packages/atom-listbox/node_modules/lit-html/async-directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "ref",
          "type": {
            "text": "(_ref: RefOrCallback) => import(\"../directive.js\").DirectiveResult<typeof RefDirective>"
          },
          "description": "Sets the value of a Ref object or calls a ref callback with the element it's\nbound to.\n\nA Ref object acts as a container for a reference to an element. A ref\ncallback is a function that takes an element as its only argument.\n\nThe ref directive sets the value of the Ref object or calls the ref callback\nduring rendering, if the referenced element changed.\n\nNote: If a ref callback is rendered to a different element position or is\nremoved in a subsequent render, it will first be called with `undefined`,\nfollowed by another call with the new element it was rendered to (if any).\n\n```js\n// Using Ref object\nconst inputRef = createRef();\nrender(html`<input ${ref(inputRef)}>`, container);\ninputRef.value.focus();\n\n// Using callback\nconst callback = (inputElement) => inputElement.focus();\nrender(html`<input ${ref(callback)}>`, container);\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createRef",
          "declaration": {
            "name": "createRef",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/ref.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Ref",
          "declaration": {
            "name": "Ref",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/ref.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ref",
          "declaration": {
            "name": "ref",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/ref.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "RefDirective",
          "declaration": {
            "name": "RefDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/ref.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/ref.js",
      "declarations": [
        {
          "kind": "function",
          "name": "e"
        },
        {
          "kind": "variable",
          "name": "n"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createRef",
          "declaration": {
            "name": "e",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/ref.js"
          }
        },
        {
          "kind": "js",
          "name": "ref",
          "declaration": {
            "name": "n",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/ref.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/repeat.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RepeatDirective",
          "members": [
            {
              "kind": "field",
              "name": "_itemKeys",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getValuesAndKeys",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "repeat",
          "type": {
            "text": "RepeatDirectiveFn"
          },
          "description": "A directive that repeats a series of values (usually `TemplateResults`)\ngenerated from an iterable, and updates those items efficiently when the\niterable changes based on user-provided `keys` associated with each item.\n\nNote that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\nmeaning previous DOM for a given key is moved into the new position if\nneeded, and DOM will never be reused with values for different keys (new DOM\nwill always be created for new keys). This is generally the most efficient\nway to use `repeat` since it performs minimum unnecessary work for insertions\nand removals.\n\nThe `keyFn` takes two parameters, the item and its index, and returns a unique key value.\n\n```js\nhtml`\n  <ol>\n    ${repeat(this.items, (item) => item.id, (item, index) => {\n      return html`<li>${index}: ${item.name}</li>`;\n    })}\n  </ol>\n`\n```\n\n**Important**: If providing a `keyFn`, keys *must* be unique for all items in a\ngiven call to `repeat`. The behavior when two or more items have the same key\nis undefined.\n\nIf no `keyFn` is provided, this directive will perform similar to mapping\nitems to values, and DOM will be reused against potentially different items."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "repeat",
          "declaration": {
            "name": "repeat",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/repeat.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "RepeatDirective",
          "declaration": {
            "name": "RepeatDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/repeat.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/repeat.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "c"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "repeat",
          "declaration": {
            "name": "c",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/repeat.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/style-map.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StyleMapDirective",
          "members": [
            {
              "kind": "field",
              "name": "_previousStyleProperties",
              "type": {
                "text": "Set<string> | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "styleMap",
          "type": {
            "text": "(styleInfo: StyleInfo) => import(\"../directive.js\").DirectiveResult<typeof StyleMapDirective>"
          },
          "description": "A directive that applies CSS properties to an element.\n\n`styleMap` can only be used in the `style` attribute and must be the only\nexpression in the attribute. It takes the property names in the `styleInfo`\nobject and adds the property values as CSS properties. Property names with\ndashes (`-`) are assumed to be valid CSS property names and set on the\nelement's style object using `setProperty()`. Names without dashes are\nassumed to be camelCased JavaScript property names and set on the element's\nstyle object using property assignment, allowing the style object to\ntranslate JavaScript-style names to CSS property names.\n\nFor example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n'0'})` sets the `background-color`, `border-top` and `--size` properties.",
          "parameters": [
            {
              "name": "styleInfo"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "styleMap",
          "declaration": {
            "name": "styleMap",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/style-map.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "StyleMapDirective",
          "declaration": {
            "name": "StyleMapDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/style-map.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/style-map.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "i"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "styleMap",
          "declaration": {
            "name": "i",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/style-map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/template-content.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TemplateContentDirective",
          "members": [
            {
              "kind": "field",
              "name": "_previousTemplate",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "templateContent",
          "type": {
            "text": "(template: HTMLTemplateElement) => import(\"../directive.js\").DirectiveResult<typeof TemplateContentDirective>"
          },
          "description": "Renders the content of a template element as HTML.\n\nNote, the template should be developer controlled and not user controlled.\nRendering a user-controlled template with this directive\ncould lead to cross-site-scripting vulnerabilities."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "templateContent",
          "declaration": {
            "name": "templateContent",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/template-content.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TemplateContentDirective",
          "declaration": {
            "name": "TemplateContentDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/template-content.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/template-content.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "o"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "templateContent",
          "declaration": {
            "name": "o",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/template-content.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/unsafe-html.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UnsafeHTMLDirective",
          "members": [
            {
              "kind": "field",
              "name": "directiveName",
              "type": {
                "text": "string"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "resultType",
              "type": {
                "text": "number"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "_value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_templateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "unsafeHTML",
          "type": {
            "text": "(value: string | typeof noChange | typeof nothing | null | undefined) => import(\"../directive.js\").DirectiveResult<typeof UnsafeHTMLDirective>"
          },
          "description": "Renders the result as HTML, rather than text.\n\nThe values `undefined`, `null`, and `nothing`, will all result in no content\n(empty string) being rendered.\n\nNote, this is unsafe to use with any user-provided input that hasn't been\nsanitized or escaped, as it may lead to cross-site-scripting\nvulnerabilities."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UnsafeHTMLDirective",
          "declaration": {
            "name": "UnsafeHTMLDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/unsafe-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "unsafeHTML",
          "declaration": {
            "name": "unsafeHTML",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/unsafe-html.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/unsafe-html.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "e",
          "members": [],
          "superclass": {
            "name": "r",
            "module": "/packages/atom-listbox/node_modules/lit-html/directive.js"
          },
          "tagName": "n",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "o"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UnsafeHTMLDirective",
          "declaration": {
            "name": "e",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/unsafe-html.js"
          }
        },
        {
          "kind": "js",
          "name": "unsafeHTML",
          "declaration": {
            "name": "o",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/unsafe-html.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/unsafe-svg.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UnsafeSVGDirective",
          "members": [
            {
              "kind": "field",
              "name": "directiveName",
              "type": {
                "text": "string"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "resultType",
              "type": {
                "text": "number"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "_value",
              "default": "nothing",
              "inheritedFrom": {
                "name": "UnsafeHTMLDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directives/unsafe-html.js"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "UnsafeHTMLDirective",
            "module": "/packages/atom-listbox/node_modules/lit-html/directives/unsafe-html.js"
          }
        },
        {
          "kind": "variable",
          "name": "unsafeSVG",
          "type": {
            "text": "(value: string | typeof import(\"../lit-html.js\").noChange | typeof import(\"../lit-html.js\").nothing | null | undefined) => import(\"../directive.js\").DirectiveResult<typeof UnsafeSVGDirective>"
          },
          "description": "Renders the result as SVG, rather than text.\n\nThe values `undefined`, `null`, and `nothing`, will all result in no content\n(empty string) being rendered.\n\nNote, this is unsafe to use with any user-provided input that hasn't been\nsanitized or escaped, as it may lead to cross-site-scripting\nvulnerabilities."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "unsafeSVG",
          "declaration": {
            "name": "unsafeSVG",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/unsafe-svg.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "UnsafeSVGDirective",
          "declaration": {
            "name": "UnsafeSVGDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/unsafe-svg.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/unsafe-svg.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "o"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "unsafeSVG",
          "declaration": {
            "name": "o",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/unsafe-svg.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/until.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UntilDirective",
          "members": [
            {
              "kind": "field",
              "name": "__lastRenderedIndex",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__values",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__weakThis",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__pauser",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "disconnected",
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "parameters": [
                {
                  "name": "part"
                },
                {
                  "name": "parent"
                },
                {
                  "name": "attributeIndex"
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$disconnectableChildren",
              "default": "undefined",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "AsyncDirective",
            "module": "/packages/atom-listbox/node_modules/lit-html/async-directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "until",
          "type": {
            "text": "(...values: unknown[]) => import(\"../directive.js\").DirectiveResult<typeof UntilDirective>"
          },
          "description": "Renders one of a series of values, including Promises, to a Part.\n\nValues are rendered in priority order, with the first argument having the\nhighest priority and the last argument having the lowest priority. If a\nvalue is a Promise, low-priority values will be rendered until it resolves.\n\nThe priority of values can be used to create placeholder content for async\ndata. For example, a Promise with pending content can be the first,\nhighest-priority, argument, and a non_promise loading indicator template can\nbe used as the second, lower-priority, argument. The loading indicator will\nrender immediately, and the primary content will render when the Promise\nresolves.\n\nExample:\n\n```js\nconst content = fetch('./content.txt').then(r => r.text());\nhtml`${until(content, html`<span>Loading...</span>`)}`\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UntilDirective",
          "declaration": {
            "name": "UntilDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/until.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "until",
          "declaration": {
            "name": "until",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/until.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/directives/until.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "h",
          "members": [
            {
              "kind": "method",
              "name": "disconnected"
            },
            {
              "kind": "method",
              "name": "reconnected"
            },
            {
              "kind": "field",
              "name": "_$Cft",
              "type": {
                "text": "number"
              },
              "default": "1073741823"
            },
            {
              "kind": "field",
              "name": "_$Cwt",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_$CG",
              "default": "new e(this)"
            },
            {
              "kind": "field",
              "name": "_$CK",
              "default": "new o"
            }
          ],
          "superclass": {
            "name": "r",
            "module": "/packages/atom-listbox/node_modules/lit-html/async-directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "c"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UntilDirective",
          "declaration": {
            "name": "h",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/until.js"
          }
        },
        {
          "kind": "js",
          "name": "until",
          "declaration": {
            "name": "c",
            "module": "packages/atom-listbox/node_modules/lit-html/directives/until.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/singleton-manager/src/SingletonManagerClass.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SingletonManagerClass",
          "members": [
            {
              "kind": "field",
              "name": "_map",
              "type": {
                "text": "any"
              },
              "description": "protected"
            },
            {
              "kind": "method",
              "name": "set",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Ignores already existing keys (e.g. it will not override)"
            },
            {
              "kind": "method",
              "name": "get",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "has",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SingletonManagerClass",
          "declaration": {
            "name": "SingletonManagerClass",
            "module": "packages/atom-listbox/node_modules/singleton-manager/src/SingletonManagerClass.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/singleton-manager/src/SingletonManagerClass.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SingletonManagerClass",
          "members": [
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Ignores already existing keys (e.g. it will not override)"
            },
            {
              "kind": "method",
              "name": "get",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "has",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_map",
              "description": "protected"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SingletonManagerClass",
          "declaration": {
            "name": "SingletonManagerClass",
            "module": "packages/atom-listbox/node_modules/singleton-manager/src/SingletonManagerClass.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/browserDetection.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "isIE11",
          "type": {
            "text": "boolean"
          }
        },
        {
          "kind": "variable",
          "name": "isChrome",
          "type": {
            "text": "boolean | RegExpMatchArray | null | undefined"
          }
        },
        {
          "kind": "variable",
          "name": "isIOSChrome",
          "type": {
            "text": "boolean | RegExpMatchArray | null | undefined"
          }
        },
        {
          "kind": "variable",
          "name": "isChromium",
          "type": {
            "text": "boolean | RegExpMatchArray | null | undefined"
          }
        },
        {
          "kind": "variable",
          "name": "isMac",
          "type": {
            "text": "boolean"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isIE11",
          "declaration": {
            "name": "isIE11",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/browserDetection.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isChrome",
          "declaration": {
            "name": "isChrome",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/browserDetection.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isIOSChrome",
          "declaration": {
            "name": "isIOSChrome",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/browserDetection.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isChromium",
          "declaration": {
            "name": "isChromium",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/browserDetection.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isMac",
          "declaration": {
            "name": "isMac",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/browserDetection.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/browserDetection.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "browserDetection",
          "type": {
            "text": "object"
          },
          "default": "{\n  isIE11: /Trident/.test(window.navigator.userAgent),\n  isChrome: checkChrome(),\n  isIOSChrome: checkChrome('ios'),\n  isChromium: checkChrome('chromium'),\n  isMac: navigator.appVersion.indexOf('Mac') !== -1,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "browserDetection",
          "declaration": {
            "name": "browserDetection",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/browserDetection.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/closestPolyfill.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/closestPolyfill.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/DelegateMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "DelegateMixin",
          "type": {
            "text": "typeof import(\"../types/DelegateMixinTypes\").DelegateMixinImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DelegateMixin",
          "declaration": {
            "name": "DelegateMixin",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/DelegateMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/DelegateMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "DelegateMixin",
          "members": [
            {
              "kind": "field",
              "name": "delegations",
              "return": {
                "type": {
                  "text": "{target: Function, events: string[], methods: string[], properties: string[], attributes: string[]}"
                }
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventHandlerNonNull"
                  }
                },
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setAttribute",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeAttribute",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_connectDelegateMixin",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "__setupPropertyDelegation",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__initialAttributeDelegation",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__emptyEventListenerQueue",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__emptyPropertiesQueue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__eventsQueue",
              "type": {
                "text": "DelegateEvent[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "__propertiesQueue",
              "type": {
                "text": "Object.<string,?>"
              },
              "privacy": "private",
              "default": "{}"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "DelegateMixin"
          },
          "mixins": [
            {
              "name": "dedupeMixin",
              "package": "@open-wc/dedupe-mixin"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DelegateMixin",
          "declaration": {
            "name": "DelegateMixin",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/DelegateMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/differentKeyEventNamesShimIE.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/differentKeyEventNamesShimIE.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "DisabledMixin",
          "type": {
            "text": "typeof import(\"../types/DisabledMixinTypes\").DisabledMixinImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DisabledMixin",
          "declaration": {
            "name": "DisabledMixin",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "DisabledMixin",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "static": true
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled"
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled"
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "DisabledMixin"
          },
          "mixins": [
            {
              "name": "dedupeMixin",
              "package": "@open-wc/dedupe-mixin"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DisabledMixin",
          "declaration": {
            "name": "DisabledMixin",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/DisabledWithTabIndexMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "DisabledWithTabIndexMixin",
          "type": {
            "text": "typeof import(\"../types/DisabledWithTabIndexMixinTypes.js\").DisabledWithTabIndexMixinImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DisabledWithTabIndexMixin",
          "declaration": {
            "name": "DisabledWithTabIndexMixin",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledWithTabIndexMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/DisabledWithTabIndexMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "DisabledWithTabIndexMixin",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetTabIndex",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "__isUserSettingTabIndex",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "__restoreTabIndexTo",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
            },
            {
              "name": "dedupeMixin",
              "package": "@open-wc/dedupe-mixin"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "DisabledWithTabIndexMixin"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DisabledWithTabIndexMixin",
          "declaration": {
            "name": "DisabledWithTabIndexMixin",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledWithTabIndexMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/EventTargetShim.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventTargetShim",
          "members": [
            {
              "kind": "field",
              "name": "addEventListener",
              "type": {
                "text": "(type: string, listener: EventListener, opts?: Object | undefined) => void"
              }
            },
            {
              "kind": "field",
              "name": "removeEventListener",
              "type": {
                "text": "(type: string, listener: EventListener, opts?: Object | undefined) => void"
              }
            },
            {
              "kind": "field",
              "name": "dispatchEvent",
              "type": {
                "text": "(event: Event | CustomEvent) => boolean"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EventTargetShim",
          "declaration": {
            "name": "EventTargetShim",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/EventTargetShim.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/EventTargetShim.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventTargetShim",
          "members": [
            {
              "kind": "field",
              "name": "addEventListener",
              "default": "delegatedAddEventListener"
            },
            {
              "kind": "field",
              "name": "removeEventListener",
              "default": "delegatedRemoveEventListener"
            },
            {
              "kind": "field",
              "name": "dispatchEvent",
              "default": "delegatedDispatchEvent"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EventTargetShim",
          "declaration": {
            "name": "EventTargetShim",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/EventTargetShim.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "SlotMixin",
          "type": {
            "text": "typeof import(\"../types/SlotMixinTypes\").SlotMixinImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SlotMixin",
          "declaration": {
            "name": "SlotMixin",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "SlotMixin",
          "members": [
            {
              "kind": "field",
              "name": "slots",
              "return": {
                "type": {
                  "text": "SlotsMap"
                }
              }
            },
            {
              "kind": "method",
              "name": "__renderAsNodes",
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "parameters": [
                {
                  "name": "slotName",
                  "description": "Name of the slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "__privateSlots",
              "privacy": "private",
              "default": "new Set(null)"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "SlotMixin"
          },
          "mixins": [
            {
              "name": "dedupeMixin",
              "package": "@open-wc/dedupe-mixin"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SlotMixin",
          "declaration": {
            "name": "SlotMixin",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/UpdateStylesMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "UpdateStylesMixin",
          "type": {
            "text": "typeof import(\"../types/UpdateStylesMixinTypes\").UpdateStylesMixinImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UpdateStylesMixin",
          "declaration": {
            "name": "UpdateStylesMixin",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/UpdateStylesMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/src/UpdateStylesMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "UpdateStylesMixin",
          "members": [
            {
              "kind": "method",
              "name": "updateStyles",
              "parameters": [
                {
                  "name": "updateStyles",
                  "type": {
                    "text": "StylesMap"
                  }
                }
              ]
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<HTMLElement>"
              }
            }
          ],
          "type": {
            "text": "UpdateStylesMixin"
          },
          "mixins": [
            {
              "name": "dedupeMixin",
              "package": "@open-wc/dedupe-mixin"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UpdateStylesMixin",
          "declaration": {
            "name": "UpdateStylesMixin",
            "module": "packages/atom-listbox/node_modules/@lion/core/src/UpdateStylesMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/test/DelegateMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/test/DisabledMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/test/DisabledWithTabIndexMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/test/EventTargetShim.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/test/SlotMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/test/UpdateStylesMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/test-helpers/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./keyboardEventShimIE.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/test-helpers/keyboardEventShimIE.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/types/DelegateMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DelegateHost",
          "members": [
            {
              "kind": "field",
              "name": "delegations",
              "type": {
                "text": "Delegations"
              }
            },
            {
              "kind": "method",
              "name": "_connectDelegateMixin",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__setupPropertyDelegation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__initialAttributeDelegation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__emptyEventListenerQueue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__emptyPropertiesQueue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DelegateHost",
          "declaration": {
            "name": "DelegateHost",
            "module": "packages/atom-listbox/node_modules/@lion/core/types/DelegateMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/types/DisabledMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DisabledHost",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Makes request to make the element disabled"
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Retract request to make the element disabled and restore disabled to previous"
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            }
          ]
        },
        {
          "kind": "function",
          "name": "DisabledMixinImplementation",
          "return": {
            "type": {
              "text": "T & Constructor<DisabledHost> & Pick<typeof DisabledHost, keyof typeof DisabledHost>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DisabledHost",
          "declaration": {
            "name": "DisabledHost",
            "module": "packages/atom-listbox/node_modules/@lion/core/types/DisabledMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "DisabledMixinImplementation",
          "declaration": {
            "name": "DisabledMixinImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/core/types/DisabledMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/types/DisabledWithTabIndexMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DisabledWithTabIndexHost",
          "members": [
            {
              "kind": "field",
              "name": "tabIndex",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Makes request to make the element disabled and set the tabindex"
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Retract request to make the element disabled and restore disabled and tabindex to previous"
            },
            {
              "kind": "method",
              "name": "__internalSetTabIndex",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "function",
          "name": "DisabledWithTabIndexMixinImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<DisabledWithTabIndexHost> &\n  Pick<typeof DisabledWithTabIndexHost, keyof typeof DisabledWithTabIndexHost> &\n  Constructor<DisabledHost> &\n  Pick<typeof DisabledHost, keyof typeof DisabledHost> &\n  Pick<typeof LitElement, keyof typeof LitElement>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DisabledWithTabIndexHost",
          "declaration": {
            "name": "DisabledWithTabIndexHost",
            "module": "packages/atom-listbox/node_modules/@lion/core/types/DisabledWithTabIndexMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "DisabledWithTabIndexMixinImplementation",
          "declaration": {
            "name": "DisabledWithTabIndexMixinImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/core/types/DisabledWithTabIndexMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/types/SlotMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlotHost",
          "members": [
            {
              "kind": "field",
              "name": "slots",
              "type": {
                "text": "SlotsMap"
              },
              "privacy": "public",
              "description": "Obtains all the slots to create"
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Starts the creation of slots"
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  },
                  "description": "Name of the slot"
                }
              ],
              "description": "Useful to decide if a given slot should be manipulated depending on if it was auto generated\nor not."
            }
          ]
        },
        {
          "kind": "function",
          "name": "SlotMixinImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<SlotHost> &\n  Pick<typeof SlotHost, keyof typeof SlotHost> &\n  Pick<typeof LitElement, keyof typeof LitElement>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ],
          "description": "# SlotMixin\n\n`SlotMixin`, when attached to the DOM it creates content for defined slots in the Light DOM.\nThe content element is created using a factory function and is assigned a slot name from the key.\nExisting slot content is not overridden.\n\nThe purpose is to have the default content in the Light DOM rather than hidden in Shadow DOM\nlike default slot content works natively."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SlotHost",
          "declaration": {
            "name": "SlotHost",
            "module": "packages/atom-listbox/node_modules/@lion/core/types/SlotMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "SlotMixinImplementation",
          "declaration": {
            "name": "SlotMixinImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/core/types/SlotMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/core/types/UpdateStylesMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UpdateStylesHost",
          "members": [
            {
              "kind": "method",
              "name": "updateStyles",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "updateStyles",
                  "type": {
                    "text": "StylesMap"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UpdateStylesHost",
          "declaration": {
            "name": "UpdateStylesHost",
            "module": "packages/atom-listbox/node_modules/@lion/core/types/UpdateStylesMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FocusMixin",
          "type": {
            "text": "typeof import(\"../types/FocusMixinTypes\").FocusImplementation"
          },
          "description": "For browsers that not support the [spec](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible),\nbe sure to load the polyfill into your application https://github.com/WICG/focus-visible\n(or go for progressive enhancement)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FocusMixin",
          "declaration": {
            "name": "FocusMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "FocusMixin",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Calls `focus()` on focusable element within"
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Calls `blur()` on focusable element within"
            },
            {
              "kind": "field",
              "name": "_focusableNode",
              "description": "The focusable element:\ncould be an input, textarea, select, button or any other element with tabindex > -1",
              "privacy": "protected",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "method",
              "name": "__onFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__onBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__registerEventsForFocusMixin",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__teardownEventsForFocusMixin",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) is focused.\nReflects to attribute '[focused]' as a styling hook",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "focusedVisible",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) matches ':focus-visible'\nReflects to attribute '[focused-visible]' as a styling hook\nSee: https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible",
              "default": "false"
            }
          ],
          "events": [
            {
              "name": "focus",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "blur",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "focusin",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "focusout",
              "type": {
                "text": "Event"
              }
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "FocusMixin"
          },
          "mixins": [
            {
              "name": "dedupeMixin",
              "package": "@lion/core"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FocusMixin",
          "declaration": {
            "name": "FocusMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FormatMixin",
          "type": {
            "text": "typeof import(\"../types/FormatMixinTypes.js\").FormatImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormatMixin",
          "declaration": {
            "name": "FormatMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "FormatMixin",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldVal",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The view value. Will be delegated to `._inputNode.value`",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "preprocessor",
              "parameters": [
                {
                  "name": "v",
                  "description": "the raw value from the <input> after keyUp/Down event",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Preprocesses the viewValue before it's parsed to a modelValue. Can be used to filter\ninvalid input amongst others.",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "parser",
              "parameters": [
                {
                  "name": "v",
                  "description": "viewValue: the formatted value inside <input>",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "FormatOptions"
                  }
                }
              ],
              "description": "Converts viewValue to modelValue\nFor instance, a localized date to a Date Object",
              "return": {
                "type": {
                  "text": "*"
                }
              }
            },
            {
              "kind": "method",
              "name": "formatter",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "FormatOptions"
                  }
                }
              ],
              "description": "Converts modelValue to formattedValue (formattedValue will be synced with\n`._inputNode.value`)\nFor instance, a Date object to a localized date.",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "serializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.modelValue` to `.serializedValue`\nFor instance, a Date object to an iso formatted date string",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "deserializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.serializedValue` to `.modelValue`\nFor instance, an iso formatted date string to a Date object",
              "return": {
                "type": {
                  "text": "?"
                }
              }
            },
            {
              "kind": "method",
              "name": "_calculateValues",
              "parameters": [
                {
                  "name": "{ source }",
                  "default": "{ source: null }"
                },
                {
                  "description": "the type of value that triggered this method. It should not be\nset again, so that its observer won't be triggered. Can be:\n'model'|'formatted'|'serialized'.",
                  "name": "config",
                  "type": {
                    "text": "{source:'model'|'serialized'|'formatted'|null}"
                  }
                }
              ],
              "description": "Responsible for storing all representations(modelValue, serializedValue, formattedValue\nand value) of the input value. Prevents infinite loops, so all value observers can be\ntreated like they will only be called once, without indirectly calling other observers.\n(in fact, some are called twice, but the __preventRecursiveTrigger lock prevents the\nsecond call from having effect).",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_callParser",
              "parameters": [
                {
                  "name": "value",
                  "default": "this.formattedValue",
                  "type": {
                    "text": "string|undefined"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_callFormatter",
              "return": {
                "type": {
                  "text": "string|undefined"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onModelValueChanged",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "{ modelValue: unknown; }[]"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_dispatchModelValueChangedEvent",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "{ modelValue: unknown; }[]"
                  }
                }
              ],
              "description": "This is wrapped in a distinct method, so that parents can control when the changed event\nis fired. For objects, a deep comparison might be needed.",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_syncValueUpwards",
              "description": "Synchronization from `._inputNode.value` to `LionField` (flow [2])\nDownwards syncing should only happen for `LionField`.value changes from 'above'.\nThis triggers _onModelValueChanged and connects user input\nto the parsing/formatting/serializing loop.",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_reflectBackFormattedValueToUser",
              "description": "Synchronization from `LionField.value` to `._inputNode.value`\n- flow [1] will always be reflected back\n- flow [2] will not be reflected back when this flow was triggered via\n  `@user-input-changed` (this will happen later, when `formatOn` condition is met)",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_reflectBackOn",
              "description": "Every time .formattedValue is attempted to sync to the view value (on change/blur and on\nmodelValue change), this condition is checked. When enhancing it, it's recommended to\ncall `super._reflectBackOn()`",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_proxyInputEvent",
              "description": "This can be called whenever the view value should be updated. Dependent on component type\n(\"input\" for <input> or \"change\" for <select>(mainly for IE)) a different event should be\nused  as source for the \"user-input-changed\" event (which can be seen as an abstraction\nlayer on top of other events (input, change, whatever))",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_onUserInputChanged",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "__onCompositionEvent",
              "parameters": [
                {
                  "name": "{ type }"
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__onPaste"
            },
            {
              "kind": "field",
              "name": "formatOn",
              "type": {
                "text": "string"
              },
              "description": "Event that will trigger formatting (more precise, visual update of the view, so the\nuser sees the formatted value)\nDefault: 'change'",
              "privacy": "protected",
              "default": "'change'"
            },
            {
              "kind": "field",
              "name": "formatOptions",
              "description": "Configuration object that will be available inside the formatter function",
              "default": "({})"
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "description": "The view value is the result of the formatter function (when available).\nThe result will be stored in the native _inputNode (usually an input[type=text]).\n\nExamples:\n- For a date input, this would be '20/01/1999' (dependent on locale).\n- For a number input, this could be '1,234.56' (a String representation of modelValue\n1234.56)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "description": "The serialized version of the model value.\nThis value exists for maximal compatibility with the platform API.\nThe serialized value can be an interface in context where data binding is not\nsupported and a serialized string needs to be set.\n\nExamples:\n- For a date input, this would be the iso format of a date, e.g. '1999-01-20'.\n- For a number input this would be the String representation of a float ('1234.56'\n  instead of 1234.56)\n\nWhen no parser is available, the value is usually the same as the formattedValue\n(being _inputNode.value)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_isPasting",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the user is pasting content. Allows Subclassers to do this in their subclass:",
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_isHandlingUserInput",
              "type": {
                "text": "boolean"
              },
              "description": "Flag that will be set when user interaction takes place (for instance after an 'input'\nevent). Will be added as meta info to the `model-value-changed` event. Depending on\nwhether a user is interacting, formatting logic will be handled differently.",
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "__prevViewValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_reflectBackFormattedValueDebounced",
              "privacy": "private",
              "default": "() => {\n        // Make sure this is fired after the change event of _inputNode, so that formattedValue\n        // is guaranteed to be calculated\n        setTimeout(this._reflectBackFormattedValueToUser);\n      }"
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "description": "Obtains the scoped elements definitions map if specified.",
              "return": {
                "type": {
                  "text": "ScopedElementsMap"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationTypes",
              "static": true,
              "description": "Types of validation supported by this FormControl (for instance 'error'|'warning'|'info')",
              "type": {
                "text": "ValidationType[]"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "slots",
              "return": {
                "type": {
                  "text": "SlotsMap"
                }
              },
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_allValidators",
              "description": "Combination of validators provided by Application Developer and the default validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "description": "Empty pending queue in order to guarantee order independence",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updateSync",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "An abstraction that has the exact same api as `requestUpdate`, but taking\ninto account:\n- [member order independence](https://github.com/webcomponents/gold-standard/wiki/Member-Order-Independence)\n- property effects start when all (light) dom has initialized (on firstUpdated)\n- property effects don't interrupt the first meaningful paint\n- compatible with propertyAccessor.`hasChanged`: no manual checks needed or accidentally\nrun property effects / events when no change happened\neffects when values didn't change\nAll code previously present in requestUpdate can be placed in this method.",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "parameters": [
                {
                  "name": "{ clearCurrentResult }",
                  "default": "{}"
                },
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "{ clearCurrentResult?: boolean }"
                  }
                }
              ],
              "description": "Triggered by:\n - modelValue change\n - change in the 'validators' array\n-  change in the config of an individual Validator\n\nThree situations are handled:\n- a1) the FormControl is empty: further execution is halted. When the Required Validator\n(being mutually exclusive to the other Validators) is applied, it will end up in the\nvalidation result (as the only Validator, since further execution was halted).\n- a2) there are synchronous Validators: this is the most common flow. When modelValue hasn't\nchanged since last async results were generated, 'sync results' are merged with the\n'async results'.\n- a3) there are asynchronous Validators: for instance when server side evaluation is needed.\nExecutions are scheduled and awaited and the 'async results' are merged with the\n'sync results'.\n\n- b) there are ResultValidators. After steps a1, a2, or a3 are finished, the holistic\nResultValidators (evaluating the total result of the 'regular' (a1, a2 and a3) validators)\nwill be run...\n\nSituations a2 and a3 are not mutually exclusive and can be triggered within one `validate()`\ncall. Situation b will occur after every call.",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeValidators",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeSyncValidators",
              "parameters": [
                {
                  "name": "syncValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "{ hasAsync }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ hasAsync: boolean }"
                  }
                }
              ],
              "description": "step a2 (as explained in `validate()`): calls `__finishValidation`",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeAsyncValidators",
              "parameters": [
                {
                  "name": "asyncValidators",
                  "description": "all Validators except required and ResultValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "step a3 (as explained in `validate()`), calls __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeResultValidators",
              "parameters": [
                {
                  "name": "regularValidationResult",
                  "description": "result of steps 1-3",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "description": "step b (as explained in `validate()`), called by __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__finishValidation",
              "parameters": [
                {
                  "name": "{ source, hasAsync }"
                },
                {
                  "name": "options",
                  "type": {
                    "text": "@param {'sync'|'async'} options.source\n     * @param {boolean} [options.hasAsync] whether async validators are configured in this run.\n     * "
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__clearValidationResults",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onValidatorUpdated",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event|CustomEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__isEmpty",
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Helper method for the mutually exclusive Required Validator",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getFeedbackMessages",
              "parameters": [
                {
                  "name": "validators",
                  "description": "list of objects having a .getMessage method",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise.<FeedbackMessage[]>"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateFeedbackComponent",
              "description": "Responsible for retrieving messages from Validators and\n(delegation of) rendering them.\n\nFor `._feedbackNode` (extension of LionValidationFeedback):\n- retrieve messages from highest prio Validators\n- provide the result to custom feedback node and let the\ncustom node decide on their renderings\n\nIn both cases:\n- we compute the 'show' flag (like 'hasErrorVisible') for all types\n- we set the customValidity message of the highest prio Validator\n- we set aria-invalid=\"true\" in case hasErrorVisible is true",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_showFeedbackConditionFor",
              "parameters": [
                {
                  "name": "type",
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "description": "meta info (interaction states etc)",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "Default feedbackCondition condition, used by Subclassers, that will be used when\n`feedbackCondition()` is not overridden by Application Developer.\nShow the validity feedback when returning true, don't show when false",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackConditionMeta",
              "description": "Allows Subclassers to add meta info for feedbackCondition",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "feedbackCondition",
              "parameters": [
                {
                  "name": "type",
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "default": "this._feedbackConditionMeta",
                  "description": "meta info (interaction states etc)",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "name": "currentCondition",
                  "default": "this._showFeedbackConditionFor.bind(this)",
                  "description": "this is the _showFeedbackConditionFor\nthat can be used if a developer wants to override for a certain type, but wants to fallback\nfor other types",
                  "type": {
                    "text": "((type: string, meta: object) => boolean)"
                  }
                }
              ],
              "description": "Allows the end user to specify when a feedback message should be shown",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_hasFeedbackVisibleFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Used to translate `.hasFeedbackFor` and `.shouldShowFeedbackFor` to `.showsFeedbackFor`",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateShouldShowFeedbackFor",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_prioritizeAndFilterFeedback",
              "parameters": [
                {
                  "name": "{ validationResult }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ validationResult: Validator[] }"
                  }
                }
              ],
              "description": "Orders all active validators in this.__validationResult. Can\nalso filter out occurrences (based on interaction states)",
              "return": {
                "type": {
                  "text": "Validator[]"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "hasFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "As soon as validation happens (after modelValue/validators/validator param change), this\narray is updated with the active ValidationTypes ('error'|'warning'|'success'|'info' etc.).\nNotice the difference with `.showsFeedbackFor`, which filters `.hasFeedbackFor` based on\n`.feedbackCondition()`.\n\nFor styling purposes, will be reflected to [has-feedback-for=\"error warning\"]. This can\nbe useful for subtle visual feedback on keyup, like a red/green border around an input.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "showsFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "Based on outcome of feedbackCondition, this array decides what ValidationTypes should be\nshown in validationFeedback, based on meta data like interaction states.\n\nFor styling purposes, it reflects it `[shows-feedback-for=\"error warning\"]`",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shouldShowFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "A temporary storage to transition from hasFeedbackFor to showsFeedbackFor",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationStates",
              "type": {
                "text": "Object.<string, Object.<string, boolean>>"
              },
              "description": "The outcome of a validation 'round'. Keyed by ValidationType and Validator name",
              "default": "{}",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "isPending",
              "type": {
                "text": "boolean"
              },
              "description": "Flag indicating whether async validation is pending.\nCreates attribute [is-pending] as a styling hook",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Application Developers to add Validators to a FormControl.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "defaultValidators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Subclassers to add default Validators to a particular FormControl.\nA date input for instance, always needs the isDate validator.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_visibleMessagesAmount",
              "type": {
                "text": "number"
              },
              "description": "The amount of feedback messages that will visible in LionValidationFeedback",
              "privacy": "protected",
              "default": "1",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__syncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__asyncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__validationResult",
              "type": {
                "text": "Validator[]"
              },
              "description": "Aggregated result from sync Validators, async Validators and ResultValidators",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevShownValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__childModelValueChanged",
              "type": {
                "text": "boolean"
              },
              "description": "The updated children validity affects the validity of the parent. Helper to recompute\nvalidatity of parent FormGroup",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The label text for the input node.\nWhen no value is defined, textContent of [slot=label] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "description": "The helpt text for the input node.\nWhen no value is defined, textContent of [slot=help-text] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "fieldName",
              "description": "Will be used in validation messages to refer to the current field",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "description": "The interactive (form) element. Can be a native element like input/textarea/select or\nan element with tabindex > -1",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_labelNode",
              "description": "Element where label will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_helpTextNode",
              "description": "Element where help text will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackNode",
              "description": "Element where validation feedback will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11y",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11yForAdditionalSlots",
              "parameters": [
                {
                  "name": "additionalSlots",
                  "default": "['prefix', 'suffix', 'before', 'after']",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Enhances additional slots(prefix, suffix, before, after) defined by developer.\n\nWhen boolean attribute data-label or data-description is found,\nthe slot element will be connected to the input via aria-labelledby or aria-describedby",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__reflectAriaAttr",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "reorder",
                  "type": {
                    "text": "boolean|undefined"
                  }
                }
              ],
              "description": "Will handle help text, validation feedback and character counter,\nprefix/suffix/before/after (if they contain data-description flag attr).\nAlso, contents of id references that will be put in the <lion-field>._ariaDescribedby property\nfrom an external context, will be read by a screen reader.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Default Render Result:\n<div class=\"form-field__group-one\">\n  <div class=\"form-field__label\">\n    <slot name=\"label\"></slot>\n  </div>\n  <small class=\"form-field__help-text\">\n    <slot name=\"help-text\"></slot>\n  </small>\n</div>\n<div class=\"form-field__group-two\">\n  <div class=\"input-group\">\n    <div class=\"input-group__before\">\n      <slot name=\"before\"></slot>\n    </div>\n    <div class=\"input-group__container\">\n      <div class=\"input-group__prefix\">\n        <slot name=\"prefix\"></slot>\n      </div>\n      <div class=\"input-group__input\">\n        <slot name=\"input\"></slot>\n      </div>\n      <div class=\"input-group__suffix\">\n        <slot name=\"suffix\"></slot>\n      </div>\n    </div>\n    <div class=\"input-group__after\">\n      <slot name=\"after\"></slot>\n    </div>\n  </div>\n  <div class=\"form-field__feedback\">\n    <slot name=\"feedback\"></slot>\n  </div>\n</div>",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupOneTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupTwoTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_helpTextTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupBeforeTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupPrefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupSuffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupAfterTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_feedbackTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "parameters": [
                {
                  "name": "modelValue",
                  "default": "(this).modelValue",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Used for Required validation and computation of interaction states",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "{block} .input-group\n\nStructure:\n- {element} .input-group__before (optional) : a prefix that resides outside the container\n- {element} .input-group__container : an inner container: this element contains all styling\n - {element} .input-group__prefix (optional) : a prefix that resides in the container,\n              allowing it to be detectable as a :first-child\n - {element} .input-group__input : a wrapper around the form-control component\n  - {block} .form-control : the actual input element (input/select/textarea)\n - {element} .input-group__suffix (optional) : a suffix that resides inside the container,\n              allowing it to be detectable as a :last-child\n - {element} .input-group__bottom (optional) : placeholder element for additional styling\n              (like an animated line for material design input)\n- {element} .input-group__after (optional) :  a suffix that resides outside the container",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getAriaDescriptionElements",
              "description": "This function exposes descripion elements that a FormGroup should expose to its\nchildren. See FormGroupMixin.__getAllDescriptionElementsInParentChain()",
              "return": {
                "type": {
                  "text": "Array.<HTMLElement>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add element references to aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getDirectSlotChild",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchInitialModelValueChangedEvent",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to add logic before repropagation",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__repropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_repropagationCondition",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "description": "Based on provided target, this condition determines whether received model-value-changed\nevent should be repropagated",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onLabelClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the element will be registered with to the .formElements collection\nof the parent. Also, it serves as the key of key/value pairs in\n modelValue/serializedValue objects",
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "A Boolean attribute which, if present, indicates that the user should not be able to edit\nthe value of the input. The difference between disabled and readonly is that read-only\ncontrols can still function, whereas disabled controls generally do not function as\ncontrols until they are enabled.\n(From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputId",
              "description": "Unique id that can be used in all light dom",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaLabelledNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-labelledby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaDescribedNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-describedby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_repropagationRole",
              "type": {
                "text": "'child'|'choice-group'|'fieldset'"
              },
              "description": "Based on the role, details of handling model-value-changed repropagation differ.",
              "default": "'child'",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isRepropagationEndpoint",
              "type": {
                "text": "boolean"
              },
              "description": "By default, a field with _repropagationRole 'choice-group' will act as an\n'endpoint'. This means it will be considered as an individual field: for\na select, individual options will not be part of the formPath. They\nwill.\nSimilarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n(from Application Developer perspective) need to be more like fields\n(think of an amount-input with a currency select box next to it), can set this\nto true to hide private internals in the formPath.",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableHasChanged",
              "static": true,
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Makes the propertyAccessor.`hasChanged` compatible in synchronous updates",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableInitialize",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__SyncUpdatableNamespace",
              "type": {
                "text": "SyncUpdatableNamespace"
              },
              "description": "Namespace for this mixin that guarantees naming clashes will not occur...",
              "default": "{}",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__renderAsNodes",
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "parameters": [
                {
                  "name": "slotName",
                  "description": "Name of the slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__privateSlots",
              "privacy": "private",
              "default": "new Set(null)",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "static": true,
              "description": "Obtains the ShadowRoot options.",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "ShadowRootInit"
                  }
                }
              ],
              "type": {
                "text": "ShadowRootInit"
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "static": true,
              "description": "Obtains the element styles.",
              "return": {
                "type": {
                  "text": "CSSResultFlatArray"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registry",
              "description": "Set the CustomElementRegistry associated to the ShadowRoot",
              "return": {
                "type": {
                  "text": "CustomElementRegistry"
                }
              },
              "parameters": [
                {
                  "name": "registry",
                  "type": {
                    "text": "CustomElementRegistry"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "defineScopedElement",
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "klass",
                  "type": {
                    "text": "typeof HTMLElement"
                  }
                }
              ],
              "description": "Defines a scoped element.",
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "getScopedTagName",
              "static": true,
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            }
          ],
          "events": [
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "user-input-changed",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "showsFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "shouldShowFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "validate-performed",
              "type": {
                "text": "Event"
              },
              "description": "private event that should be listened to by LionFieldSet",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "form-element-name-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "ValidateMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
            },
            {
              "name": "FormControlMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
            },
            {
              "name": "dedupeMixin",
              "package": "@lion/core"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "FormatMixin"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormatMixin",
          "declaration": {
            "name": "FormatMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FormControlMixin",
          "type": {
            "text": "typeof import(\"../types/FormControlMixinTypes.js\").FormControlImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormControlMixin",
          "declaration": {
            "name": "FormControlMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "#FormControlMixin :\n\nThis Mixin is a shared fundament for all form components, it's applied on:\n- LionField (which is extended to LionInput, LionTextarea, LionSelect etc. etc.)\n- LionFieldset (which is extended to LionRadioGroup, LionCheckboxGroup, LionForm)",
          "name": "FormControlMixin",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The label text for the input node.\nWhen no value is defined, textContent of [slot=label] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''"
            },
            {
              "kind": "field",
              "name": "helpText",
              "description": "The helpt text for the input node.\nWhen no value is defined, textContent of [slot=help-text] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''"
            },
            {
              "kind": "field",
              "name": "fieldName",
              "description": "Will be used in validation messages to refer to the current field",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "slots",
              "return": {
                "type": {
                  "text": "SlotsMap"
                }
              },
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "description": "The interactive (form) element. Can be a native element like input/textarea/select or\nan element with tabindex > -1",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_labelNode",
              "description": "Element where label will be rendered to",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_helpTextNode",
              "description": "Element where help text will be rendered to",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_feedbackNode",
              "description": "Element where validation feedback will be rendered to",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomClasses",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11y",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11yForAdditionalSlots",
              "parameters": [
                {
                  "name": "additionalSlots",
                  "default": "['prefix', 'suffix', 'before', 'after']",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Enhances additional slots(prefix, suffix, before, after) defined by developer.\n\nWhen boolean attribute data-label or data-description is found,\nthe slot element will be connected to the input via aria-labelledby or aria-describedby",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "__reflectAriaAttr",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "reorder",
                  "type": {
                    "text": "boolean|undefined"
                  }
                }
              ],
              "description": "Will handle help text, validation feedback and character counter,\nprefix/suffix/before/after (if they contain data-description flag attr).\nAlso, contents of id references that will be put in the <lion-field>._ariaDescribedby property\nfrom an external context, will be read by a screen reader."
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Default Render Result:\n<div class=\"form-field__group-one\">\n  <div class=\"form-field__label\">\n    <slot name=\"label\"></slot>\n  </div>\n  <small class=\"form-field__help-text\">\n    <slot name=\"help-text\"></slot>\n  </small>\n</div>\n<div class=\"form-field__group-two\">\n  <div class=\"input-group\">\n    <div class=\"input-group__before\">\n      <slot name=\"before\"></slot>\n    </div>\n    <div class=\"input-group__container\">\n      <div class=\"input-group__prefix\">\n        <slot name=\"prefix\"></slot>\n      </div>\n      <div class=\"input-group__input\">\n        <slot name=\"input\"></slot>\n      </div>\n      <div class=\"input-group__suffix\">\n        <slot name=\"suffix\"></slot>\n      </div>\n    </div>\n    <div class=\"input-group__after\">\n      <slot name=\"after\"></slot>\n    </div>\n  </div>\n  <div class=\"form-field__feedback\">\n    <slot name=\"feedback\"></slot>\n  </div>\n</div>"
            },
            {
              "kind": "method",
              "name": "_groupOneTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_groupTwoTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_helpTextTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_inputGroupTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_inputGroupBeforeTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_inputGroupPrefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_inputGroupSuffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_inputGroupAfterTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_feedbackTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "parameters": [
                {
                  "name": "modelValue",
                  "default": "(this).modelValue",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Used for Required validation and computation of interaction states",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "{block} .input-group\n\nStructure:\n- {element} .input-group__before (optional) : a prefix that resides outside the container\n- {element} .input-group__container : an inner container: this element contains all styling\n - {element} .input-group__prefix (optional) : a prefix that resides in the container,\n              allowing it to be detectable as a :first-child\n - {element} .input-group__input : a wrapper around the form-control component\n  - {block} .form-control : the actual input element (input/select/textarea)\n - {element} .input-group__suffix (optional) : a suffix that resides inside the container,\n              allowing it to be detectable as a :last-child\n - {element} .input-group__bottom (optional) : placeholder element for additional styling\n              (like an animated line for material design input)\n- {element} .input-group__after (optional) :  a suffix that resides outside the container"
            },
            {
              "kind": "method",
              "name": "_getAriaDescriptionElements",
              "description": "This function exposes descripion elements that a FormGroup should expose to its\nchildren. See FormGroupMixin.__getAllDescriptionElementsInParentChain()",
              "return": {
                "type": {
                  "text": "Array.<HTMLElement>"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "addToAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-labelledby attribute."
            },
            {
              "kind": "method",
              "name": "removeFromAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-labelledby attribute."
            },
            {
              "kind": "method",
              "name": "addToAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add element references to aria-describedby attribute."
            },
            {
              "kind": "method",
              "name": "removeFromAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-describedby attribute."
            },
            {
              "kind": "method",
              "name": "__getDirectSlotChild",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              }
            },
            {
              "kind": "method",
              "name": "_dispatchInitialModelValueChangedEvent"
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to add logic before repropagation",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "__repropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_repropagationCondition",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "description": "Based on provided target, this condition determines whether received model-value-changed\nevent should be repropagated",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_onLabelClick",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the element will be registered with to the .formElements collection\nof the parent. Also, it serves as the key of key/value pairs in\n modelValue/serializedValue objects",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "A Boolean attribute which, if present, indicates that the user should not be able to edit\nthe value of the input. The difference between disabled and readonly is that read-only\ncontrols can still function, whereas disabled controls generally do not function as\ncontrols until they are enabled.\n(From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_inputId",
              "description": "Unique id that can be used in all light dom",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_ariaLabelledNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-labelledby of `._inputNode`",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_ariaDescribedNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-describedby of `._inputNode`",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_repropagationRole",
              "type": {
                "text": "'child'|'choice-group'|'fieldset'"
              },
              "description": "Based on the role, details of handling model-value-changed repropagation differ.",
              "default": "'child'"
            },
            {
              "kind": "field",
              "name": "_isRepropagationEndpoint",
              "type": {
                "text": "boolean"
              },
              "description": "By default, a field with _repropagationRole 'choice-group' will act as an\n'endpoint'. This means it will be considered as an individual field: for\na select, individual options will not be part of the formPath. They\nwill.\nSimilarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n(from Application Developer perspective) need to be more like fields\n(think of an amount-input with a currency select box next to it), can set this\nto true to hide private internals in the formPath.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__renderAsNodes",
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "parameters": [
                {
                  "name": "slotName",
                  "description": "Name of the slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__privateSlots",
              "privacy": "private",
              "default": "new Set(null)",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            }
          ],
          "events": [
            {
              "name": "form-element-name-changed",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormRegisteringMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
            },
            {
              "name": "DisabledMixin",
              "package": "@lion/core"
            },
            {
              "name": "SlotMixin",
              "package": "@lion/core"
            },
            {
              "name": "dedupeMixin",
              "package": "@lion/core"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "FormControlMixin"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormControlMixin",
          "declaration": {
            "name": "FormControlMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "InteractionStateMixin",
          "type": {
            "text": "typeof import(\"../types/InteractionStateMixinTypes.js\").InteractionStateImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InteractionStateMixin",
          "declaration": {
            "name": "InteractionStateMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "InteractionStateMixin",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldVal",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "initInteractionState",
              "description": "Evaluations performed on connectedCallback.\nThis method is public, so it can be called at a later moment (when we need to wait for\nregistering children for instance) as well.\nSince this method will be called twice in last mentioned scenario, it must stay idempotent."
            },
            {
              "kind": "method",
              "name": "_iStateOnLeave",
              "description": "Sets touched value to true and reevaluates prefilled state.\nWhen false, on next interaction, user will start with a clean state.",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_iStateOnValueChange",
              "description": "Sets dirty value and validates when already touched or invalid",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "resetInteractionState",
              "description": "Resets touched and dirty, and recomputes prefilled"
            },
            {
              "kind": "method",
              "name": "_onTouchedChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_onDirtyChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_showFeedbackConditionFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "type": {
                    "text": "InteractionStates"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_feedbackConditionMeta"
            },
            {
              "kind": "field",
              "name": "touched",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has focused and left(blurred) the field.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "dirty",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has changed the value of the field.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "prefilled",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has left non-empty field or input is prefilled.\nThe name must be seen from the point of view of the input field:\nonce the user enters the input field, the value is non-empty.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "description": "True when the modelValue is non-empty (see _isEmpty in FormControlMixin)",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_leaveEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the touched state",
              "privacy": "protected",
              "default": "'blur'"
            },
            {
              "kind": "field",
              "name": "_valueChangedEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the dirty state",
              "privacy": "protected",
              "default": "'model-value-changed'"
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The label text for the input node.\nWhen no value is defined, textContent of [slot=label] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "description": "The helpt text for the input node.\nWhen no value is defined, textContent of [slot=help-text] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "fieldName",
              "description": "Will be used in validation messages to refer to the current field",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "slots",
              "return": {
                "type": {
                  "text": "SlotsMap"
                }
              },
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "description": "The interactive (form) element. Can be a native element like input/textarea/select or\nan element with tabindex > -1",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_labelNode",
              "description": "Element where label will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_helpTextNode",
              "description": "Element where help text will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackNode",
              "description": "Element where validation feedback will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11y",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11yForAdditionalSlots",
              "parameters": [
                {
                  "name": "additionalSlots",
                  "default": "['prefix', 'suffix', 'before', 'after']",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Enhances additional slots(prefix, suffix, before, after) defined by developer.\n\nWhen boolean attribute data-label or data-description is found,\nthe slot element will be connected to the input via aria-labelledby or aria-describedby",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__reflectAriaAttr",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "reorder",
                  "type": {
                    "text": "boolean|undefined"
                  }
                }
              ],
              "description": "Will handle help text, validation feedback and character counter,\nprefix/suffix/before/after (if they contain data-description flag attr).\nAlso, contents of id references that will be put in the <lion-field>._ariaDescribedby property\nfrom an external context, will be read by a screen reader.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Default Render Result:\n<div class=\"form-field__group-one\">\n  <div class=\"form-field__label\">\n    <slot name=\"label\"></slot>\n  </div>\n  <small class=\"form-field__help-text\">\n    <slot name=\"help-text\"></slot>\n  </small>\n</div>\n<div class=\"form-field__group-two\">\n  <div class=\"input-group\">\n    <div class=\"input-group__before\">\n      <slot name=\"before\"></slot>\n    </div>\n    <div class=\"input-group__container\">\n      <div class=\"input-group__prefix\">\n        <slot name=\"prefix\"></slot>\n      </div>\n      <div class=\"input-group__input\">\n        <slot name=\"input\"></slot>\n      </div>\n      <div class=\"input-group__suffix\">\n        <slot name=\"suffix\"></slot>\n      </div>\n    </div>\n    <div class=\"input-group__after\">\n      <slot name=\"after\"></slot>\n    </div>\n  </div>\n  <div class=\"form-field__feedback\">\n    <slot name=\"feedback\"></slot>\n  </div>\n</div>",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupOneTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupTwoTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_helpTextTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupBeforeTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupPrefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupSuffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupAfterTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_feedbackTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "parameters": [
                {
                  "name": "modelValue",
                  "default": "(this).modelValue",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Used for Required validation and computation of interaction states",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "{block} .input-group\n\nStructure:\n- {element} .input-group__before (optional) : a prefix that resides outside the container\n- {element} .input-group__container : an inner container: this element contains all styling\n - {element} .input-group__prefix (optional) : a prefix that resides in the container,\n              allowing it to be detectable as a :first-child\n - {element} .input-group__input : a wrapper around the form-control component\n  - {block} .form-control : the actual input element (input/select/textarea)\n - {element} .input-group__suffix (optional) : a suffix that resides inside the container,\n              allowing it to be detectable as a :last-child\n - {element} .input-group__bottom (optional) : placeholder element for additional styling\n              (like an animated line for material design input)\n- {element} .input-group__after (optional) :  a suffix that resides outside the container",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getAriaDescriptionElements",
              "description": "This function exposes descripion elements that a FormGroup should expose to its\nchildren. See FormGroupMixin.__getAllDescriptionElementsInParentChain()",
              "return": {
                "type": {
                  "text": "Array.<HTMLElement>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add element references to aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getDirectSlotChild",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchInitialModelValueChangedEvent",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to add logic before repropagation",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__repropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_repropagationCondition",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "description": "Based on provided target, this condition determines whether received model-value-changed\nevent should be repropagated",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onLabelClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the element will be registered with to the .formElements collection\nof the parent. Also, it serves as the key of key/value pairs in\n modelValue/serializedValue objects",
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "A Boolean attribute which, if present, indicates that the user should not be able to edit\nthe value of the input. The difference between disabled and readonly is that read-only\ncontrols can still function, whereas disabled controls generally do not function as\ncontrols until they are enabled.\n(From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputId",
              "description": "Unique id that can be used in all light dom",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaLabelledNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-labelledby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaDescribedNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-describedby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_repropagationRole",
              "type": {
                "text": "'child'|'choice-group'|'fieldset'"
              },
              "description": "Based on the role, details of handling model-value-changed repropagation differ.",
              "default": "'child'",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isRepropagationEndpoint",
              "type": {
                "text": "boolean"
              },
              "description": "By default, a field with _repropagationRole 'choice-group' will act as an\n'endpoint'. This means it will be considered as an individual field: for\na select, individual options will not be part of the formPath. They\nwill.\nSimilarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n(from Application Developer perspective) need to be more like fields\n(think of an amount-input with a currency select box next to it), can set this\nto true to hide private internals in the formPath.",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__renderAsNodes",
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "parameters": [
                {
                  "name": "slotName",
                  "description": "Name of the slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__privateSlots",
              "privacy": "private",
              "default": "new Set(null)",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            }
          ],
          "events": [
            {
              "name": "touched-changed",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "dirty-changed",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "form-element-name-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
            },
            {
              "name": "dedupeMixin",
              "package": "@lion/core"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "InteractionStateMixin"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InteractionStateMixin",
          "declaration": {
            "name": "InteractionStateMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/LionField.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "`LionField`: wraps <input>, <textarea>, <select> and other interactable elements.\nAlso it would follow a nice hierarchy: lion-form -> lion-fieldset -> lion-field\n\nNote: We don't support placeholders, because we have a helper text and\nplaceholders confuse the user with accessibility needs.\n\nPlease see the docs for in depth information.",
          "name": "LionField",
          "members": [
            {
              "kind": "field",
              "name": "_initialModelValue",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "_onChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Dispatches custom bubble event"
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resets modelValue to initial value.\nInteraction states are cleared"
            },
            {
              "kind": "method",
              "name": "clear",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Clears modelValue.\nInteraction states are not cleared (use resetInteractionState for this)"
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The label text for the input node.\nWhen no value is defined, textContent of [slot=label] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "description": "The helpt text for the input node.\nWhen no value is defined, textContent of [slot=help-text] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "fieldName",
              "description": "Will be used in validation messages to refer to the current field",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "slots",
              "return": {
                "type": {
                  "text": "SlotsMap"
                }
              },
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "description": "The interactive (form) element. Can be a native element like input/textarea/select or\nan element with tabindex > -1",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_labelNode",
              "description": "Element where label will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_helpTextNode",
              "description": "Element where help text will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackNode",
              "description": "Element where validation feedback will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11y",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11yForAdditionalSlots",
              "parameters": [
                {
                  "name": "additionalSlots",
                  "default": "['prefix', 'suffix', 'before', 'after']",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Enhances additional slots(prefix, suffix, before, after) defined by developer.\n\nWhen boolean attribute data-label or data-description is found,\nthe slot element will be connected to the input via aria-labelledby or aria-describedby",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__reflectAriaAttr",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "reorder",
                  "type": {
                    "text": "boolean|undefined"
                  }
                }
              ],
              "description": "Will handle help text, validation feedback and character counter,\nprefix/suffix/before/after (if they contain data-description flag attr).\nAlso, contents of id references that will be put in the <lion-field>._ariaDescribedby property\nfrom an external context, will be read by a screen reader.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Default Render Result:\n<div class=\"form-field__group-one\">\n  <div class=\"form-field__label\">\n    <slot name=\"label\"></slot>\n  </div>\n  <small class=\"form-field__help-text\">\n    <slot name=\"help-text\"></slot>\n  </small>\n</div>\n<div class=\"form-field__group-two\">\n  <div class=\"input-group\">\n    <div class=\"input-group__before\">\n      <slot name=\"before\"></slot>\n    </div>\n    <div class=\"input-group__container\">\n      <div class=\"input-group__prefix\">\n        <slot name=\"prefix\"></slot>\n      </div>\n      <div class=\"input-group__input\">\n        <slot name=\"input\"></slot>\n      </div>\n      <div class=\"input-group__suffix\">\n        <slot name=\"suffix\"></slot>\n      </div>\n    </div>\n    <div class=\"input-group__after\">\n      <slot name=\"after\"></slot>\n    </div>\n  </div>\n  <div class=\"form-field__feedback\">\n    <slot name=\"feedback\"></slot>\n  </div>\n</div>",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupOneTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupTwoTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_helpTextTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupBeforeTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupPrefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupSuffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupAfterTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_feedbackTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "parameters": [
                {
                  "name": "modelValue",
                  "default": "(this).modelValue",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Used for Required validation and computation of interaction states",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "{block} .input-group\n\nStructure:\n- {element} .input-group__before (optional) : a prefix that resides outside the container\n- {element} .input-group__container : an inner container: this element contains all styling\n - {element} .input-group__prefix (optional) : a prefix that resides in the container,\n              allowing it to be detectable as a :first-child\n - {element} .input-group__input : a wrapper around the form-control component\n  - {block} .form-control : the actual input element (input/select/textarea)\n - {element} .input-group__suffix (optional) : a suffix that resides inside the container,\n              allowing it to be detectable as a :last-child\n - {element} .input-group__bottom (optional) : placeholder element for additional styling\n              (like an animated line for material design input)\n- {element} .input-group__after (optional) :  a suffix that resides outside the container",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getAriaDescriptionElements",
              "description": "This function exposes descripion elements that a FormGroup should expose to its\nchildren. See FormGroupMixin.__getAllDescriptionElementsInParentChain()",
              "return": {
                "type": {
                  "text": "Array.<HTMLElement>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add element references to aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getDirectSlotChild",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchInitialModelValueChangedEvent",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to add logic before repropagation",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__repropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_repropagationCondition",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "description": "Based on provided target, this condition determines whether received model-value-changed\nevent should be repropagated",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onLabelClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the element will be registered with to the .formElements collection\nof the parent. Also, it serves as the key of key/value pairs in\n modelValue/serializedValue objects",
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "A Boolean attribute which, if present, indicates that the user should not be able to edit\nthe value of the input. The difference between disabled and readonly is that read-only\ncontrols can still function, whereas disabled controls generally do not function as\ncontrols until they are enabled.\n(From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputId",
              "description": "Unique id that can be used in all light dom",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaLabelledNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-labelledby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaDescribedNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-describedby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_repropagationRole",
              "type": {
                "text": "'child'|'choice-group'|'fieldset'"
              },
              "description": "Based on the role, details of handling model-value-changed repropagation differ.",
              "default": "'child'",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isRepropagationEndpoint",
              "type": {
                "text": "boolean"
              },
              "description": "By default, a field with _repropagationRole 'choice-group' will act as an\n'endpoint'. This means it will be considered as an individual field: for\na select, individual options will not be part of the formPath. They\nwill.\nSimilarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n(from Application Developer perspective) need to be more like fields\n(think of an amount-input with a currency select box next to it), can set this\nto true to hide private internals in the formPath.",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__renderAsNodes",
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "parameters": [
                {
                  "name": "slotName",
                  "description": "Name of the slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__privateSlots",
              "privacy": "private",
              "default": "new Set(null)",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "initInteractionState",
              "description": "Evaluations performed on connectedCallback.\nThis method is public, so it can be called at a later moment (when we need to wait for\nregistering children for instance) as well.\nSince this method will be called twice in last mentioned scenario, it must stay idempotent.",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_iStateOnLeave",
              "description": "Sets touched value to true and reevaluates prefilled state.\nWhen false, on next interaction, user will start with a clean state.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_iStateOnValueChange",
              "description": "Sets dirty value and validates when already touched or invalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "resetInteractionState",
              "description": "Resets touched and dirty, and recomputes prefilled",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onTouchedChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onDirtyChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_showFeedbackConditionFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "type": {
                    "text": "InteractionStates"
                  }
                }
              ],
              "description": "Default feedbackCondition condition, used by Subclassers, that will be used when\n`feedbackCondition()` is not overridden by Application Developer.\nShow the validity feedback when returning true, don't show when false",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackConditionMeta",
              "description": "Allows Subclassers to add meta info for feedbackCondition",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "touched",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has focused and left(blurred) the field.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "dirty",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has changed the value of the field.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "prefilled",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has left non-empty field or input is prefilled.\nThe name must be seen from the point of view of the input field:\nonce the user enters the input field, the value is non-empty.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "description": "True when the modelValue is non-empty (see _isEmpty in FormControlMixin)",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_leaveEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the touched state",
              "privacy": "protected",
              "default": "'blur'",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_valueChangedEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the dirty state",
              "privacy": "protected",
              "default": "'model-value-changed'",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Calls `focus()` on focusable element within",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Calls `blur()` on focusable element within",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_focusableNode",
              "description": "The focusable element:\ncould be an input, textarea, select, button or any other element with tabindex > -1",
              "privacy": "protected",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onBlur",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__registerEventsForFocusMixin",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__teardownEventsForFocusMixin",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) is focused.\nReflects to attribute '[focused]' as a styling hook",
              "default": "false",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "focusedVisible",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) matches ':focus-visible'\nReflects to attribute '[focused-visible]' as a styling hook\nSee: https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible",
              "default": "false",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The view value. Will be delegated to `._inputNode.value`",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "preprocessor",
              "parameters": [
                {
                  "name": "v",
                  "description": "the raw value from the <input> after keyUp/Down event",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Preprocesses the viewValue before it's parsed to a modelValue. Can be used to filter\ninvalid input amongst others.",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "parser",
              "parameters": [
                {
                  "name": "v",
                  "description": "viewValue: the formatted value inside <input>",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "FormatOptions"
                  }
                }
              ],
              "description": "Converts viewValue to modelValue\nFor instance, a localized date to a Date Object",
              "return": {
                "type": {
                  "text": "*"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "formatter",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "FormatOptions"
                  }
                }
              ],
              "description": "Converts modelValue to formattedValue (formattedValue will be synced with\n`._inputNode.value`)\nFor instance, a Date object to a localized date.",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "serializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.modelValue` to `.serializedValue`\nFor instance, a Date object to an iso formatted date string",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "deserializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.serializedValue` to `.modelValue`\nFor instance, an iso formatted date string to a Date object",
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_calculateValues",
              "parameters": [
                {
                  "name": "{ source }",
                  "default": "{ source: null }"
                },
                {
                  "description": "the type of value that triggered this method. It should not be\nset again, so that its observer won't be triggered. Can be:\n'model'|'formatted'|'serialized'.",
                  "name": "config",
                  "type": {
                    "text": "{source:'model'|'serialized'|'formatted'|null}"
                  }
                }
              ],
              "description": "Responsible for storing all representations(modelValue, serializedValue, formattedValue\nand value) of the input value. Prevents infinite loops, so all value observers can be\ntreated like they will only be called once, without indirectly calling other observers.\n(in fact, some are called twice, but the __preventRecursiveTrigger lock prevents the\nsecond call from having effect).",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_callParser",
              "parameters": [
                {
                  "name": "value",
                  "default": "this.formattedValue",
                  "type": {
                    "text": "string|undefined"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_callFormatter",
              "return": {
                "type": {
                  "text": "string|undefined"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onModelValueChanged",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "{ modelValue: unknown; }[]"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchModelValueChangedEvent",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "{ modelValue: unknown; }[]"
                  }
                }
              ],
              "description": "This is wrapped in a distinct method, so that parents can control when the changed event\nis fired. For objects, a deep comparison might be needed.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_syncValueUpwards",
              "description": "Synchronization from `._inputNode.value` to `LionField` (flow [2])\nDownwards syncing should only happen for `LionField`.value changes from 'above'.\nThis triggers _onModelValueChanged and connects user input\nto the parsing/formatting/serializing loop.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_reflectBackFormattedValueToUser",
              "description": "Synchronization from `LionField.value` to `._inputNode.value`\n- flow [1] will always be reflected back\n- flow [2] will not be reflected back when this flow was triggered via\n  `@user-input-changed` (this will happen later, when `formatOn` condition is met)",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_reflectBackOn",
              "description": "Every time .formattedValue is attempted to sync to the view value (on change/blur and on\nmodelValue change), this condition is checked. When enhancing it, it's recommended to\ncall `super._reflectBackOn()`",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_proxyInputEvent",
              "description": "This can be called whenever the view value should be updated. Dependent on component type\n(\"input\" for <input> or \"change\" for <select>(mainly for IE)) a different event should be\nused  as source for the \"user-input-changed\" event (which can be seen as an abstraction\nlayer on top of other events (input, change, whatever))",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onUserInputChanged",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onCompositionEvent",
              "parameters": [
                {
                  "name": "{ type }"
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onPaste",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formatOn",
              "type": {
                "text": "string"
              },
              "description": "Event that will trigger formatting (more precise, visual update of the view, so the\nuser sees the formatted value)\nDefault: 'change'",
              "privacy": "protected",
              "default": "'change'",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formatOptions",
              "description": "Configuration object that will be available inside the formatter function",
              "default": "({})",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "description": "The view value is the result of the formatter function (when available).\nThe result will be stored in the native _inputNode (usually an input[type=text]).\n\nExamples:\n- For a date input, this would be '20/01/1999' (dependent on locale).\n- For a number input, this could be '1,234.56' (a String representation of modelValue\n1234.56)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "description": "The serialized version of the model value.\nThis value exists for maximal compatibility with the platform API.\nThe serialized value can be an interface in context where data binding is not\nsupported and a serialized string needs to be set.\n\nExamples:\n- For a date input, this would be the iso format of a date, e.g. '1999-01-20'.\n- For a number input this would be the String representation of a float ('1234.56'\n  instead of 1234.56)\n\nWhen no parser is available, the value is usually the same as the formattedValue\n(being _inputNode.value)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isPasting",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the user is pasting content. Allows Subclassers to do this in their subclass:",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isHandlingUserInput",
              "type": {
                "text": "boolean"
              },
              "description": "Flag that will be set when user interaction takes place (for instance after an 'input'\nevent). Will be added as meta info to the `model-value-changed` event. Depending on\nwhether a user is interacting, formatting logic will be handled differently.",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevViewValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_reflectBackFormattedValueDebounced",
              "privacy": "private",
              "default": "() => {\n        // Make sure this is fired after the change event of _inputNode, so that formattedValue\n        // is guaranteed to be calculated\n        setTimeout(this._reflectBackFormattedValueToUser);\n      }",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "description": "Obtains the scoped elements definitions map if specified.",
              "return": {
                "type": {
                  "text": "ScopedElementsMap"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationTypes",
              "static": true,
              "description": "Types of validation supported by this FormControl (for instance 'error'|'warning'|'info')",
              "type": {
                "text": "ValidationType[]"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_allValidators",
              "description": "Combination of validators provided by Application Developer and the default validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "description": "Empty pending queue in order to guarantee order independence",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updateSync",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "An abstraction that has the exact same api as `requestUpdate`, but taking\ninto account:\n- [member order independence](https://github.com/webcomponents/gold-standard/wiki/Member-Order-Independence)\n- property effects start when all (light) dom has initialized (on firstUpdated)\n- property effects don't interrupt the first meaningful paint\n- compatible with propertyAccessor.`hasChanged`: no manual checks needed or accidentally\nrun property effects / events when no change happened\neffects when values didn't change\nAll code previously present in requestUpdate can be placed in this method.",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "parameters": [
                {
                  "name": "{ clearCurrentResult }",
                  "default": "{}"
                },
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "{ clearCurrentResult?: boolean }"
                  }
                }
              ],
              "description": "Triggered by:\n - modelValue change\n - change in the 'validators' array\n-  change in the config of an individual Validator\n\nThree situations are handled:\n- a1) the FormControl is empty: further execution is halted. When the Required Validator\n(being mutually exclusive to the other Validators) is applied, it will end up in the\nvalidation result (as the only Validator, since further execution was halted).\n- a2) there are synchronous Validators: this is the most common flow. When modelValue hasn't\nchanged since last async results were generated, 'sync results' are merged with the\n'async results'.\n- a3) there are asynchronous Validators: for instance when server side evaluation is needed.\nExecutions are scheduled and awaited and the 'async results' are merged with the\n'sync results'.\n\n- b) there are ResultValidators. After steps a1, a2, or a3 are finished, the holistic\nResultValidators (evaluating the total result of the 'regular' (a1, a2 and a3) validators)\nwill be run...\n\nSituations a2 and a3 are not mutually exclusive and can be triggered within one `validate()`\ncall. Situation b will occur after every call.",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeValidators",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeSyncValidators",
              "parameters": [
                {
                  "name": "syncValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "{ hasAsync }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ hasAsync: boolean }"
                  }
                }
              ],
              "description": "step a2 (as explained in `validate()`): calls `__finishValidation`",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeAsyncValidators",
              "parameters": [
                {
                  "name": "asyncValidators",
                  "description": "all Validators except required and ResultValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "step a3 (as explained in `validate()`), calls __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeResultValidators",
              "parameters": [
                {
                  "name": "regularValidationResult",
                  "description": "result of steps 1-3",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "description": "step b (as explained in `validate()`), called by __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__finishValidation",
              "parameters": [
                {
                  "name": "{ source, hasAsync }"
                },
                {
                  "name": "options",
                  "type": {
                    "text": "@param {'sync'|'async'} options.source\n     * @param {boolean} [options.hasAsync] whether async validators are configured in this run.\n     * "
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__clearValidationResults",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onValidatorUpdated",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event|CustomEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__isEmpty",
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Helper method for the mutually exclusive Required Validator",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getFeedbackMessages",
              "parameters": [
                {
                  "name": "validators",
                  "description": "list of objects having a .getMessage method",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise.<FeedbackMessage[]>"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateFeedbackComponent",
              "description": "Responsible for retrieving messages from Validators and\n(delegation of) rendering them.\n\nFor `._feedbackNode` (extension of LionValidationFeedback):\n- retrieve messages from highest prio Validators\n- provide the result to custom feedback node and let the\ncustom node decide on their renderings\n\nIn both cases:\n- we compute the 'show' flag (like 'hasErrorVisible') for all types\n- we set the customValidity message of the highest prio Validator\n- we set aria-invalid=\"true\" in case hasErrorVisible is true",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "feedbackCondition",
              "parameters": [
                {
                  "name": "type",
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "default": "this._feedbackConditionMeta",
                  "description": "meta info (interaction states etc)",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "name": "currentCondition",
                  "default": "this._showFeedbackConditionFor.bind(this)",
                  "description": "this is the _showFeedbackConditionFor\nthat can be used if a developer wants to override for a certain type, but wants to fallback\nfor other types",
                  "type": {
                    "text": "((type: string, meta: object) => boolean)"
                  }
                }
              ],
              "description": "Allows the end user to specify when a feedback message should be shown",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_hasFeedbackVisibleFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Used to translate `.hasFeedbackFor` and `.shouldShowFeedbackFor` to `.showsFeedbackFor`",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateShouldShowFeedbackFor",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_prioritizeAndFilterFeedback",
              "parameters": [
                {
                  "name": "{ validationResult }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ validationResult: Validator[] }"
                  }
                }
              ],
              "description": "Orders all active validators in this.__validationResult. Can\nalso filter out occurrences (based on interaction states)",
              "return": {
                "type": {
                  "text": "Validator[]"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "hasFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "As soon as validation happens (after modelValue/validators/validator param change), this\narray is updated with the active ValidationTypes ('error'|'warning'|'success'|'info' etc.).\nNotice the difference with `.showsFeedbackFor`, which filters `.hasFeedbackFor` based on\n`.feedbackCondition()`.\n\nFor styling purposes, will be reflected to [has-feedback-for=\"error warning\"]. This can\nbe useful for subtle visual feedback on keyup, like a red/green border around an input.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "showsFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "Based on outcome of feedbackCondition, this array decides what ValidationTypes should be\nshown in validationFeedback, based on meta data like interaction states.\n\nFor styling purposes, it reflects it `[shows-feedback-for=\"error warning\"]`",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shouldShowFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "A temporary storage to transition from hasFeedbackFor to showsFeedbackFor",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationStates",
              "type": {
                "text": "Object.<string, Object.<string, boolean>>"
              },
              "description": "The outcome of a validation 'round'. Keyed by ValidationType and Validator name",
              "default": "{}",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "isPending",
              "type": {
                "text": "boolean"
              },
              "description": "Flag indicating whether async validation is pending.\nCreates attribute [is-pending] as a styling hook",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Application Developers to add Validators to a FormControl.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "defaultValidators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Subclassers to add default Validators to a particular FormControl.\nA date input for instance, always needs the isDate validator.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_visibleMessagesAmount",
              "type": {
                "text": "number"
              },
              "description": "The amount of feedback messages that will visible in LionValidationFeedback",
              "privacy": "protected",
              "default": "1",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__syncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__asyncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__validationResult",
              "type": {
                "text": "Validator[]"
              },
              "description": "Aggregated result from sync Validators, async Validators and ResultValidators",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevShownValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__childModelValueChanged",
              "type": {
                "text": "boolean"
              },
              "description": "The updated children validity affects the validity of the parent. Helper to recompute\nvalidatity of parent FormGroup",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableHasChanged",
              "static": true,
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Makes the propertyAccessor.`hasChanged` compatible in synchronous updates",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableInitialize",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__SyncUpdatableNamespace",
              "type": {
                "text": "SyncUpdatableNamespace"
              },
              "description": "Namespace for this mixin that guarantees naming clashes will not occur...",
              "default": "{}",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "static": true,
              "description": "Obtains the ShadowRoot options.",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "ShadowRootInit"
                  }
                }
              ],
              "type": {
                "text": "ShadowRootInit"
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "static": true,
              "description": "Obtains the element styles.",
              "return": {
                "type": {
                  "text": "CSSResultFlatArray"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registry",
              "description": "Set the CustomElementRegistry associated to the ShadowRoot",
              "return": {
                "type": {
                  "text": "CustomElementRegistry"
                }
              },
              "parameters": [
                {
                  "name": "registry",
                  "type": {
                    "text": "CustomElementRegistry"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "defineScopedElement",
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "klass",
                  "type": {
                    "text": "typeof HTMLElement"
                  }
                }
              ],
              "description": "Defines a scoped element.",
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "getScopedTagName",
              "static": true,
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "superclass": {
            "name": "LionField_base",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/LionField.d.ts"
          },
          "tagName": "lion-field",
          "customElement": true,
          "events": [
            {
              "name": "form-element-name-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            },
            {
              "name": "touched-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "name": "dirty-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "name": "focus",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "blur",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "focusin",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "focusout",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "user-input-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "name": "showsFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "shouldShowFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "validate-performed",
              "type": {
                "text": "Event"
              },
              "description": "private event that should be listened to by LionFieldSet",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LionField",
          "declaration": {
            "name": "LionField",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/LionField.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/LionField.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`LionField`: wraps <input>, <textarea>, <select> and other interactable elements.\nAlso it would follow a nice hierarchy: lion-form -> lion-fieldset -> lion-field\n\nNote: We don't support placeholders, because we have a helper text and\nplaceholders confuse the user with accessibility needs.\n\nPlease see the docs for in depth information.",
          "name": "LionField",
          "members": [
            {
              "kind": "method",
              "name": "resetInteractionState",
              "description": "Resets touched and dirty, and recomputes prefilled",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Resets modelValue to initial value.\nInteraction states are cleared"
            },
            {
              "kind": "method",
              "name": "clear",
              "description": "Clears modelValue.\nInteraction states are not cleared (use resetInteractionState for this)"
            },
            {
              "kind": "method",
              "name": "_onChange",
              "description": "Dispatches custom bubble event",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_feedbackConditionMeta",
              "description": "Allows Subclassers to add meta info for feedbackCondition",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_focusableNode",
              "description": "The focusable element:\ncould be an input, textarea, select, button or any other element with tabindex > -1",
              "privacy": "protected",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The label text for the input node.\nWhen no value is defined, textContent of [slot=label] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "description": "The helpt text for the input node.\nWhen no value is defined, textContent of [slot=help-text] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "fieldName",
              "description": "Will be used in validation messages to refer to the current field",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "slots",
              "return": {
                "type": {
                  "text": "SlotsMap"
                }
              },
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "description": "The interactive (form) element. Can be a native element like input/textarea/select or\nan element with tabindex > -1",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_labelNode",
              "description": "Element where label will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_helpTextNode",
              "description": "Element where help text will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackNode",
              "description": "Element where validation feedback will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11y",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11yForAdditionalSlots",
              "parameters": [
                {
                  "name": "additionalSlots",
                  "default": "['prefix', 'suffix', 'before', 'after']",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Enhances additional slots(prefix, suffix, before, after) defined by developer.\n\nWhen boolean attribute data-label or data-description is found,\nthe slot element will be connected to the input via aria-labelledby or aria-describedby",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__reflectAriaAttr",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "reorder",
                  "type": {
                    "text": "boolean|undefined"
                  }
                }
              ],
              "description": "Will handle help text, validation feedback and character counter,\nprefix/suffix/before/after (if they contain data-description flag attr).\nAlso, contents of id references that will be put in the <lion-field>._ariaDescribedby property\nfrom an external context, will be read by a screen reader.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Default Render Result:\n<div class=\"form-field__group-one\">\n  <div class=\"form-field__label\">\n    <slot name=\"label\"></slot>\n  </div>\n  <small class=\"form-field__help-text\">\n    <slot name=\"help-text\"></slot>\n  </small>\n</div>\n<div class=\"form-field__group-two\">\n  <div class=\"input-group\">\n    <div class=\"input-group__before\">\n      <slot name=\"before\"></slot>\n    </div>\n    <div class=\"input-group__container\">\n      <div class=\"input-group__prefix\">\n        <slot name=\"prefix\"></slot>\n      </div>\n      <div class=\"input-group__input\">\n        <slot name=\"input\"></slot>\n      </div>\n      <div class=\"input-group__suffix\">\n        <slot name=\"suffix\"></slot>\n      </div>\n    </div>\n    <div class=\"input-group__after\">\n      <slot name=\"after\"></slot>\n    </div>\n  </div>\n  <div class=\"form-field__feedback\">\n    <slot name=\"feedback\"></slot>\n  </div>\n</div>",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupOneTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupTwoTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_helpTextTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupBeforeTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupPrefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupSuffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupAfterTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_feedbackTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "parameters": [
                {
                  "name": "modelValue",
                  "default": "(this).modelValue",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Used for Required validation and computation of interaction states",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "{block} .input-group\n\nStructure:\n- {element} .input-group__before (optional) : a prefix that resides outside the container\n- {element} .input-group__container : an inner container: this element contains all styling\n - {element} .input-group__prefix (optional) : a prefix that resides in the container,\n              allowing it to be detectable as a :first-child\n - {element} .input-group__input : a wrapper around the form-control component\n  - {block} .form-control : the actual input element (input/select/textarea)\n - {element} .input-group__suffix (optional) : a suffix that resides inside the container,\n              allowing it to be detectable as a :last-child\n - {element} .input-group__bottom (optional) : placeholder element for additional styling\n              (like an animated line for material design input)\n- {element} .input-group__after (optional) :  a suffix that resides outside the container",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getAriaDescriptionElements",
              "description": "This function exposes descripion elements that a FormGroup should expose to its\nchildren. See FormGroupMixin.__getAllDescriptionElementsInParentChain()",
              "return": {
                "type": {
                  "text": "Array.<HTMLElement>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add element references to aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getDirectSlotChild",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchInitialModelValueChangedEvent",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to add logic before repropagation",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__repropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_repropagationCondition",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "description": "Based on provided target, this condition determines whether received model-value-changed\nevent should be repropagated",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onLabelClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the element will be registered with to the .formElements collection\nof the parent. Also, it serves as the key of key/value pairs in\n modelValue/serializedValue objects",
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "A Boolean attribute which, if present, indicates that the user should not be able to edit\nthe value of the input. The difference between disabled and readonly is that read-only\ncontrols can still function, whereas disabled controls generally do not function as\ncontrols until they are enabled.\n(From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputId",
              "description": "Unique id that can be used in all light dom",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaLabelledNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-labelledby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaDescribedNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-describedby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_repropagationRole",
              "type": {
                "text": "'child'|'choice-group'|'fieldset'"
              },
              "description": "Based on the role, details of handling model-value-changed repropagation differ.",
              "default": "'child'",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isRepropagationEndpoint",
              "type": {
                "text": "boolean"
              },
              "description": "By default, a field with _repropagationRole 'choice-group' will act as an\n'endpoint'. This means it will be considered as an individual field: for\na select, individual options will not be part of the formPath. They\nwill.\nSimilarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n(from Application Developer perspective) need to be more like fields\n(think of an amount-input with a currency select box next to it), can set this\nto true to hide private internals in the formPath.",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__renderAsNodes",
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "parameters": [
                {
                  "name": "slotName",
                  "description": "Name of the slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__privateSlots",
              "privacy": "private",
              "default": "new Set(null)",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "initInteractionState",
              "description": "Evaluations performed on connectedCallback.\nThis method is public, so it can be called at a later moment (when we need to wait for\nregistering children for instance) as well.\nSince this method will be called twice in last mentioned scenario, it must stay idempotent.",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_iStateOnLeave",
              "description": "Sets touched value to true and reevaluates prefilled state.\nWhen false, on next interaction, user will start with a clean state.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_iStateOnValueChange",
              "description": "Sets dirty value and validates when already touched or invalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onTouchedChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onDirtyChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_showFeedbackConditionFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "type": {
                    "text": "InteractionStates"
                  }
                }
              ],
              "description": "Default feedbackCondition condition, used by Subclassers, that will be used when\n`feedbackCondition()` is not overridden by Application Developer.\nShow the validity feedback when returning true, don't show when false",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "touched",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has focused and left(blurred) the field.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "dirty",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has changed the value of the field.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "prefilled",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has left non-empty field or input is prefilled.\nThe name must be seen from the point of view of the input field:\nonce the user enters the input field, the value is non-empty.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "description": "True when the modelValue is non-empty (see _isEmpty in FormControlMixin)",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_leaveEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the touched state",
              "privacy": "protected",
              "default": "'blur'",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_valueChangedEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the dirty state",
              "privacy": "protected",
              "default": "'model-value-changed'",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Calls `focus()` on focusable element within",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Calls `blur()` on focusable element within",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onBlur",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__registerEventsForFocusMixin",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__teardownEventsForFocusMixin",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) is focused.\nReflects to attribute '[focused]' as a styling hook",
              "default": "false",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "focusedVisible",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) matches ':focus-visible'\nReflects to attribute '[focused-visible]' as a styling hook\nSee: https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible",
              "default": "false",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The view value. Will be delegated to `._inputNode.value`",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "preprocessor",
              "parameters": [
                {
                  "name": "v",
                  "description": "the raw value from the <input> after keyUp/Down event",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Preprocesses the viewValue before it's parsed to a modelValue. Can be used to filter\ninvalid input amongst others.",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "parser",
              "parameters": [
                {
                  "name": "v",
                  "description": "viewValue: the formatted value inside <input>",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "FormatOptions"
                  }
                }
              ],
              "description": "Converts viewValue to modelValue\nFor instance, a localized date to a Date Object",
              "return": {
                "type": {
                  "text": "*"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "formatter",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "FormatOptions"
                  }
                }
              ],
              "description": "Converts modelValue to formattedValue (formattedValue will be synced with\n`._inputNode.value`)\nFor instance, a Date object to a localized date.",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "serializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.modelValue` to `.serializedValue`\nFor instance, a Date object to an iso formatted date string",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "deserializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.serializedValue` to `.modelValue`\nFor instance, an iso formatted date string to a Date object",
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_calculateValues",
              "parameters": [
                {
                  "name": "{ source }",
                  "default": "{ source: null }"
                },
                {
                  "description": "the type of value that triggered this method. It should not be\nset again, so that its observer won't be triggered. Can be:\n'model'|'formatted'|'serialized'.",
                  "name": "config",
                  "type": {
                    "text": "{source:'model'|'serialized'|'formatted'|null}"
                  }
                }
              ],
              "description": "Responsible for storing all representations(modelValue, serializedValue, formattedValue\nand value) of the input value. Prevents infinite loops, so all value observers can be\ntreated like they will only be called once, without indirectly calling other observers.\n(in fact, some are called twice, but the __preventRecursiveTrigger lock prevents the\nsecond call from having effect).",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_callParser",
              "parameters": [
                {
                  "name": "value",
                  "default": "this.formattedValue",
                  "type": {
                    "text": "string|undefined"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_callFormatter",
              "return": {
                "type": {
                  "text": "string|undefined"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onModelValueChanged",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "{ modelValue: unknown; }[]"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchModelValueChangedEvent",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "{ modelValue: unknown; }[]"
                  }
                }
              ],
              "description": "This is wrapped in a distinct method, so that parents can control when the changed event\nis fired. For objects, a deep comparison might be needed.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_syncValueUpwards",
              "description": "Synchronization from `._inputNode.value` to `LionField` (flow [2])\nDownwards syncing should only happen for `LionField`.value changes from 'above'.\nThis triggers _onModelValueChanged and connects user input\nto the parsing/formatting/serializing loop.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_reflectBackFormattedValueToUser",
              "description": "Synchronization from `LionField.value` to `._inputNode.value`\n- flow [1] will always be reflected back\n- flow [2] will not be reflected back when this flow was triggered via\n  `@user-input-changed` (this will happen later, when `formatOn` condition is met)",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_reflectBackOn",
              "description": "Every time .formattedValue is attempted to sync to the view value (on change/blur and on\nmodelValue change), this condition is checked. When enhancing it, it's recommended to\ncall `super._reflectBackOn()`",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_proxyInputEvent",
              "description": "This can be called whenever the view value should be updated. Dependent on component type\n(\"input\" for <input> or \"change\" for <select>(mainly for IE)) a different event should be\nused  as source for the \"user-input-changed\" event (which can be seen as an abstraction\nlayer on top of other events (input, change, whatever))",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onUserInputChanged",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onCompositionEvent",
              "parameters": [
                {
                  "name": "{ type }"
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onPaste",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formatOn",
              "type": {
                "text": "string"
              },
              "description": "Event that will trigger formatting (more precise, visual update of the view, so the\nuser sees the formatted value)\nDefault: 'change'",
              "privacy": "protected",
              "default": "'change'",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formatOptions",
              "description": "Configuration object that will be available inside the formatter function",
              "default": "({})",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "description": "The view value is the result of the formatter function (when available).\nThe result will be stored in the native _inputNode (usually an input[type=text]).\n\nExamples:\n- For a date input, this would be '20/01/1999' (dependent on locale).\n- For a number input, this could be '1,234.56' (a String representation of modelValue\n1234.56)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "description": "The serialized version of the model value.\nThis value exists for maximal compatibility with the platform API.\nThe serialized value can be an interface in context where data binding is not\nsupported and a serialized string needs to be set.\n\nExamples:\n- For a date input, this would be the iso format of a date, e.g. '1999-01-20'.\n- For a number input this would be the String representation of a float ('1234.56'\n  instead of 1234.56)\n\nWhen no parser is available, the value is usually the same as the formattedValue\n(being _inputNode.value)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isPasting",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the user is pasting content. Allows Subclassers to do this in their subclass:",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isHandlingUserInput",
              "type": {
                "text": "boolean"
              },
              "description": "Flag that will be set when user interaction takes place (for instance after an 'input'\nevent). Will be added as meta info to the `model-value-changed` event. Depending on\nwhether a user is interacting, formatting logic will be handled differently.",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevViewValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_reflectBackFormattedValueDebounced",
              "privacy": "private",
              "default": "() => {\n        // Make sure this is fired after the change event of _inputNode, so that formattedValue\n        // is guaranteed to be calculated\n        setTimeout(this._reflectBackFormattedValueToUser);\n      }",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "description": "Obtains the scoped elements definitions map if specified.",
              "return": {
                "type": {
                  "text": "ScopedElementsMap"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationTypes",
              "static": true,
              "description": "Types of validation supported by this FormControl (for instance 'error'|'warning'|'info')",
              "type": {
                "text": "ValidationType[]"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_allValidators",
              "description": "Combination of validators provided by Application Developer and the default validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "description": "Empty pending queue in order to guarantee order independence",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updateSync",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "An abstraction that has the exact same api as `requestUpdate`, but taking\ninto account:\n- [member order independence](https://github.com/webcomponents/gold-standard/wiki/Member-Order-Independence)\n- property effects start when all (light) dom has initialized (on firstUpdated)\n- property effects don't interrupt the first meaningful paint\n- compatible with propertyAccessor.`hasChanged`: no manual checks needed or accidentally\nrun property effects / events when no change happened\neffects when values didn't change\nAll code previously present in requestUpdate can be placed in this method.",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "parameters": [
                {
                  "name": "{ clearCurrentResult }",
                  "default": "{}"
                },
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "{ clearCurrentResult?: boolean }"
                  }
                }
              ],
              "description": "Triggered by:\n - modelValue change\n - change in the 'validators' array\n-  change in the config of an individual Validator\n\nThree situations are handled:\n- a1) the FormControl is empty: further execution is halted. When the Required Validator\n(being mutually exclusive to the other Validators) is applied, it will end up in the\nvalidation result (as the only Validator, since further execution was halted).\n- a2) there are synchronous Validators: this is the most common flow. When modelValue hasn't\nchanged since last async results were generated, 'sync results' are merged with the\n'async results'.\n- a3) there are asynchronous Validators: for instance when server side evaluation is needed.\nExecutions are scheduled and awaited and the 'async results' are merged with the\n'sync results'.\n\n- b) there are ResultValidators. After steps a1, a2, or a3 are finished, the holistic\nResultValidators (evaluating the total result of the 'regular' (a1, a2 and a3) validators)\nwill be run...\n\nSituations a2 and a3 are not mutually exclusive and can be triggered within one `validate()`\ncall. Situation b will occur after every call.",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeValidators",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeSyncValidators",
              "parameters": [
                {
                  "name": "syncValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "{ hasAsync }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ hasAsync: boolean }"
                  }
                }
              ],
              "description": "step a2 (as explained in `validate()`): calls `__finishValidation`",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeAsyncValidators",
              "parameters": [
                {
                  "name": "asyncValidators",
                  "description": "all Validators except required and ResultValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "step a3 (as explained in `validate()`), calls __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeResultValidators",
              "parameters": [
                {
                  "name": "regularValidationResult",
                  "description": "result of steps 1-3",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "description": "step b (as explained in `validate()`), called by __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__finishValidation",
              "parameters": [
                {
                  "name": "{ source, hasAsync }"
                },
                {
                  "name": "options",
                  "type": {
                    "text": "@param {'sync'|'async'} options.source\n     * @param {boolean} [options.hasAsync] whether async validators are configured in this run.\n     * "
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__clearValidationResults",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onValidatorUpdated",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event|CustomEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__isEmpty",
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Helper method for the mutually exclusive Required Validator",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getFeedbackMessages",
              "parameters": [
                {
                  "name": "validators",
                  "description": "list of objects having a .getMessage method",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise.<FeedbackMessage[]>"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateFeedbackComponent",
              "description": "Responsible for retrieving messages from Validators and\n(delegation of) rendering them.\n\nFor `._feedbackNode` (extension of LionValidationFeedback):\n- retrieve messages from highest prio Validators\n- provide the result to custom feedback node and let the\ncustom node decide on their renderings\n\nIn both cases:\n- we compute the 'show' flag (like 'hasErrorVisible') for all types\n- we set the customValidity message of the highest prio Validator\n- we set aria-invalid=\"true\" in case hasErrorVisible is true",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "feedbackCondition",
              "parameters": [
                {
                  "name": "type",
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "default": "this._feedbackConditionMeta",
                  "description": "meta info (interaction states etc)",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "name": "currentCondition",
                  "default": "this._showFeedbackConditionFor.bind(this)",
                  "description": "this is the _showFeedbackConditionFor\nthat can be used if a developer wants to override for a certain type, but wants to fallback\nfor other types",
                  "type": {
                    "text": "((type: string, meta: object) => boolean)"
                  }
                }
              ],
              "description": "Allows the end user to specify when a feedback message should be shown",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_hasFeedbackVisibleFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Used to translate `.hasFeedbackFor` and `.shouldShowFeedbackFor` to `.showsFeedbackFor`",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateShouldShowFeedbackFor",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_prioritizeAndFilterFeedback",
              "parameters": [
                {
                  "name": "{ validationResult }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ validationResult: Validator[] }"
                  }
                }
              ],
              "description": "Orders all active validators in this.__validationResult. Can\nalso filter out occurrences (based on interaction states)",
              "return": {
                "type": {
                  "text": "Validator[]"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "hasFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "As soon as validation happens (after modelValue/validators/validator param change), this\narray is updated with the active ValidationTypes ('error'|'warning'|'success'|'info' etc.).\nNotice the difference with `.showsFeedbackFor`, which filters `.hasFeedbackFor` based on\n`.feedbackCondition()`.\n\nFor styling purposes, will be reflected to [has-feedback-for=\"error warning\"]. This can\nbe useful for subtle visual feedback on keyup, like a red/green border around an input.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "showsFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "Based on outcome of feedbackCondition, this array decides what ValidationTypes should be\nshown in validationFeedback, based on meta data like interaction states.\n\nFor styling purposes, it reflects it `[shows-feedback-for=\"error warning\"]`",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shouldShowFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "A temporary storage to transition from hasFeedbackFor to showsFeedbackFor",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationStates",
              "type": {
                "text": "Object.<string, Object.<string, boolean>>"
              },
              "description": "The outcome of a validation 'round'. Keyed by ValidationType and Validator name",
              "default": "{}",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "isPending",
              "type": {
                "text": "boolean"
              },
              "description": "Flag indicating whether async validation is pending.\nCreates attribute [is-pending] as a styling hook",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Application Developers to add Validators to a FormControl.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "defaultValidators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Subclassers to add default Validators to a particular FormControl.\nA date input for instance, always needs the isDate validator.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_visibleMessagesAmount",
              "type": {
                "text": "number"
              },
              "description": "The amount of feedback messages that will visible in LionValidationFeedback",
              "privacy": "protected",
              "default": "1",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__syncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__asyncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__validationResult",
              "type": {
                "text": "Validator[]"
              },
              "description": "Aggregated result from sync Validators, async Validators and ResultValidators",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevShownValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__childModelValueChanged",
              "type": {
                "text": "boolean"
              },
              "description": "The updated children validity affects the validity of the parent. Helper to recompute\nvalidatity of parent FormGroup",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableHasChanged",
              "static": true,
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Makes the propertyAccessor.`hasChanged` compatible in synchronous updates",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableInitialize",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__SyncUpdatableNamespace",
              "type": {
                "text": "SyncUpdatableNamespace"
              },
              "description": "Namespace for this mixin that guarantees naming clashes will not occur...",
              "default": "{}",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "static": true,
              "description": "Obtains the ShadowRoot options.",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "ShadowRootInit"
                  }
                }
              ],
              "type": {
                "text": "ShadowRootInit"
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "static": true,
              "description": "Obtains the element styles.",
              "return": {
                "type": {
                  "text": "CSSResultFlatArray"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registry",
              "description": "Set the CustomElementRegistry associated to the ShadowRoot",
              "return": {
                "type": {
                  "text": "CustomElementRegistry"
                }
              },
              "parameters": [
                {
                  "name": "registry",
                  "type": {
                    "text": "CustomElementRegistry"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "defineScopedElement",
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "klass",
                  "type": {
                    "text": "typeof HTMLElement"
                  }
                }
              ],
              "description": "Defines a scoped element.",
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "getScopedTagName",
              "static": true,
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "events": [
            {
              "name": "user-input-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "name": "form-element-name-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            },
            {
              "name": "touched-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "name": "dirty-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "name": "focus",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "blur",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "focusin",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "focusout",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "showsFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "shouldShowFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "validate-performed",
              "type": {
                "text": "Event"
              },
              "description": "private event that should be listened to by LionFieldSet",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
            },
            {
              "name": "InteractionStateMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
            },
            {
              "name": "FocusMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
            },
            {
              "name": "FormatMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
            },
            {
              "name": "ValidateMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
            },
            {
              "name": "SlotMixin",
              "package": "@lion/core"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "lion-field",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LionField",
          "declaration": {
            "name": "LionField",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/LionField.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/NativeTextFieldMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "NativeTextFieldMixin",
          "type": {
            "text": "typeof import(\"../types/NativeTextFieldMixinTypes.js\").NativeTextFieldImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NativeTextFieldMixin",
          "declaration": {
            "name": "NativeTextFieldMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/NativeTextFieldMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/NativeTextFieldMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "NativeTextFieldMixin",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "description": "The interactive (form) element. Can be a native element like input/textarea/select or\nan element with tabindex > -1",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              },
              "type": {
                "text": "HTMLInputElement | HTMLTextAreaElement"
              }
            },
            {
              "kind": "field",
              "name": "selectionStart",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "selectionEnd",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The view value. Will be delegated to `._inputNode.value`",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_setValueAndPreserveCaret",
              "parameters": [
                {
                  "name": "newValue",
                  "description": "The value that should be saved.",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Restores the cursor to its original position after updating the value.",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_reflectBackFormattedValueToUser",
              "description": "Synchronization from `LionField.value` to `._inputNode.value`\n- flow [1] will always be reflected back\n- flow [2] will not be reflected back when this flow was triggered via\n  `@user-input-changed` (this will happen later, when `formatOn` condition is met)",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_focusableNode",
              "description": "The focusable element:\ncould be an input, textarea, select, button or any other element with tabindex > -1",
              "privacy": "protected",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "description": "Delegates this property to input/textarea/select.",
              "type": {
                "text": "string | undefined"
              },
              "default": "undefined"
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldVal",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "preprocessor",
              "parameters": [
                {
                  "name": "v",
                  "description": "the raw value from the <input> after keyUp/Down event",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Preprocesses the viewValue before it's parsed to a modelValue. Can be used to filter\ninvalid input amongst others.",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "parser",
              "parameters": [
                {
                  "name": "v",
                  "description": "viewValue: the formatted value inside <input>",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "FormatOptions"
                  }
                }
              ],
              "description": "Converts viewValue to modelValue\nFor instance, a localized date to a Date Object",
              "return": {
                "type": {
                  "text": "*"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "formatter",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "FormatOptions"
                  }
                }
              ],
              "description": "Converts modelValue to formattedValue (formattedValue will be synced with\n`._inputNode.value`)\nFor instance, a Date object to a localized date.",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "serializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.modelValue` to `.serializedValue`\nFor instance, a Date object to an iso formatted date string",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "deserializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.serializedValue` to `.modelValue`\nFor instance, an iso formatted date string to a Date object",
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_calculateValues",
              "parameters": [
                {
                  "name": "{ source }",
                  "default": "{ source: null }"
                },
                {
                  "description": "the type of value that triggered this method. It should not be\nset again, so that its observer won't be triggered. Can be:\n'model'|'formatted'|'serialized'.",
                  "name": "config",
                  "type": {
                    "text": "{source:'model'|'serialized'|'formatted'|null}"
                  }
                }
              ],
              "description": "Responsible for storing all representations(modelValue, serializedValue, formattedValue\nand value) of the input value. Prevents infinite loops, so all value observers can be\ntreated like they will only be called once, without indirectly calling other observers.\n(in fact, some are called twice, but the __preventRecursiveTrigger lock prevents the\nsecond call from having effect).",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_callParser",
              "parameters": [
                {
                  "name": "value",
                  "default": "this.formattedValue",
                  "type": {
                    "text": "string|undefined"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_callFormatter",
              "return": {
                "type": {
                  "text": "string|undefined"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onModelValueChanged",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "{ modelValue: unknown; }[]"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchModelValueChangedEvent",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "{ modelValue: unknown; }[]"
                  }
                }
              ],
              "description": "This is wrapped in a distinct method, so that parents can control when the changed event\nis fired. For objects, a deep comparison might be needed.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_syncValueUpwards",
              "description": "Synchronization from `._inputNode.value` to `LionField` (flow [2])\nDownwards syncing should only happen for `LionField`.value changes from 'above'.\nThis triggers _onModelValueChanged and connects user input\nto the parsing/formatting/serializing loop.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_reflectBackOn",
              "description": "Every time .formattedValue is attempted to sync to the view value (on change/blur and on\nmodelValue change), this condition is checked. When enhancing it, it's recommended to\ncall `super._reflectBackOn()`",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_proxyInputEvent",
              "description": "This can be called whenever the view value should be updated. Dependent on component type\n(\"input\" for <input> or \"change\" for <select>(mainly for IE)) a different event should be\nused  as source for the \"user-input-changed\" event (which can be seen as an abstraction\nlayer on top of other events (input, change, whatever))",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onUserInputChanged",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onCompositionEvent",
              "parameters": [
                {
                  "name": "{ type }"
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onPaste",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formatOn",
              "type": {
                "text": "string"
              },
              "description": "Event that will trigger formatting (more precise, visual update of the view, so the\nuser sees the formatted value)\nDefault: 'change'",
              "privacy": "protected",
              "default": "'change'",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formatOptions",
              "description": "Configuration object that will be available inside the formatter function",
              "default": "({})",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "description": "The view value is the result of the formatter function (when available).\nThe result will be stored in the native _inputNode (usually an input[type=text]).\n\nExamples:\n- For a date input, this would be '20/01/1999' (dependent on locale).\n- For a number input, this could be '1,234.56' (a String representation of modelValue\n1234.56)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "description": "The serialized version of the model value.\nThis value exists for maximal compatibility with the platform API.\nThe serialized value can be an interface in context where data binding is not\nsupported and a serialized string needs to be set.\n\nExamples:\n- For a date input, this would be the iso format of a date, e.g. '1999-01-20'.\n- For a number input this would be the String representation of a float ('1234.56'\n  instead of 1234.56)\n\nWhen no parser is available, the value is usually the same as the formattedValue\n(being _inputNode.value)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isPasting",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the user is pasting content. Allows Subclassers to do this in their subclass:",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isHandlingUserInput",
              "type": {
                "text": "boolean"
              },
              "description": "Flag that will be set when user interaction takes place (for instance after an 'input'\nevent). Will be added as meta info to the `model-value-changed` event. Depending on\nwhether a user is interacting, formatting logic will be handled differently.",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevViewValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_reflectBackFormattedValueDebounced",
              "privacy": "private",
              "default": "() => {\n        // Make sure this is fired after the change event of _inputNode, so that formattedValue\n        // is guaranteed to be calculated\n        setTimeout(this._reflectBackFormattedValueToUser);\n      }",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "description": "Obtains the scoped elements definitions map if specified.",
              "return": {
                "type": {
                  "text": "ScopedElementsMap"
                }
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationTypes",
              "static": true,
              "description": "Types of validation supported by this FormControl (for instance 'error'|'warning'|'info')",
              "type": {
                "text": "ValidationType[]"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "slots",
              "return": {
                "type": {
                  "text": "SlotsMap"
                }
              },
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_allValidators",
              "description": "Combination of validators provided by Application Developer and the default validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "description": "Empty pending queue in order to guarantee order independence",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updateSync",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "An abstraction that has the exact same api as `requestUpdate`, but taking\ninto account:\n- [member order independence](https://github.com/webcomponents/gold-standard/wiki/Member-Order-Independence)\n- property effects start when all (light) dom has initialized (on firstUpdated)\n- property effects don't interrupt the first meaningful paint\n- compatible with propertyAccessor.`hasChanged`: no manual checks needed or accidentally\nrun property effects / events when no change happened\neffects when values didn't change\nAll code previously present in requestUpdate can be placed in this method.",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "parameters": [
                {
                  "name": "{ clearCurrentResult }",
                  "default": "{}"
                },
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "{ clearCurrentResult?: boolean }"
                  }
                }
              ],
              "description": "Triggered by:\n - modelValue change\n - change in the 'validators' array\n-  change in the config of an individual Validator\n\nThree situations are handled:\n- a1) the FormControl is empty: further execution is halted. When the Required Validator\n(being mutually exclusive to the other Validators) is applied, it will end up in the\nvalidation result (as the only Validator, since further execution was halted).\n- a2) there are synchronous Validators: this is the most common flow. When modelValue hasn't\nchanged since last async results were generated, 'sync results' are merged with the\n'async results'.\n- a3) there are asynchronous Validators: for instance when server side evaluation is needed.\nExecutions are scheduled and awaited and the 'async results' are merged with the\n'sync results'.\n\n- b) there are ResultValidators. After steps a1, a2, or a3 are finished, the holistic\nResultValidators (evaluating the total result of the 'regular' (a1, a2 and a3) validators)\nwill be run...\n\nSituations a2 and a3 are not mutually exclusive and can be triggered within one `validate()`\ncall. Situation b will occur after every call.",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeValidators",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeSyncValidators",
              "parameters": [
                {
                  "name": "syncValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "{ hasAsync }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ hasAsync: boolean }"
                  }
                }
              ],
              "description": "step a2 (as explained in `validate()`): calls `__finishValidation`",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeAsyncValidators",
              "parameters": [
                {
                  "name": "asyncValidators",
                  "description": "all Validators except required and ResultValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "step a3 (as explained in `validate()`), calls __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeResultValidators",
              "parameters": [
                {
                  "name": "regularValidationResult",
                  "description": "result of steps 1-3",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "description": "step b (as explained in `validate()`), called by __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__finishValidation",
              "parameters": [
                {
                  "name": "{ source, hasAsync }"
                },
                {
                  "name": "options",
                  "type": {
                    "text": "@param {'sync'|'async'} options.source\n     * @param {boolean} [options.hasAsync] whether async validators are configured in this run.\n     * "
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__clearValidationResults",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onValidatorUpdated",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event|CustomEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__isEmpty",
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Helper method for the mutually exclusive Required Validator",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getFeedbackMessages",
              "parameters": [
                {
                  "name": "validators",
                  "description": "list of objects having a .getMessage method",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise.<FeedbackMessage[]>"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateFeedbackComponent",
              "description": "Responsible for retrieving messages from Validators and\n(delegation of) rendering them.\n\nFor `._feedbackNode` (extension of LionValidationFeedback):\n- retrieve messages from highest prio Validators\n- provide the result to custom feedback node and let the\ncustom node decide on their renderings\n\nIn both cases:\n- we compute the 'show' flag (like 'hasErrorVisible') for all types\n- we set the customValidity message of the highest prio Validator\n- we set aria-invalid=\"true\" in case hasErrorVisible is true",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_showFeedbackConditionFor",
              "parameters": [
                {
                  "name": "type",
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "description": "meta info (interaction states etc)",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "Default feedbackCondition condition, used by Subclassers, that will be used when\n`feedbackCondition()` is not overridden by Application Developer.\nShow the validity feedback when returning true, don't show when false",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackConditionMeta",
              "description": "Allows Subclassers to add meta info for feedbackCondition",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "feedbackCondition",
              "parameters": [
                {
                  "name": "type",
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "default": "this._feedbackConditionMeta",
                  "description": "meta info (interaction states etc)",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "name": "currentCondition",
                  "default": "this._showFeedbackConditionFor.bind(this)",
                  "description": "this is the _showFeedbackConditionFor\nthat can be used if a developer wants to override for a certain type, but wants to fallback\nfor other types",
                  "type": {
                    "text": "((type: string, meta: object) => boolean)"
                  }
                }
              ],
              "description": "Allows the end user to specify when a feedback message should be shown",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_hasFeedbackVisibleFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Used to translate `.hasFeedbackFor` and `.shouldShowFeedbackFor` to `.showsFeedbackFor`",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateShouldShowFeedbackFor",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_prioritizeAndFilterFeedback",
              "parameters": [
                {
                  "name": "{ validationResult }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ validationResult: Validator[] }"
                  }
                }
              ],
              "description": "Orders all active validators in this.__validationResult. Can\nalso filter out occurrences (based on interaction states)",
              "return": {
                "type": {
                  "text": "Validator[]"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "hasFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "As soon as validation happens (after modelValue/validators/validator param change), this\narray is updated with the active ValidationTypes ('error'|'warning'|'success'|'info' etc.).\nNotice the difference with `.showsFeedbackFor`, which filters `.hasFeedbackFor` based on\n`.feedbackCondition()`.\n\nFor styling purposes, will be reflected to [has-feedback-for=\"error warning\"]. This can\nbe useful for subtle visual feedback on keyup, like a red/green border around an input.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "showsFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "Based on outcome of feedbackCondition, this array decides what ValidationTypes should be\nshown in validationFeedback, based on meta data like interaction states.\n\nFor styling purposes, it reflects it `[shows-feedback-for=\"error warning\"]`",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shouldShowFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "A temporary storage to transition from hasFeedbackFor to showsFeedbackFor",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationStates",
              "type": {
                "text": "Object.<string, Object.<string, boolean>>"
              },
              "description": "The outcome of a validation 'round'. Keyed by ValidationType and Validator name",
              "default": "{}",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "isPending",
              "type": {
                "text": "boolean"
              },
              "description": "Flag indicating whether async validation is pending.\nCreates attribute [is-pending] as a styling hook",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Application Developers to add Validators to a FormControl.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "defaultValidators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Subclassers to add default Validators to a particular FormControl.\nA date input for instance, always needs the isDate validator.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_visibleMessagesAmount",
              "type": {
                "text": "number"
              },
              "description": "The amount of feedback messages that will visible in LionValidationFeedback",
              "privacy": "protected",
              "default": "1",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__syncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__asyncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__validationResult",
              "type": {
                "text": "Validator[]"
              },
              "description": "Aggregated result from sync Validators, async Validators and ResultValidators",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevShownValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__childModelValueChanged",
              "type": {
                "text": "boolean"
              },
              "description": "The updated children validity affects the validity of the parent. Helper to recompute\nvalidatity of parent FormGroup",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The label text for the input node.\nWhen no value is defined, textContent of [slot=label] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "description": "The helpt text for the input node.\nWhen no value is defined, textContent of [slot=help-text] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "fieldName",
              "description": "Will be used in validation messages to refer to the current field",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_labelNode",
              "description": "Element where label will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_helpTextNode",
              "description": "Element where help text will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackNode",
              "description": "Element where validation feedback will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11y",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11yForAdditionalSlots",
              "parameters": [
                {
                  "name": "additionalSlots",
                  "default": "['prefix', 'suffix', 'before', 'after']",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Enhances additional slots(prefix, suffix, before, after) defined by developer.\n\nWhen boolean attribute data-label or data-description is found,\nthe slot element will be connected to the input via aria-labelledby or aria-describedby",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__reflectAriaAttr",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "reorder",
                  "type": {
                    "text": "boolean|undefined"
                  }
                }
              ],
              "description": "Will handle help text, validation feedback and character counter,\nprefix/suffix/before/after (if they contain data-description flag attr).\nAlso, contents of id references that will be put in the <lion-field>._ariaDescribedby property\nfrom an external context, will be read by a screen reader.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Default Render Result:\n<div class=\"form-field__group-one\">\n  <div class=\"form-field__label\">\n    <slot name=\"label\"></slot>\n  </div>\n  <small class=\"form-field__help-text\">\n    <slot name=\"help-text\"></slot>\n  </small>\n</div>\n<div class=\"form-field__group-two\">\n  <div class=\"input-group\">\n    <div class=\"input-group__before\">\n      <slot name=\"before\"></slot>\n    </div>\n    <div class=\"input-group__container\">\n      <div class=\"input-group__prefix\">\n        <slot name=\"prefix\"></slot>\n      </div>\n      <div class=\"input-group__input\">\n        <slot name=\"input\"></slot>\n      </div>\n      <div class=\"input-group__suffix\">\n        <slot name=\"suffix\"></slot>\n      </div>\n    </div>\n    <div class=\"input-group__after\">\n      <slot name=\"after\"></slot>\n    </div>\n  </div>\n  <div class=\"form-field__feedback\">\n    <slot name=\"feedback\"></slot>\n  </div>\n</div>",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupOneTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupTwoTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_helpTextTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupBeforeTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupPrefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupSuffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupAfterTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_feedbackTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "parameters": [
                {
                  "name": "modelValue",
                  "default": "(this).modelValue",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Used for Required validation and computation of interaction states",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "{block} .input-group\n\nStructure:\n- {element} .input-group__before (optional) : a prefix that resides outside the container\n- {element} .input-group__container : an inner container: this element contains all styling\n - {element} .input-group__prefix (optional) : a prefix that resides in the container,\n              allowing it to be detectable as a :first-child\n - {element} .input-group__input : a wrapper around the form-control component\n  - {block} .form-control : the actual input element (input/select/textarea)\n - {element} .input-group__suffix (optional) : a suffix that resides inside the container,\n              allowing it to be detectable as a :last-child\n - {element} .input-group__bottom (optional) : placeholder element for additional styling\n              (like an animated line for material design input)\n- {element} .input-group__after (optional) :  a suffix that resides outside the container",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getAriaDescriptionElements",
              "description": "This function exposes descripion elements that a FormGroup should expose to its\nchildren. See FormGroupMixin.__getAllDescriptionElementsInParentChain()",
              "return": {
                "type": {
                  "text": "Array.<HTMLElement>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add element references to aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getDirectSlotChild",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchInitialModelValueChangedEvent",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to add logic before repropagation",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__repropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_repropagationCondition",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "description": "Based on provided target, this condition determines whether received model-value-changed\nevent should be repropagated",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onLabelClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the element will be registered with to the .formElements collection\nof the parent. Also, it serves as the key of key/value pairs in\n modelValue/serializedValue objects",
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "A Boolean attribute which, if present, indicates that the user should not be able to edit\nthe value of the input. The difference between disabled and readonly is that read-only\ncontrols can still function, whereas disabled controls generally do not function as\ncontrols until they are enabled.\n(From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputId",
              "description": "Unique id that can be used in all light dom",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaLabelledNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-labelledby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaDescribedNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-describedby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_repropagationRole",
              "type": {
                "text": "'child'|'choice-group'|'fieldset'"
              },
              "description": "Based on the role, details of handling model-value-changed repropagation differ.",
              "default": "'child'",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isRepropagationEndpoint",
              "type": {
                "text": "boolean"
              },
              "description": "By default, a field with _repropagationRole 'choice-group' will act as an\n'endpoint'. This means it will be considered as an individual field: for\na select, individual options will not be part of the formPath. They\nwill.\nSimilarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n(from Application Developer perspective) need to be more like fields\n(think of an amount-input with a currency select box next to it), can set this\nto true to hide private internals in the formPath.",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableHasChanged",
              "static": true,
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Makes the propertyAccessor.`hasChanged` compatible in synchronous updates",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableInitialize",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__SyncUpdatableNamespace",
              "type": {
                "text": "SyncUpdatableNamespace"
              },
              "description": "Namespace for this mixin that guarantees naming clashes will not occur...",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__renderAsNodes",
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "parameters": [
                {
                  "name": "slotName",
                  "description": "Name of the slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__privateSlots",
              "privacy": "private",
              "default": "new Set(null)",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "static": true,
              "description": "Obtains the ShadowRoot options.",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "ShadowRootInit"
                  }
                }
              ],
              "type": {
                "text": "ShadowRootInit"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "static": true,
              "description": "Obtains the element styles.",
              "return": {
                "type": {
                  "text": "CSSResultFlatArray"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registry",
              "description": "Set the CustomElementRegistry associated to the ShadowRoot",
              "return": {
                "type": {
                  "text": "CustomElementRegistry"
                }
              },
              "parameters": [
                {
                  "name": "registry",
                  "type": {
                    "text": "CustomElementRegistry"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "defineScopedElement",
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "klass",
                  "type": {
                    "text": "typeof HTMLElement"
                  }
                }
              ],
              "description": "Defines a scoped element.",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "getScopedTagName",
              "static": true,
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Calls `focus()` on focusable element within",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Calls `blur()` on focusable element within",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onBlur",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__registerEventsForFocusMixin",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__teardownEventsForFocusMixin",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) is focused.\nReflects to attribute '[focused]' as a styling hook",
              "default": "false",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "focusedVisible",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) matches ':focus-visible'\nReflects to attribute '[focused-visible]' as a styling hook\nSee: https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible",
              "default": "false",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormatMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
            },
            {
              "name": "FocusMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
            },
            {
              "name": "FormControlMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
            },
            {
              "name": "dedupeMixin",
              "package": "@lion/core"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "description": "} superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "NativeTextFieldMixin"
          },
          "events": [
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "user-input-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "name": "showsFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "shouldShowFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "validate-performed",
              "type": {
                "text": "Event"
              },
              "description": "private event that should be listened to by LionFieldSet",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "form-element-name-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            },
            {
              "name": "focus",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "blur",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "focusin",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "focusout",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NativeTextFieldMixin",
          "declaration": {
            "name": "NativeTextFieldMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/NativeTextFieldMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/FocusMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/FormatMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/FormControlMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/FormRegistrationMixins.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/InteractionStateMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/lion-field.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/NativeTextFieldMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/ExampleValidators.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AlwaysInvalid",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "AlwaysValid",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "AsyncAlwaysValid",
          "superclass": {
            "name": "AlwaysValid",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/ExampleValidators.d.ts"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<boolean> | boolean"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "AsyncAlwaysInvalid",
          "superclass": {
            "name": "AlwaysValid",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/ExampleValidators.d.ts"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<boolean> | boolean"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AlwaysInvalid",
          "declaration": {
            "name": "AlwaysInvalid",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/ExampleValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "AlwaysValid",
          "declaration": {
            "name": "AlwaysValid",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/ExampleValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "AsyncAlwaysValid",
          "declaration": {
            "name": "AsyncAlwaysValid",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/ExampleValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "AsyncAlwaysInvalid",
          "declaration": {
            "name": "AsyncAlwaysInvalid",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/ExampleValidators.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/ExampleValidators.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AlwaysInvalid",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "AlwaysValid",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<boolean> | boolean"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "AsyncAlwaysValid",
          "members": [
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "AlwaysValid",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/ExampleValidators.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "AsyncAlwaysInvalid",
          "members": [
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "AlwaysValid",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/ExampleValidators.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AlwaysInvalid",
          "declaration": {
            "name": "AlwaysInvalid",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/ExampleValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "AlwaysValid",
          "declaration": {
            "name": "AlwaysValid",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/ExampleValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "AsyncAlwaysValid",
          "declaration": {
            "name": "AsyncAlwaysValid",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/ExampleValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "AsyncAlwaysInvalid",
          "declaration": {
            "name": "AsyncAlwaysInvalid",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/ExampleValidators.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/getFormControlMembers.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getFormControlMembers",
          "return": {
            "type": {
              "text": "{\n    _inputNode: any;\n    _helpTextNode: HTMLElement;\n    _labelNode: HTMLElement;\n    _feedbackNode: import(\"..\").LionValidationFeedback;\n    _allValidators: any;\n}"
            }
          },
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "FormControlHost"
              }
            }
          ],
          "description": "Exposes private and protected FormControl members"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getFormControlMembers",
          "declaration": {
            "name": "getFormControlMembers",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/getFormControlMembers.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/getFormControlMembers.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getFormControlMembers",
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "FormControlHost"
              }
            }
          ],
          "description": "Exposes private and protected FormControl members"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getFormControlMembers",
          "declaration": {
            "name": "getFormControlMembers",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/getFormControlMembers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./ExampleValidators.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./getFormControlMembers.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test-helpers/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./ExampleValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./getFormControlMembers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/types/FocusMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FocusHost",
          "members": [
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) is focused.\nReflects to attribute '[focused]' as a styling hook"
            },
            {
              "kind": "field",
              "name": "focusedVisible",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) matches ':focus-visible'\nReflects to attribute '[focused-visible]' as a styling hook"
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Calls `focus()` on focusable element within"
            },
            {
              "kind": "method",
              "name": "blur",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Calls `blur()` on focusable element within"
            },
            {
              "kind": "field",
              "name": "_focusableNode",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected",
              "description": "The focusable element:\ncould be an input, textarea, select, button or any other element with tabindex > -1"
            },
            {
              "kind": "method",
              "name": "__onFocus",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__onBlur",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__registerEventsForFocusMixin",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__teardownEventsForFocusMixin",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "FocusImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<FocusHost> &\n  Pick<typeof FocusHost, keyof typeof FocusHost> &\n  Pick<typeof LitElement, keyof typeof LitElement>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FocusHost",
          "declaration": {
            "name": "FocusHost",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/FocusMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "FocusImplementation",
          "declaration": {
            "name": "FocusImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/FocusMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/types/FormatMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormatHost",
          "members": [
            {
              "kind": "method",
              "name": "parser",
              "return": {
                "type": {
                  "text": "*"
                }
              },
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "string"
                  },
                  "description": "viewValue: the formatted value inside <input>"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "FormatOptions"
                  }
                }
              ],
              "description": "Converts viewValue to modelValue\nFor instance, a localized date to a Date Object"
            },
            {
              "kind": "method",
              "name": "formatter",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "*"
                  },
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)"
                },
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "FormatOptions"
                  }
                }
              ],
              "description": "Converts modelValue to formattedValue (formattedValue will be synced with\n`._inputNode.value`)\nFor instance, a Date object to a localized date."
            },
            {
              "kind": "method",
              "name": "serializer",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "?"
                  },
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)"
                }
              ],
              "description": "Converts `.modelValue` to `.serializedValue`\nFor instance, a Date object to an iso formatted date string"
            },
            {
              "kind": "method",
              "name": "deserializer",
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "?"
                  },
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)"
                }
              ],
              "description": "Converts `.serializedValue` to `.modelValue`\nFor instance, an iso formatted date string to a Date object"
            },
            {
              "kind": "method",
              "name": "preprocessor",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "string"
                  },
                  "description": "the raw value from the <input> after keyUp/Down event"
                }
              ],
              "description": "Preprocesses the viewValue before it's parsed to a modelValue. Can be used to filter\ninvalid input amongst others."
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "type": {
                "text": "string|undefined"
              },
              "description": "The view value is the result of the formatter function (when available).\nThe result will be stored in the native _inputNode (usually an input[type=text]).\n\nExamples:\n- For a date input, this would be '20/01/1999' (dependent on locale).\n- For a number input, this could be '1,234.56' (a String representation of modelValue\n1234.56)"
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "type": {
                "text": "string | undefined"
              },
              "description": "The serialized version of the model value.\nThis value exists for maximal compatibility with the platform API.\nThe serialized value can be an interface in context where data binding is not\nsupported and a serialized string needs to be set.\n\nExamples:\n- For a date input, this would be the iso format of a date, e.g. '1999-01-20'.\n- For a number input this would be the String representation of a float ('1234.56'\n  instead of 1234.56)\n\nWhen no parser is available, the value is usually the same as the formattedValue\n(being _inputNode.value)"
            },
            {
              "kind": "field",
              "name": "formatOn",
              "type": {
                "text": "string"
              },
              "description": "Event that will trigger formatting (more precise, visual update of the view, so the\nuser sees the formatted value)\nDefault: 'change'",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "formatOptions",
              "type": {
                "text": "FormatNumberOptions"
              },
              "description": "Configuration object that will be available inside the formatter function"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The view value. Will be delegated to `._inputNode.value`"
            },
            {
              "kind": "field",
              "name": "_isHandlingUserInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "description": "Flag that will be set when user interaction takes place (for instance after an 'input'\nevent). Will be added as meta info to the `model-value-changed` event. Depending on\nwhether a user is interacting, formatting logic will be handled differently."
            },
            {
              "kind": "field",
              "name": "_isPasting",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "description": "Whether the user is pasting content. Allows Subclassers to do this in their subclass:"
            },
            {
              "kind": "method",
              "name": "_calculateValues",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opts",
                  "type": {
                    "text": "{ source: 'model' | 'serialized' | 'formatted' | null }"
                  }
                },
                {
                  "description": "the type of value that triggered this method. It should not be set again, so that its\nobserver won't be triggered. Can be: 'model'|'formatted'|'serialized'.",
                  "name": "config",
                  "type": {
                    "text": "{source:'model'|'serialized'|'formatted'|null}"
                  }
                }
              ],
              "description": "Responsible for storing all representations(modelValue, serializedValue, formattedValue\nand value) of the input value. Prevents infinite loops, so all value observers can be\ntreated like they will only be called once, without indirectly calling other observers.\n(in fact, some are called twice, but the __preventRecursiveTrigger lock prevents the\nsecond call from having effect)."
            },
            {
              "kind": "method",
              "name": "_onModelValueChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "arg",
                  "type": {
                    "text": "{ modelValue: unknown }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_dispatchModelValueChangedEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_syncValueUpwards",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Synchronization from `._inputNode.value` to `LionField` (flow [2])\nDownwards syncing should only happen for `LionField`.value changes from 'above'.\nThis triggers _onModelValueChanged and connects user input\nto the parsing/formatting/serializing loop."
            },
            {
              "kind": "method",
              "name": "_reflectBackFormattedValueToUser",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_reflectBackFormattedValueDebounced",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_reflectBackOn",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Every time .formattedValue is attempted to sync to the view value (on change/blur and on\nmodelValue change), this condition is checked. When enhancing it, it's recommended to\ncall `super._reflectBackOn()`"
            },
            {
              "kind": "method",
              "name": "_proxyInputEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This can be called whenever the view value should be updated. Dependent on component type\n(\"input\" for <input> or \"change\" for <select>(mainly for IE)) a different event should be\nused  as source for the \"user-input-changed\" event (which can be seen as an abstraction\nlayer on top of other events (input, change, whatever))"
            },
            {
              "kind": "method",
              "name": "_onUserInputChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_callParser",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_callFormatter",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "__preventRecursiveTrigger",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__prevViewValue",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            }
          ]
        },
        {
          "kind": "function",
          "name": "FormatImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<FormatHost> &\n  Pick<typeof FormatHost, keyof typeof FormatHost> &\n  Constructor<ValidateHost> &\n  Pick<typeof ValidateHost, keyof typeof ValidateHost> &\n  Constructor<FormControlHost> &\n  Pick<typeof FormControlHost, keyof typeof FormControlHost> &\n  Pick<typeof LitElement, keyof typeof LitElement>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormatHost",
          "declaration": {
            "name": "FormatHost",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/FormatMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormatImplementation",
          "declaration": {
            "name": "FormatImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/FormatMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/types/FormControlMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormControlHost",
          "members": [
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "A boolean attribute which, if present, indicates that the user should not be able to edit\nthe value of the input. The difference between disabled and readonly is that read-only\ncontrols can still function, whereas disabled controls generally do not function as\ncontrols until they are enabled.\nSee: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the element will be registered with to the .formElements collection\nof the parent. Also, it serves as the key of key/value pairs in\n modelValue/serializedValue objects"
            },
            {
              "kind": "field",
              "name": "modelValue",
              "type": {
                "text": "any | Unparseable"
              },
              "description": "The model value is the result of the parser function(when available).\nIt should be considered as the internal value used for validation and reasoning/logic.\nThe model value is 'ready for consumption' by the outside world (think of a Date\nobject or a float). The modelValue can(and is recommended to) be used as both input\nvalue and output value of the `LionField`.\n\nExamples:\n- For a date input: a String '20/01/1999' will be converted to new Date('1999/01/20')\n- For a number input: a formatted String '1.234,56' will be converted to a Number:\n  1234.56"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label text for the input node.\nWhen no light dom defined via [slot=label], this value will be used"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "description": "The helpt text for the input node.\nWhen no light dom defined via [slot=help-text], this value will be used"
            },
            {
              "kind": "field",
              "name": "fieldName",
              "description": "Will be used in validation messages to refer to the current field",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaLabelledBy",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "customConfig",
                  "optional": true,
                  "type": {
                    "text": "{\n      idPrefix?: string | undefined;\n      reorder?: boolean | undefined;\n    }"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-labelledby attribute."
            },
            {
              "kind": "method",
              "name": "addToAriaDescribedBy",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "customConfig",
                  "optional": true,
                  "type": {
                    "text": "{\n      idPrefix?: string | undefined;\n      reorder?: boolean | undefined;\n    }"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-describedby attribute."
            },
            {
              "kind": "method",
              "name": "removeFromAriaLabelledBy",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "customConfig",
                  "optional": true,
                  "type": {
                    "text": "{\n      reorder?: boolean | undefined;\n    }"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-labelledby attribute."
            },
            {
              "kind": "method",
              "name": "removeFromAriaDescribedBy",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "customConfig",
                  "optional": true,
                  "type": {
                    "text": "{\n      reorder?: boolean | undefined;\n    }"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-describedby attribute."
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "type": {
                "text": "HTMLElementWithValue | HTMLInputElement | HTMLTextAreaElement"
              },
              "privacy": "protected",
              "description": "The interactive (form) element. Can be a native element like input/textarea/select or\nan element with tabindex > -1"
            },
            {
              "kind": "field",
              "name": "_labelNode",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected",
              "description": "Element where label will be rendered to"
            },
            {
              "kind": "field",
              "name": "_helpTextNode",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected",
              "description": "Element where help text will be rendered to"
            },
            {
              "kind": "field",
              "name": "_feedbackNode",
              "type": {
                "text": "LionValidationFeedback"
              },
              "privacy": "protected",
              "description": "Element where validation feedback will be rendered to"
            },
            {
              "kind": "field",
              "name": "_inputId",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "description": "Unique id that can be used in all light dom"
            },
            {
              "kind": "field",
              "name": "_ariaLabelledNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "protected",
              "description": "Contains all elements that should end up in aria-labelledby of `._inputNode`"
            },
            {
              "kind": "field",
              "name": "_ariaDescribedNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "protected",
              "description": "Contains all elements that should end up in aria-describedby of `._inputNode`"
            },
            {
              "kind": "field",
              "name": "_repropagationRole",
              "type": {
                "text": "'child' | 'choice-group' | 'fieldset'"
              },
              "privacy": "protected",
              "description": "Based on the role, details of handling model-value-changed repropagation differ."
            },
            {
              "kind": "field",
              "name": "_isRepropagationEndpoint",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "description": "By default, a field with _repropagationRole 'choice-group' will act as an\n'endpoint'. This means it will be considered as an individual field: for\na select, individual options will not be part of the formPath. They\nwill.\nSimilarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n(from Application Developer perspective) need to be more like fields\n(think of an amount-input with a currency select box next to it), can set this\nto true to hide private internals in the formPath."
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "type": {
                "text": "FormControlHost | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_groupOneTemplate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_groupTwoTemplate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_helpTextTemplate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupTemplate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupBeforeTemplate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupPrefixTemplate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupSuffixTemplate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupAfterTemplate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_feedbackTemplate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomClasses",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11y",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11yForAdditionalSlots",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "additionalSlots",
                  "optional": true,
                  "type": {
                    "text": "string[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getAriaDescriptionElements",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLElement[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "_dispatchInitialModelValueChangedEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_repropagationCondition",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "__helpText",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__label",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__fieldName",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__reorderAriaLabelledNodes",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__reflectAriaAttr",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "reorder",
                  "type": {
                    "text": "boolean | undefined"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "__reorderAriaDescribedNodes",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__getDirectSlotChild",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              },
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "__repropagateChildrenInitialized",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__repropagateChildrenValues",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "function",
          "name": "FormControlImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<FormControlHost> &\n  Pick<typeof FormControlHost, keyof typeof FormControlHost> &\n  Constructor<FormRegisteringHost> &\n  Pick<typeof FormRegisteringHost, keyof typeof FormRegisteringHost> &\n  Constructor<DisabledHost> &\n  Pick<typeof DisabledHost, keyof typeof DisabledHost> &\n  Constructor<SlotHost> &\n  Pick<typeof SlotHost, keyof typeof SlotHost> &\n  Pick<typeof LitElement, keyof typeof LitElement>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormControlHost",
          "declaration": {
            "name": "FormControlHost",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/FormControlMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormControlImplementation",
          "declaration": {
            "name": "FormControlImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/FormControlMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/types/InteractionStateMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "InteractionStateHost",
          "members": [
            {
              "kind": "field",
              "name": "touched",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has focused and left(blurred) the field."
            },
            {
              "kind": "field",
              "name": "dirty",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has changed the value of the field."
            },
            {
              "kind": "field",
              "name": "prefilled",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has left non-empty field or input is prefilled.\nThe name must be seen from the point of view of the input field:\nonce the user enters the input field, the value is non-empty."
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "description": "True when the modelValue is non-empty (see _isEmpty in FormControlMixin)"
            },
            {
              "kind": "field",
              "name": "submitted",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has attempted to submit the form, e.g. through a button\nof type=\"submit\""
            },
            {
              "kind": "method",
              "name": "initInteractionState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Evaluations performed on connectedCallback.\nThis method is public, so it can be called at a later moment (when we need to wait for\nregistering children for instance) as well.\nSince this method will be called twice in last mentioned scenario, it must stay idempotent."
            },
            {
              "kind": "method",
              "name": "resetInteractionState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resets touched and dirty, and recomputes prefilled"
            },
            {
              "kind": "field",
              "name": "_leaveEvent",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "description": "The event that triggers the touched state"
            },
            {
              "kind": "field",
              "name": "_valueChangedEvent",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "description": "The event that triggers the dirty state"
            },
            {
              "kind": "method",
              "name": "_iStateOnLeave",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets touched value to true and reevaluates prefilled state.\nWhen false, on next interaction, user will start with a clean state."
            },
            {
              "kind": "method",
              "name": "_iStateOnValueChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets dirty value and validates when already touched or invalid"
            },
            {
              "kind": "method",
              "name": "_onTouchedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Dispatches event on touched state change"
            },
            {
              "kind": "method",
              "name": "_onDirtyChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Dispatches event on touched state change"
            }
          ]
        },
        {
          "kind": "function",
          "name": "InteractionStateImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<InteractionStateHost> &\n  Pick<typeof InteractionStateHost, keyof typeof InteractionStateHost> &\n  Constructor<FormControlHost> &\n  Pick<typeof FormControlHost, keyof typeof FormControlHost> &\n  Pick<typeof LitElement, keyof typeof LitElement>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InteractionStateHost",
          "declaration": {
            "name": "InteractionStateHost",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/InteractionStateMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "InteractionStateImplementation",
          "declaration": {
            "name": "InteractionStateImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/InteractionStateMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/types/NativeTextFieldMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NativeTextFieldHost",
          "members": [
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Delegates autocomplete to input/textarea"
            },
            {
              "kind": "field",
              "name": "selectionStart",
              "type": {
                "text": "number"
              },
              "description": "Delegates selectionStart to input/textarea"
            },
            {
              "kind": "field",
              "name": "selectionEnd",
              "type": {
                "text": "number"
              },
              "description": "Delegates selectionEnd to input/textarea"
            },
            {
              "kind": "method",
              "name": "_setValueAndPreserveCaret",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Restores the cursor to its original position after updating the value."
            }
          ]
        },
        {
          "kind": "function",
          "name": "NativeTextFieldImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<NativeTextFieldHost> &\n  Pick<typeof NativeTextFieldHost, keyof typeof NativeTextFieldHost> &\n  Constructor<FormatHost> &\n  Pick<typeof FormatHost, keyof typeof FormatHost> &\n  Constructor<FocusHost> &\n  Pick<typeof FocusHost, keyof typeof FocusHost> &\n  Constructor<FormControlHost> &\n  Pick<typeof FormControlHost, keyof typeof FormControlHost>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NativeTextFieldHost",
          "declaration": {
            "name": "NativeTextFieldHost",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/NativeTextFieldMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "NativeTextFieldImplementation",
          "declaration": {
            "name": "NativeTextFieldImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/NativeTextFieldMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/docs/listboxData.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "listboxData",
          "type": {
            "text": "array"
          },
          "default": "[\n  'Apple',\n  'Artichoke',\n  'Asparagus',\n  'Banana',\n  'Beets',\n  'Bell pepper',\n  'Broccoli',\n  'Brussels sprout',\n  'Cabbage',\n  'Carrot',\n  'Cauliflower',\n  'Celery',\n  'Chard',\n  'Chicory',\n  'Corn',\n  'Cucumber',\n  'Daikon',\n  'Date',\n  'Edamame',\n  'Eggplant',\n  'Elderberry',\n  'Fennel',\n  'Fig',\n  'Garlic',\n  'Grape',\n  'Honeydew melon',\n  'Iceberg lettuce',\n  'Jerusalem artichoke',\n  'Kale',\n  'Kiwi',\n  'Leek',\n  'Lemon',\n  'Mango',\n  'Mangosteen',\n  'Melon',\n  'Mushroom',\n  'Nectarine',\n  'Okra',\n  'Olive',\n  'Onion',\n  'Orange',\n  'Parship',\n  'Pea',\n  'Pear',\n  'Pineapple',\n  'Potato',\n  'Pumpkin',\n  'Quince',\n  'Radish',\n  'Rhubarb',\n  'Shallot',\n  'Spinach',\n  'Squash',\n  'Strawberry',\n  'Sweet potato',\n  'Tomato',\n  'Turnip',\n  'Ugli fruit',\n  'Victoria plum',\n  'Watercress',\n  'Watermelon',\n  'Yam',\n  'Zucchini',\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "listboxData",
          "declaration": {
            "name": "listboxData",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/docs/listboxData.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/src/LionListbox.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "LionListbox: implements the wai-aria listbox design pattern and integrates it as a Lion\nFormControl",
          "name": "LionListbox",
          "superclass": {
            "name": "LionListbox_base",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionListbox.d.ts"
          },
          "tagName": "lion-listbox",
          "customElement": true,
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "{block} .input-group\n\nStructure:\n- {element} .input-group__before (optional) : a prefix that resides outside the container\n- {element} .input-group__container : an inner container: this element contains all styling\n - {element} .input-group__prefix (optional) : a prefix that resides in the container,\n              allowing it to be detectable as a :first-child\n - {element} .input-group__input : a wrapper around the form-control component\n  - {block} .form-control : the actual input element (input/select/textarea)\n - {element} .input-group__suffix (optional) : a suffix that resides inside the container,\n              allowing it to be detectable as a :last-child\n - {element} .input-group__bottom (optional) : placeholder element for additional styling\n              (like an animated line for material design input)\n- {element} .input-group__after (optional) :  a suffix that resides outside the container",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "description": "Obtains the scoped elements definitions map if specified.",
              "return": {
                "type": {
                  "text": "ScopedElementsMap"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "slots",
              "return": {
                "type": {
                  "text": "SlotsMap"
                }
              },
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "description": "The interactive (form) element. Can be a native element like input/textarea/select or\nan element with tabindex > -1",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxNode",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxActiveDescendantNode",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxSlot",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_scrollTargetNode",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_activeDescendantOwnerNode",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "activeIndex",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "checkedIndex",
              "type": {
                "text": "number | number[]"
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number|number[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "description": "Empty pending queue in order to guarantee order independence",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "setCheckedIndex",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number|number[]"
                  }
                }
              ],
              "description": "If an array is passed for multiple-choice, it will check the indexes in array, and uncheck the rest\nIf a number is passed, the item with the passed index is checked without unchecking others\nFor single choice, __onChildCheckedChanged we ensure that we uncheck siblings",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addFormElement",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControlHost & LionOption"
                  }
                },
                {
                  "name": "indexToInsertAt",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "resetInteractionState",
              "description": "Resets touched and dirty, and recomputes prefilled",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "clear",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getCheckedElements",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_setupListboxNode",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onListboxContentChanged",
              "description": "A Subclasser can perform additional logic whenever the elements inside the listbox are\nupdated. For instance, when a combobox does server side autocomplete, we want to\nmatch highlighted parts client side.",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_teardownListboxNode",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getNextEnabledOption",
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "default": "1",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getPreviousEnabledOption",
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "default": "-1",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onChildActiveChanged",
              "parameters": [
                {
                  "name": "{ target }"
                },
                {
                  "name": "ev",
                  "type": {
                    "text": "Event & { target: LionOption }"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_listboxOnKeyDown",
              "parameters": [
                {
                  "name": "ev",
                  "description": "the keydown event object",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_listboxOnClick",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_listboxOnKeyUp",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onLabelClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_scrollIntoView",
              "parameters": [
                {
                  "name": "el",
                  "description": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "scrollTargetEl",
                  "description": "container",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupEventListeners",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__teardownEventListeners",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setChildActive",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "LionOption | null"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_uncheckChildren",
              "parameters": [
                {
                  "name": "exclude",
                  "default": "[]",
                  "optional": true,
                  "type": {
                    "text": "LionOption|LionOption[]"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onChildCheckedChanged",
              "parameters": [
                {
                  "name": "cfgOrEvent",
                  "type": {
                    "text": "Event & { target: LionOption }"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setAttributeForAllFormElements",
              "parameters": [
                {
                  "name": "attribute",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "// TODO: add to choiceGroup",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__proxyChildModelValueChanged",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent & { target: LionOption; }"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getEnabledOption",
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__moveOptionsToListboxNode",
              "description": "Moves options put in unnamed slot to slot with [role=\"listbox\"]",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__preventScrollingWithArrowKeys",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupListboxNodeInteractions",
              "description": "Helper method used within `._setupListboxNode`",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__requestOptionsToBeDisabled",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__retractRequestOptionsToBeDisabled",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__initInteractionStates",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "hasNoDefaultSelected",
              "type": {
                "text": "boolean"
              },
              "description": "When setting this to true, on initial render, no option will be selected.\nIt is advisable to override `_noSelectionTemplate` method in the select-invoker\nto render some kind of placeholder initially",
              "default": "false",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "string"
              },
              "description": "Informs screen reader and affects keyboard navigation.\nBy default 'vertical'",
              "default": "'vertical'",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "rotateKeyboardNavigation",
              "type": {
                "text": "boolean"
              },
              "description": "Will give first option active state when navigated to the next option from\nlast option.",
              "default": "false",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "selectionFollowsFocus",
              "type": {
                "text": "boolean"
              },
              "description": "When true, will synchronize activedescendant and selected element on\narrow key navigation.\nThis behavior can usually be seen on <select> on the Windows platform.\nNote that this behavior cannot be used when multiple-choice is true.\nSee: https://www.w3.org/TR/wai-aria-practices/#kbd_selection_follows_focus",
              "default": "false",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxActiveDescendant",
              "type": {
                "text": "number | null"
              },
              "privacy": "protected",
              "default": "null",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__hasInitialSelectedFormElement",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_repropagationRole",
              "type": {
                "text": "'child'|'choice-group'|'fieldset'"
              },
              "description": "Based on the role, details of handling model-value-changed repropagation differ.",
              "default": "'choice-group'",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxReceivesNoFocus",
              "type": {
                "text": "boolean"
              },
              "description": "When listbox is coupled to a textbox (in case we are dealing with a combobox),\nspaces should not select an element (they need to be put in the textbox)",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_oldModelValue",
              "type": {
                "text": "string | string[] | undefined"
              },
              "privacy": "protected",
              "default": "undefined",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The label text for the input node.\nWhen no value is defined, textContent of [slot=label] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "description": "The helpt text for the input node.\nWhen no value is defined, textContent of [slot=help-text] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "fieldName",
              "description": "Will be used in validation messages to refer to the current field",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_labelNode",
              "description": "Element where label will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_helpTextNode",
              "description": "Element where help text will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackNode",
              "description": "Element where validation feedback will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11y",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11yForAdditionalSlots",
              "parameters": [
                {
                  "name": "additionalSlots",
                  "default": "['prefix', 'suffix', 'before', 'after']",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Enhances additional slots(prefix, suffix, before, after) defined by developer.\n\nWhen boolean attribute data-label or data-description is found,\nthe slot element will be connected to the input via aria-labelledby or aria-describedby",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__reflectAriaAttr",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "reorder",
                  "type": {
                    "text": "boolean|undefined"
                  }
                }
              ],
              "description": "Will handle help text, validation feedback and character counter,\nprefix/suffix/before/after (if they contain data-description flag attr).\nAlso, contents of id references that will be put in the <lion-field>._ariaDescribedby property\nfrom an external context, will be read by a screen reader.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Default Render Result:\n<div class=\"form-field__group-one\">\n  <div class=\"form-field__label\">\n    <slot name=\"label\"></slot>\n  </div>\n  <small class=\"form-field__help-text\">\n    <slot name=\"help-text\"></slot>\n  </small>\n</div>\n<div class=\"form-field__group-two\">\n  <div class=\"input-group\">\n    <div class=\"input-group__before\">\n      <slot name=\"before\"></slot>\n    </div>\n    <div class=\"input-group__container\">\n      <div class=\"input-group__prefix\">\n        <slot name=\"prefix\"></slot>\n      </div>\n      <div class=\"input-group__input\">\n        <slot name=\"input\"></slot>\n      </div>\n      <div class=\"input-group__suffix\">\n        <slot name=\"suffix\"></slot>\n      </div>\n    </div>\n    <div class=\"input-group__after\">\n      <slot name=\"after\"></slot>\n    </div>\n  </div>\n  <div class=\"form-field__feedback\">\n    <slot name=\"feedback\"></slot>\n  </div>\n</div>",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupOneTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupTwoTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_helpTextTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupBeforeTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupPrefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupSuffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupAfterTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_feedbackTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "parameters": [
                {
                  "name": "modelValue",
                  "default": "(this).modelValue",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Used for Required validation and computation of interaction states",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getAriaDescriptionElements",
              "description": "This function exposes descripion elements that a FormGroup should expose to its\nchildren. See FormGroupMixin.__getAllDescriptionElementsInParentChain()",
              "return": {
                "type": {
                  "text": "Array.<HTMLElement>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add element references to aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getDirectSlotChild",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchInitialModelValueChangedEvent",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to add logic before repropagation",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__repropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_repropagationCondition",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "description": "Based on provided target, this condition determines whether received model-value-changed\nevent should be repropagated",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the element will be registered with to the .formElements collection\nof the parent. Also, it serves as the key of key/value pairs in\n modelValue/serializedValue objects",
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "A Boolean attribute which, if present, indicates that the user should not be able to edit\nthe value of the input. The difference between disabled and readonly is that read-only\ncontrols can still function, whereas disabled controls generally do not function as\ncontrols until they are enabled.\n(From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputId",
              "description": "Unique id that can be used in all light dom",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaLabelledNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-labelledby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaDescribedNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-describedby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isRepropagationEndpoint",
              "type": {
                "text": "boolean"
              },
              "description": "By default, a field with _repropagationRole 'choice-group' will act as an\n'endpoint'. This means it will be considered as an individual field: for\na select, individual options will not be part of the formPath. They\nwill.\nSimilarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n(from Application Developer perspective) need to be more like fields\n(think of an amount-input with a currency select box next to it), can set this\nto true to hide private internals in the formPath.",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "static": true,
              "description": "Obtains the ShadowRoot options.",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "ShadowRootInit"
                  }
                }
              ],
              "type": {
                "text": "ShadowRootInit"
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "static": true,
              "description": "Obtains the element styles.",
              "return": {
                "type": {
                  "text": "CSSResultFlatArray"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registry",
              "description": "Set the CustomElementRegistry associated to the ShadowRoot",
              "return": {
                "type": {
                  "text": "CustomElementRegistry"
                }
              },
              "parameters": [
                {
                  "name": "registry",
                  "type": {
                    "text": "CustomElementRegistry"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "defineScopedElement",
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "klass",
                  "type": {
                    "text": "typeof HTMLElement"
                  }
                }
              ],
              "description": "Defines a scoped element.",
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "getScopedTagName",
              "static": true,
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "modelValue",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_completeRegistration",
              "description": "Resolves the registrationComplete promise. Subclassers can delay if needed",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElementsFilter",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "FormControl"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "A filter function which will exclude a form field when returning false\nBy default, exclude form fields which are disabled\n\nThe type is be passed as well for more fine grained control, e.g.\ndistinguish the filter when fetching modelValue versus serializedValue",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElements",
              "parameters": [
                {
                  "name": "property",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "filterFn",
                  "optional": true,
                  "type": {
                    "text": "(el: FormControl, property?: string) => boolean"
                  }
                }
              ],
              "description": "Implicit :( @override for FormGroupMixin, as choice fields \"fieldsets\"\nwill always implement both mixins\n\nTODO: Consider making this explicit by extracting this method to its own mixin and\nusing it in both FormGroupMixin and ChoiceGroupMixin, then override it here\nThis also makes it more DRY as we have same method with similar implementation\nin FormGroupMixin. I (@jorenbroekema) think the abstraction is worth it here..",
              "return": {
                "type": {
                  "text": "{[name:string]: any}"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_throwWhenInvalidChildModelValue",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControl"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_checkSingleChoiceElements",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent & {target:FormControl}"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_setCheckedElements",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | any[]"
                  }
                },
                {
                  "name": "check",
                  "type": {
                    "text": "Function"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setChoiceGroupTouched",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "multipleChoice",
              "type": {
                "text": "boolean"
              },
              "description": "When false (default), modelValue and serializedValue will reflect the\ncurrently selected choice (usually a string). When true, modelValue will and\nserializedValue will be an array of strings.",
              "default": "false",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isInitialModelValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isInitialSerializedValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isInitialFormattedValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__renderAsNodes",
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "parameters": [
                {
                  "name": "slotName",
                  "description": "Name of the slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__privateSlots",
              "privacy": "private",
              "default": "new Set(null)",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "isRegisteredFormElement",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "ElementWithParentFormGroup"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFormElement",
              "parameters": [
                {
                  "name": "child",
                  "description": "the child element (field)",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToAddFormElement",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to perform logic before an element is added",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToChangeFormElementName",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToRemoveFormElement",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formElements",
              "description": "Closely mimics the natively supported HTMLFormControlsCollection. It can be accessed\nboth like an array and an object (based on control/element names).",
              "type": {
                "text": "FormControlsCollection"
              },
              "default": "new FormControlsCollection()",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isFormOrFieldset",
              "type": {
                "text": "boolean"
              },
              "description": "Flag that determines how \".formElements\" should behave.\nFor a regular fieldset (see LionFieldset) we expect \".formElements\"\nto be accessible as an object.\nIn case of a radio-group, a checkbox-group or a select/listbox,\nit should act like an array (see ChoiceGroupMixin).\nUsually, when false, we deal with a choice-group (radio-group, checkbox-group,\n(multi)select)",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "initComplete",
              "description": "initComplete resolves after all pending initialization logic\n(for instance `<form-group .serializedValue=${{ child1: 'a', child2: 'b' }}>`)\nis executed",
              "type": {
                "text": "Promise<any>"
              },
              "default": "new Promise((resolve, reject) => {\n        this.__resolveInitComplete = resolve;\n        this.__rejectInitComplete = reject;\n      })",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registrationComplete",
              "description": "registrationComplete waits for all children formElements to have registered",
              "type": {
                "text": "Promise<any> & {done?:boolean}"
              },
              "default": "new Promise((resolve, reject) => {\n        this.__resolveRegistrationComplete = resolve;\n        this.__rejectRegistrationComplete = reject;\n      })",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "done",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Calls `focus()` on focusable element within",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Calls `blur()` on focusable element within",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_focusableNode",
              "description": "The focusable element:\ncould be an input, textarea, select, button or any other element with tabindex > -1",
              "privacy": "protected",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onBlur",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__registerEventsForFocusMixin",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__teardownEventsForFocusMixin",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) is focused.\nReflects to attribute '[focused]' as a styling hook",
              "default": "false",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "focusedVisible",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) matches ':focus-visible'\nReflects to attribute '[focused-visible]' as a styling hook\nSee: https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible",
              "default": "false",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldVal",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "initInteractionState",
              "description": "Evaluations performed on connectedCallback.\nThis method is public, so it can be called at a later moment (when we need to wait for\nregistering children for instance) as well.\nSince this method will be called twice in last mentioned scenario, it must stay idempotent.",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_iStateOnLeave",
              "description": "Sets touched value to true and reevaluates prefilled state.\nWhen false, on next interaction, user will start with a clean state.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_iStateOnValueChange",
              "description": "Sets dirty value and validates when already touched or invalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onTouchedChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onDirtyChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_showFeedbackConditionFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "type": {
                    "text": "InteractionStates"
                  }
                }
              ],
              "description": "Default feedbackCondition condition, used by Subclassers, that will be used when\n`feedbackCondition()` is not overridden by Application Developer.\nShow the validity feedback when returning true, don't show when false",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackConditionMeta",
              "description": "Allows Subclassers to add meta info for feedbackCondition",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "touched",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has focused and left(blurred) the field.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "dirty",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has changed the value of the field.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "prefilled",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has left non-empty field or input is prefilled.\nThe name must be seen from the point of view of the input field:\nonce the user enters the input field, the value is non-empty.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "description": "True when the modelValue is non-empty (see _isEmpty in FormControlMixin)",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_leaveEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the touched state",
              "privacy": "protected",
              "default": "'blur'",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_valueChangedEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the dirty state",
              "privacy": "protected",
              "default": "'model-value-changed'",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationTypes",
              "static": true,
              "description": "Types of validation supported by this FormControl (for instance 'error'|'warning'|'info')",
              "type": {
                "text": "ValidationType[]"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_allValidators",
              "description": "Combination of validators provided by Application Developer and the default validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updateSync",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "An abstraction that has the exact same api as `requestUpdate`, but taking\ninto account:\n- [member order independence](https://github.com/webcomponents/gold-standard/wiki/Member-Order-Independence)\n- property effects start when all (light) dom has initialized (on firstUpdated)\n- property effects don't interrupt the first meaningful paint\n- compatible with propertyAccessor.`hasChanged`: no manual checks needed or accidentally\nrun property effects / events when no change happened\neffects when values didn't change\nAll code previously present in requestUpdate can be placed in this method.",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "parameters": [
                {
                  "name": "{ clearCurrentResult }",
                  "default": "{}"
                },
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "{ clearCurrentResult?: boolean }"
                  }
                }
              ],
              "description": "Triggered by:\n - modelValue change\n - change in the 'validators' array\n-  change in the config of an individual Validator\n\nThree situations are handled:\n- a1) the FormControl is empty: further execution is halted. When the Required Validator\n(being mutually exclusive to the other Validators) is applied, it will end up in the\nvalidation result (as the only Validator, since further execution was halted).\n- a2) there are synchronous Validators: this is the most common flow. When modelValue hasn't\nchanged since last async results were generated, 'sync results' are merged with the\n'async results'.\n- a3) there are asynchronous Validators: for instance when server side evaluation is needed.\nExecutions are scheduled and awaited and the 'async results' are merged with the\n'sync results'.\n\n- b) there are ResultValidators. After steps a1, a2, or a3 are finished, the holistic\nResultValidators (evaluating the total result of the 'regular' (a1, a2 and a3) validators)\nwill be run...\n\nSituations a2 and a3 are not mutually exclusive and can be triggered within one `validate()`\ncall. Situation b will occur after every call.",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeValidators",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeSyncValidators",
              "parameters": [
                {
                  "name": "syncValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "{ hasAsync }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ hasAsync: boolean }"
                  }
                }
              ],
              "description": "step a2 (as explained in `validate()`): calls `__finishValidation`",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeAsyncValidators",
              "parameters": [
                {
                  "name": "asyncValidators",
                  "description": "all Validators except required and ResultValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "step a3 (as explained in `validate()`), calls __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeResultValidators",
              "parameters": [
                {
                  "name": "regularValidationResult",
                  "description": "result of steps 1-3",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "description": "step b (as explained in `validate()`), called by __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__finishValidation",
              "parameters": [
                {
                  "name": "{ source, hasAsync }"
                },
                {
                  "name": "options",
                  "type": {
                    "text": "@param {'sync'|'async'} options.source\n     * @param {boolean} [options.hasAsync] whether async validators are configured in this run.\n     * "
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__clearValidationResults",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onValidatorUpdated",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event|CustomEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__isEmpty",
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Helper method for the mutually exclusive Required Validator",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getFeedbackMessages",
              "parameters": [
                {
                  "name": "validators",
                  "description": "list of objects having a .getMessage method",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise.<FeedbackMessage[]>"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateFeedbackComponent",
              "description": "Responsible for retrieving messages from Validators and\n(delegation of) rendering them.\n\nFor `._feedbackNode` (extension of LionValidationFeedback):\n- retrieve messages from highest prio Validators\n- provide the result to custom feedback node and let the\ncustom node decide on their renderings\n\nIn both cases:\n- we compute the 'show' flag (like 'hasErrorVisible') for all types\n- we set the customValidity message of the highest prio Validator\n- we set aria-invalid=\"true\" in case hasErrorVisible is true",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "feedbackCondition",
              "parameters": [
                {
                  "name": "type",
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "default": "this._feedbackConditionMeta",
                  "description": "meta info (interaction states etc)",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "name": "currentCondition",
                  "default": "this._showFeedbackConditionFor.bind(this)",
                  "description": "this is the _showFeedbackConditionFor\nthat can be used if a developer wants to override for a certain type, but wants to fallback\nfor other types",
                  "type": {
                    "text": "((type: string, meta: object) => boolean)"
                  }
                }
              ],
              "description": "Allows the end user to specify when a feedback message should be shown",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_hasFeedbackVisibleFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Used to translate `.hasFeedbackFor` and `.shouldShowFeedbackFor` to `.showsFeedbackFor`",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateShouldShowFeedbackFor",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_prioritizeAndFilterFeedback",
              "parameters": [
                {
                  "name": "{ validationResult }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ validationResult: Validator[] }"
                  }
                }
              ],
              "description": "Orders all active validators in this.__validationResult. Can\nalso filter out occurrences (based on interaction states)",
              "return": {
                "type": {
                  "text": "Validator[]"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "hasFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "As soon as validation happens (after modelValue/validators/validator param change), this\narray is updated with the active ValidationTypes ('error'|'warning'|'success'|'info' etc.).\nNotice the difference with `.showsFeedbackFor`, which filters `.hasFeedbackFor` based on\n`.feedbackCondition()`.\n\nFor styling purposes, will be reflected to [has-feedback-for=\"error warning\"]. This can\nbe useful for subtle visual feedback on keyup, like a red/green border around an input.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "showsFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "Based on outcome of feedbackCondition, this array decides what ValidationTypes should be\nshown in validationFeedback, based on meta data like interaction states.\n\nFor styling purposes, it reflects it `[shows-feedback-for=\"error warning\"]`",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shouldShowFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "A temporary storage to transition from hasFeedbackFor to showsFeedbackFor",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationStates",
              "type": {
                "text": "Object.<string, Object.<string, boolean>>"
              },
              "description": "The outcome of a validation 'round'. Keyed by ValidationType and Validator name",
              "default": "{}",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "isPending",
              "type": {
                "text": "boolean"
              },
              "description": "Flag indicating whether async validation is pending.\nCreates attribute [is-pending] as a styling hook",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Application Developers to add Validators to a FormControl.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "defaultValidators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Subclassers to add default Validators to a particular FormControl.\nA date input for instance, always needs the isDate validator.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_visibleMessagesAmount",
              "type": {
                "text": "number"
              },
              "description": "The amount of feedback messages that will visible in LionValidationFeedback",
              "privacy": "protected",
              "default": "1",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__syncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__asyncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__validationResult",
              "type": {
                "text": "Validator[]"
              },
              "description": "Aggregated result from sync Validators, async Validators and ResultValidators",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevShownValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__childModelValueChanged",
              "type": {
                "text": "boolean"
              },
              "description": "The updated children validity affects the validity of the parent. Helper to recompute\nvalidatity of parent FormGroup",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableHasChanged",
              "static": true,
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Makes the propertyAccessor.`hasChanged` compatible in synchronous updates",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableInitialize",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__SyncUpdatableNamespace",
              "type": {
                "text": "SyncUpdatableNamespace"
              },
              "description": "Namespace for this mixin that guarantees naming clashes will not occur...",
              "default": "{}",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "events": [
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "form-element-name-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "focus",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "blur",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "focusin",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "focusout",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "touched-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "name": "dirty-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "name": "showsFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "shouldShowFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "validate-performed",
              "type": {
                "text": "Event"
              },
              "description": "private event that should be listened to by LionFieldSet",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LionListbox",
          "declaration": {
            "name": "LionListbox",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionListbox.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/src/LionListbox.js",
      "declarations": [
        {
          "kind": "class",
          "description": "LionListbox: implements the wai-aria listbox design pattern and integrates it as a Lion\nFormControl",
          "name": "LionListbox",
          "members": [
            {
              "kind": "field",
              "name": "_feedbackConditionMeta",
              "description": "Allows Subclassers to add meta info for feedbackCondition",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_focusableNode",
              "description": "The focusable element:\ncould be an input, textarea, select, button or any other element with tabindex > -1",
              "privacy": "protected",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "{block} .input-group\n\nStructure:\n- {element} .input-group__before (optional) : a prefix that resides outside the container\n- {element} .input-group__container : an inner container: this element contains all styling\n - {element} .input-group__prefix (optional) : a prefix that resides in the container,\n              allowing it to be detectable as a :first-child\n - {element} .input-group__input : a wrapper around the form-control component\n  - {block} .form-control : the actual input element (input/select/textarea)\n - {element} .input-group__suffix (optional) : a suffix that resides inside the container,\n              allowing it to be detectable as a :last-child\n - {element} .input-group__bottom (optional) : placeholder element for additional styling\n              (like an animated line for material design input)\n- {element} .input-group__after (optional) :  a suffix that resides outside the container",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "description": "Obtains the scoped elements definitions map if specified.",
              "return": {
                "type": {
                  "text": "ScopedElementsMap"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "slots",
              "return": {
                "type": {
                  "text": "SlotsMap"
                }
              },
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "description": "The interactive (form) element. Can be a native element like input/textarea/select or\nan element with tabindex > -1",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxNode",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxActiveDescendantNode",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxSlot",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_scrollTargetNode",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_activeDescendantOwnerNode",
              "type": {
                "text": "HTMLElement"
              },
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "activeIndex",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "checkedIndex",
              "type": {
                "text": "number | number[]"
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number|number[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "description": "Empty pending queue in order to guarantee order independence",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "setCheckedIndex",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number|number[]"
                  }
                }
              ],
              "description": "If an array is passed for multiple-choice, it will check the indexes in array, and uncheck the rest\nIf a number is passed, the item with the passed index is checked without unchecking others\nFor single choice, __onChildCheckedChanged we ensure that we uncheck siblings",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addFormElement",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControlHost & LionOption"
                  }
                },
                {
                  "name": "indexToInsertAt",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "resetInteractionState",
              "description": "Resets touched and dirty, and recomputes prefilled",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "clear",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getCheckedElements",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_setupListboxNode",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onListboxContentChanged",
              "description": "A Subclasser can perform additional logic whenever the elements inside the listbox are\nupdated. For instance, when a combobox does server side autocomplete, we want to\nmatch highlighted parts client side.",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_teardownListboxNode",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getNextEnabledOption",
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "default": "1",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getPreviousEnabledOption",
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "default": "-1",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onChildActiveChanged",
              "parameters": [
                {
                  "name": "{ target }"
                },
                {
                  "name": "ev",
                  "type": {
                    "text": "Event & { target: LionOption }"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_listboxOnKeyDown",
              "parameters": [
                {
                  "name": "ev",
                  "description": "the keydown event object",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_listboxOnClick",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_listboxOnKeyUp",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onLabelClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_scrollIntoView",
              "parameters": [
                {
                  "name": "el",
                  "description": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "scrollTargetEl",
                  "description": "container",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupEventListeners",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__teardownEventListeners",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setChildActive",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "LionOption | null"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_uncheckChildren",
              "parameters": [
                {
                  "name": "exclude",
                  "default": "[]",
                  "optional": true,
                  "type": {
                    "text": "LionOption|LionOption[]"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onChildCheckedChanged",
              "parameters": [
                {
                  "name": "cfgOrEvent",
                  "type": {
                    "text": "Event & { target: LionOption }"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setAttributeForAllFormElements",
              "parameters": [
                {
                  "name": "attribute",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "// TODO: add to choiceGroup",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__proxyChildModelValueChanged",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent & { target: LionOption; }"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getEnabledOption",
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__moveOptionsToListboxNode",
              "description": "Moves options put in unnamed slot to slot with [role=\"listbox\"]",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__preventScrollingWithArrowKeys",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupListboxNodeInteractions",
              "description": "Helper method used within `._setupListboxNode`",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__requestOptionsToBeDisabled",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__retractRequestOptionsToBeDisabled",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__initInteractionStates",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "hasNoDefaultSelected",
              "type": {
                "text": "boolean"
              },
              "description": "When setting this to true, on initial render, no option will be selected.\nIt is advisable to override `_noSelectionTemplate` method in the select-invoker\nto render some kind of placeholder initially",
              "default": "false",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "string"
              },
              "description": "Informs screen reader and affects keyboard navigation.\nBy default 'vertical'",
              "default": "'vertical'",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "rotateKeyboardNavigation",
              "type": {
                "text": "boolean"
              },
              "description": "Will give first option active state when navigated to the next option from\nlast option.",
              "default": "false",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "selectionFollowsFocus",
              "type": {
                "text": "boolean"
              },
              "description": "When true, will synchronize activedescendant and selected element on\narrow key navigation.\nThis behavior can usually be seen on <select> on the Windows platform.\nNote that this behavior cannot be used when multiple-choice is true.\nSee: https://www.w3.org/TR/wai-aria-practices/#kbd_selection_follows_focus",
              "default": "false",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxActiveDescendant",
              "type": {
                "text": "number | null"
              },
              "privacy": "protected",
              "default": "null",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__hasInitialSelectedFormElement",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_repropagationRole",
              "type": {
                "text": "'child'|'choice-group'|'fieldset'"
              },
              "description": "Based on the role, details of handling model-value-changed repropagation differ.",
              "default": "'choice-group'",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxReceivesNoFocus",
              "type": {
                "text": "boolean"
              },
              "description": "When listbox is coupled to a textbox (in case we are dealing with a combobox),\nspaces should not select an element (they need to be put in the textbox)",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_oldModelValue",
              "type": {
                "text": "string | string[] | undefined"
              },
              "privacy": "protected",
              "default": "undefined",
              "inheritedFrom": {
                "name": "ListboxMixin",
                "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The label text for the input node.\nWhen no value is defined, textContent of [slot=label] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "description": "The helpt text for the input node.\nWhen no value is defined, textContent of [slot=help-text] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "fieldName",
              "description": "Will be used in validation messages to refer to the current field",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_labelNode",
              "description": "Element where label will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_helpTextNode",
              "description": "Element where help text will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackNode",
              "description": "Element where validation feedback will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11y",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11yForAdditionalSlots",
              "parameters": [
                {
                  "name": "additionalSlots",
                  "default": "['prefix', 'suffix', 'before', 'after']",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Enhances additional slots(prefix, suffix, before, after) defined by developer.\n\nWhen boolean attribute data-label or data-description is found,\nthe slot element will be connected to the input via aria-labelledby or aria-describedby",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__reflectAriaAttr",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "reorder",
                  "type": {
                    "text": "boolean|undefined"
                  }
                }
              ],
              "description": "Will handle help text, validation feedback and character counter,\nprefix/suffix/before/after (if they contain data-description flag attr).\nAlso, contents of id references that will be put in the <lion-field>._ariaDescribedby property\nfrom an external context, will be read by a screen reader.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Default Render Result:\n<div class=\"form-field__group-one\">\n  <div class=\"form-field__label\">\n    <slot name=\"label\"></slot>\n  </div>\n  <small class=\"form-field__help-text\">\n    <slot name=\"help-text\"></slot>\n  </small>\n</div>\n<div class=\"form-field__group-two\">\n  <div class=\"input-group\">\n    <div class=\"input-group__before\">\n      <slot name=\"before\"></slot>\n    </div>\n    <div class=\"input-group__container\">\n      <div class=\"input-group__prefix\">\n        <slot name=\"prefix\"></slot>\n      </div>\n      <div class=\"input-group__input\">\n        <slot name=\"input\"></slot>\n      </div>\n      <div class=\"input-group__suffix\">\n        <slot name=\"suffix\"></slot>\n      </div>\n    </div>\n    <div class=\"input-group__after\">\n      <slot name=\"after\"></slot>\n    </div>\n  </div>\n  <div class=\"form-field__feedback\">\n    <slot name=\"feedback\"></slot>\n  </div>\n</div>",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupOneTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupTwoTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_helpTextTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupBeforeTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupPrefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupSuffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupAfterTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_feedbackTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "parameters": [
                {
                  "name": "modelValue",
                  "default": "(this).modelValue",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Used for Required validation and computation of interaction states",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getAriaDescriptionElements",
              "description": "This function exposes descripion elements that a FormGroup should expose to its\nchildren. See FormGroupMixin.__getAllDescriptionElementsInParentChain()",
              "return": {
                "type": {
                  "text": "Array.<HTMLElement>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add element references to aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getDirectSlotChild",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchInitialModelValueChangedEvent",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to add logic before repropagation",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__repropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_repropagationCondition",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "description": "Based on provided target, this condition determines whether received model-value-changed\nevent should be repropagated",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the element will be registered with to the .formElements collection\nof the parent. Also, it serves as the key of key/value pairs in\n modelValue/serializedValue objects",
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "A Boolean attribute which, if present, indicates that the user should not be able to edit\nthe value of the input. The difference between disabled and readonly is that read-only\ncontrols can still function, whereas disabled controls generally do not function as\ncontrols until they are enabled.\n(From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputId",
              "description": "Unique id that can be used in all light dom",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaLabelledNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-labelledby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaDescribedNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-describedby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isRepropagationEndpoint",
              "type": {
                "text": "boolean"
              },
              "description": "By default, a field with _repropagationRole 'choice-group' will act as an\n'endpoint'. This means it will be considered as an individual field: for\na select, individual options will not be part of the formPath. They\nwill.\nSimilarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n(from Application Developer perspective) need to be more like fields\n(think of an amount-input with a currency select box next to it), can set this\nto true to hide private internals in the formPath.",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "static": true,
              "description": "Obtains the ShadowRoot options.",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "ShadowRootInit"
                  }
                }
              ],
              "type": {
                "text": "ShadowRootInit"
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "static": true,
              "description": "Obtains the element styles.",
              "return": {
                "type": {
                  "text": "CSSResultFlatArray"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registry",
              "description": "Set the CustomElementRegistry associated to the ShadowRoot",
              "return": {
                "type": {
                  "text": "CustomElementRegistry"
                }
              },
              "parameters": [
                {
                  "name": "registry",
                  "type": {
                    "text": "CustomElementRegistry"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "defineScopedElement",
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "klass",
                  "type": {
                    "text": "typeof HTMLElement"
                  }
                }
              ],
              "description": "Defines a scoped element.",
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "getScopedTagName",
              "static": true,
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "modelValue",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_completeRegistration",
              "description": "Resolves the registrationComplete promise. Subclassers can delay if needed",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElementsFilter",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "FormControl"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "A filter function which will exclude a form field when returning false\nBy default, exclude form fields which are disabled\n\nThe type is be passed as well for more fine grained control, e.g.\ndistinguish the filter when fetching modelValue versus serializedValue",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElements",
              "parameters": [
                {
                  "name": "property",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "filterFn",
                  "optional": true,
                  "type": {
                    "text": "(el: FormControl, property?: string) => boolean"
                  }
                }
              ],
              "description": "Implicit :( @override for FormGroupMixin, as choice fields \"fieldsets\"\nwill always implement both mixins\n\nTODO: Consider making this explicit by extracting this method to its own mixin and\nusing it in both FormGroupMixin and ChoiceGroupMixin, then override it here\nThis also makes it more DRY as we have same method with similar implementation\nin FormGroupMixin. I (@jorenbroekema) think the abstraction is worth it here..",
              "return": {
                "type": {
                  "text": "{[name:string]: any}"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_throwWhenInvalidChildModelValue",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControl"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_checkSingleChoiceElements",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent & {target:FormControl}"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_setCheckedElements",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | any[]"
                  }
                },
                {
                  "name": "check",
                  "type": {
                    "text": "Function"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setChoiceGroupTouched",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "multipleChoice",
              "type": {
                "text": "boolean"
              },
              "description": "When false (default), modelValue and serializedValue will reflect the\ncurrently selected choice (usually a string). When true, modelValue will and\nserializedValue will be an array of strings.",
              "default": "false",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isInitialModelValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isInitialSerializedValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isInitialFormattedValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__renderAsNodes",
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "parameters": [
                {
                  "name": "slotName",
                  "description": "Name of the slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__privateSlots",
              "privacy": "private",
              "default": "new Set(null)",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "isRegisteredFormElement",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "ElementWithParentFormGroup"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFormElement",
              "parameters": [
                {
                  "name": "child",
                  "description": "the child element (field)",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToAddFormElement",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to perform logic before an element is added",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToChangeFormElementName",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToRemoveFormElement",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formElements",
              "description": "Closely mimics the natively supported HTMLFormControlsCollection. It can be accessed\nboth like an array and an object (based on control/element names).",
              "type": {
                "text": "FormControlsCollection"
              },
              "default": "new FormControlsCollection()",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isFormOrFieldset",
              "type": {
                "text": "boolean"
              },
              "description": "Flag that determines how \".formElements\" should behave.\nFor a regular fieldset (see LionFieldset) we expect \".formElements\"\nto be accessible as an object.\nIn case of a radio-group, a checkbox-group or a select/listbox,\nit should act like an array (see ChoiceGroupMixin).\nUsually, when false, we deal with a choice-group (radio-group, checkbox-group,\n(multi)select)",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "initComplete",
              "description": "initComplete resolves after all pending initialization logic\n(for instance `<form-group .serializedValue=${{ child1: 'a', child2: 'b' }}>`)\nis executed",
              "type": {
                "text": "Promise<any>"
              },
              "default": "new Promise((resolve, reject) => {\n        this.__resolveInitComplete = resolve;\n        this.__rejectInitComplete = reject;\n      })",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registrationComplete",
              "description": "registrationComplete waits for all children formElements to have registered",
              "type": {
                "text": "Promise<any> & {done?:boolean}"
              },
              "default": "new Promise((resolve, reject) => {\n        this.__resolveRegistrationComplete = resolve;\n        this.__rejectRegistrationComplete = reject;\n      })",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "done",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Calls `focus()` on focusable element within",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Calls `blur()` on focusable element within",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onBlur",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__registerEventsForFocusMixin",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__teardownEventsForFocusMixin",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) is focused.\nReflects to attribute '[focused]' as a styling hook",
              "default": "false",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "focusedVisible",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the focusable element within (`._focusableNode`) matches ':focus-visible'\nReflects to attribute '[focused-visible]' as a styling hook\nSee: https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible",
              "default": "false",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldVal",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "initInteractionState",
              "description": "Evaluations performed on connectedCallback.\nThis method is public, so it can be called at a later moment (when we need to wait for\nregistering children for instance) as well.\nSince this method will be called twice in last mentioned scenario, it must stay idempotent.",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_iStateOnLeave",
              "description": "Sets touched value to true and reevaluates prefilled state.\nWhen false, on next interaction, user will start with a clean state.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_iStateOnValueChange",
              "description": "Sets dirty value and validates when already touched or invalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onTouchedChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onDirtyChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_showFeedbackConditionFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "type": {
                    "text": "InteractionStates"
                  }
                }
              ],
              "description": "Default feedbackCondition condition, used by Subclassers, that will be used when\n`feedbackCondition()` is not overridden by Application Developer.\nShow the validity feedback when returning true, don't show when false",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "touched",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has focused and left(blurred) the field.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "dirty",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has changed the value of the field.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "prefilled",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has left non-empty field or input is prefilled.\nThe name must be seen from the point of view of the input field:\nonce the user enters the input field, the value is non-empty.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "description": "True when the modelValue is non-empty (see _isEmpty in FormControlMixin)",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_leaveEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the touched state",
              "privacy": "protected",
              "default": "'blur'",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_valueChangedEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the dirty state",
              "privacy": "protected",
              "default": "'model-value-changed'",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationTypes",
              "static": true,
              "description": "Types of validation supported by this FormControl (for instance 'error'|'warning'|'info')",
              "type": {
                "text": "ValidationType[]"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_allValidators",
              "description": "Combination of validators provided by Application Developer and the default validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updateSync",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "An abstraction that has the exact same api as `requestUpdate`, but taking\ninto account:\n- [member order independence](https://github.com/webcomponents/gold-standard/wiki/Member-Order-Independence)\n- property effects start when all (light) dom has initialized (on firstUpdated)\n- property effects don't interrupt the first meaningful paint\n- compatible with propertyAccessor.`hasChanged`: no manual checks needed or accidentally\nrun property effects / events when no change happened\neffects when values didn't change\nAll code previously present in requestUpdate can be placed in this method.",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "parameters": [
                {
                  "name": "{ clearCurrentResult }",
                  "default": "{}"
                },
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "{ clearCurrentResult?: boolean }"
                  }
                }
              ],
              "description": "Triggered by:\n - modelValue change\n - change in the 'validators' array\n-  change in the config of an individual Validator\n\nThree situations are handled:\n- a1) the FormControl is empty: further execution is halted. When the Required Validator\n(being mutually exclusive to the other Validators) is applied, it will end up in the\nvalidation result (as the only Validator, since further execution was halted).\n- a2) there are synchronous Validators: this is the most common flow. When modelValue hasn't\nchanged since last async results were generated, 'sync results' are merged with the\n'async results'.\n- a3) there are asynchronous Validators: for instance when server side evaluation is needed.\nExecutions are scheduled and awaited and the 'async results' are merged with the\n'sync results'.\n\n- b) there are ResultValidators. After steps a1, a2, or a3 are finished, the holistic\nResultValidators (evaluating the total result of the 'regular' (a1, a2 and a3) validators)\nwill be run...\n\nSituations a2 and a3 are not mutually exclusive and can be triggered within one `validate()`\ncall. Situation b will occur after every call.",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeValidators",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeSyncValidators",
              "parameters": [
                {
                  "name": "syncValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "{ hasAsync }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ hasAsync: boolean }"
                  }
                }
              ],
              "description": "step a2 (as explained in `validate()`): calls `__finishValidation`",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeAsyncValidators",
              "parameters": [
                {
                  "name": "asyncValidators",
                  "description": "all Validators except required and ResultValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "step a3 (as explained in `validate()`), calls __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeResultValidators",
              "parameters": [
                {
                  "name": "regularValidationResult",
                  "description": "result of steps 1-3",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "description": "step b (as explained in `validate()`), called by __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__finishValidation",
              "parameters": [
                {
                  "name": "{ source, hasAsync }"
                },
                {
                  "name": "options",
                  "type": {
                    "text": "@param {'sync'|'async'} options.source\n     * @param {boolean} [options.hasAsync] whether async validators are configured in this run.\n     * "
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__clearValidationResults",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onValidatorUpdated",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event|CustomEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__isEmpty",
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Helper method for the mutually exclusive Required Validator",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getFeedbackMessages",
              "parameters": [
                {
                  "name": "validators",
                  "description": "list of objects having a .getMessage method",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise.<FeedbackMessage[]>"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateFeedbackComponent",
              "description": "Responsible for retrieving messages from Validators and\n(delegation of) rendering them.\n\nFor `._feedbackNode` (extension of LionValidationFeedback):\n- retrieve messages from highest prio Validators\n- provide the result to custom feedback node and let the\ncustom node decide on their renderings\n\nIn both cases:\n- we compute the 'show' flag (like 'hasErrorVisible') for all types\n- we set the customValidity message of the highest prio Validator\n- we set aria-invalid=\"true\" in case hasErrorVisible is true",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "feedbackCondition",
              "parameters": [
                {
                  "name": "type",
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "default": "this._feedbackConditionMeta",
                  "description": "meta info (interaction states etc)",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "name": "currentCondition",
                  "default": "this._showFeedbackConditionFor.bind(this)",
                  "description": "this is the _showFeedbackConditionFor\nthat can be used if a developer wants to override for a certain type, but wants to fallback\nfor other types",
                  "type": {
                    "text": "((type: string, meta: object) => boolean)"
                  }
                }
              ],
              "description": "Allows the end user to specify when a feedback message should be shown",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_hasFeedbackVisibleFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Used to translate `.hasFeedbackFor` and `.shouldShowFeedbackFor` to `.showsFeedbackFor`",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateShouldShowFeedbackFor",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_prioritizeAndFilterFeedback",
              "parameters": [
                {
                  "name": "{ validationResult }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ validationResult: Validator[] }"
                  }
                }
              ],
              "description": "Orders all active validators in this.__validationResult. Can\nalso filter out occurrences (based on interaction states)",
              "return": {
                "type": {
                  "text": "Validator[]"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "hasFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "As soon as validation happens (after modelValue/validators/validator param change), this\narray is updated with the active ValidationTypes ('error'|'warning'|'success'|'info' etc.).\nNotice the difference with `.showsFeedbackFor`, which filters `.hasFeedbackFor` based on\n`.feedbackCondition()`.\n\nFor styling purposes, will be reflected to [has-feedback-for=\"error warning\"]. This can\nbe useful for subtle visual feedback on keyup, like a red/green border around an input.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "showsFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "Based on outcome of feedbackCondition, this array decides what ValidationTypes should be\nshown in validationFeedback, based on meta data like interaction states.\n\nFor styling purposes, it reflects it `[shows-feedback-for=\"error warning\"]`",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shouldShowFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "A temporary storage to transition from hasFeedbackFor to showsFeedbackFor",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationStates",
              "type": {
                "text": "Object.<string, Object.<string, boolean>>"
              },
              "description": "The outcome of a validation 'round'. Keyed by ValidationType and Validator name",
              "default": "{}",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "isPending",
              "type": {
                "text": "boolean"
              },
              "description": "Flag indicating whether async validation is pending.\nCreates attribute [is-pending] as a styling hook",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Application Developers to add Validators to a FormControl.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "defaultValidators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Subclassers to add default Validators to a particular FormControl.\nA date input for instance, always needs the isDate validator.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_visibleMessagesAmount",
              "type": {
                "text": "number"
              },
              "description": "The amount of feedback messages that will visible in LionValidationFeedback",
              "privacy": "protected",
              "default": "1",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__syncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__asyncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__validationResult",
              "type": {
                "text": "Validator[]"
              },
              "description": "Aggregated result from sync Validators, async Validators and ResultValidators",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevShownValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__childModelValueChanged",
              "type": {
                "text": "boolean"
              },
              "description": "The updated children validity affects the validity of the parent. Helper to recompute\nvalidatity of parent FormGroup",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableHasChanged",
              "static": true,
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Makes the propertyAccessor.`hasChanged` compatible in synchronous updates",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableInitialize",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__SyncUpdatableNamespace",
              "type": {
                "text": "SyncUpdatableNamespace"
              },
              "description": "Namespace for this mixin that guarantees naming clashes will not occur...",
              "default": "{}",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "ListboxMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
            },
            {
              "name": "FocusMixin",
              "package": "@lion/form-core"
            },
            {
              "name": "InteractionStateMixin",
              "package": "@lion/form-core"
            },
            {
              "name": "ValidateMixin",
              "package": "@lion/form-core"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "lion-listbox",
          "customElement": true,
          "events": [
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "form-element-name-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "focus",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "blur",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "focusin",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "focusout",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FocusMixin.js"
              }
            },
            {
              "name": "touched-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "name": "dirty-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "name": "showsFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "shouldShowFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "validate-performed",
              "type": {
                "text": "Event"
              },
              "description": "private event that should be listened to by LionFieldSet",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LionListbox",
          "declaration": {
            "name": "LionListbox",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionListbox.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOption.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option\nCan be a child of datalist/select, or role=\"listbox\"\n\nElement gets state supplied externally, reflects this to attributes,\nenabling SubClassers to style based on those states",
          "name": "LionOption",
          "members": [
            {
              "kind": "field",
              "name": "slots",
              "type": {
                "text": "{}"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "__onClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__registerEventListeners",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__unRegisterEventListeners",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Boolean indicating whether or not this element is disabled.",
              "default": "false",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "choiceValue",
              "description": "The value that will be registered to the modelValue of the parent ChoiceGroup. Recommended\nto be a string",
              "type": {
                "text": "string|any"
              },
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "Styles for [input=radio] and [input=checkbox] wrappers.\nFor [role=option] extensions, please override completely",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Template for [input=radio] and [input=checkbox] wrappers.\nFor [role=option] extensions, please override completely",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_choiceGraphicTemplate",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_afterTemplate",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_preventDuplicateLabelClick",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "The native platform fires an event for both the click on the label, and also\nthe redispatched click on the native input element.\nThis results in two click events arriving at the host, but we only want one.\nThis method prevents the duplicate click and ensures the correct isTrusted event\nwith the correct event.target arrives at the host.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_toggleChecked",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_syncNameToParentFormGroup",
              "description": "Override this in case of extending ChoiceInputMixin and requiring\nto sync differently with parent form group name\nRight now it checks tag name match where the parent form group tagname\nshould include the child field tagname ('checkbox' is included in 'checkbox-group')",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncModelCheckedToChecked",
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncCheckedToModel",
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncCheckedToInputElement",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_proxyInputEvent",
              "description": "This can be called whenever the view value should be updated. Dependent on component type\n(\"input\" for <input> or \"change\" for <select>(mainly for IE)) a different event should be\nused  as source for the \"user-input-changed\" event (which can be seen as an abstraction\nlayer on top of other events (input, change, whatever))",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onModelValueChanged",
              "parameters": [
                {
                  "name": "{ modelValue }"
                },
                {
                  "name": "old",
                  "optional": true,
                  "type": {
                    "text": "{ modelValue:unknown }"
                  }
                },
                {
                  "name": "newV",
                  "type": {
                    "text": "{ modelValue:unknown }"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "parser",
              "parameters": [
                {
                  "name": "v",
                  "description": "viewValue: the formatted value inside <input>",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "FormatOptions"
                  }
                }
              ],
              "description": "Converts viewValue to modelValue\nFor instance, a localized date to a Date Object",
              "return": {
                "type": {
                  "text": "*"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "formatter",
              "parameters": [
                {
                  "name": "modelValue",
                  "type": {
                    "text": "ChoiceInputModelValue"
                  }
                }
              ],
              "description": "Converts modelValue to formattedValue (formattedValue will be synced with\n`._inputNode.value`)\nFor instance, a Date object to a localized date.",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "clear",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "description": "Used for required validator.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_syncValueUpwards",
              "description": "Synchronization from `._inputNode.value` to `LionField` (flow [2])\nDownwards syncing should only happen for `LionField`.value changes from 'above'.\nThis triggers _onModelValueChanged and connects user input\nto the parsing/formatting/serializing loop.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "modelValue",
              "type": {
                "text": "{value:string|any,checked:boolean}"
              },
              "description": "Whereas 'normal' `.modelValue`s usually store a complex/typed version\nof a view value, choice inputs have a slightly different approach.\nIn order to remain their Single Source of Truth characteristic, choice inputs\nstore both the value and 'checkedness', in the format { value: 'x', checked: true }\nDifferent from the platform, this also allows to serialize the 'non checkedness',\nallowing to restore form state easily and inform the server about unchecked options.",
              "default": "{ value: '', checked: false }",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The view value. Will be delegated to `._inputNode.value`",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "preprocessor",
              "parameters": [
                {
                  "name": "v",
                  "description": "the raw value from the <input> after keyUp/Down event",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Preprocesses the viewValue before it's parsed to a modelValue. Can be used to filter\ninvalid input amongst others.",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "serializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.modelValue` to `.serializedValue`\nFor instance, a Date object to an iso formatted date string",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "deserializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.serializedValue` to `.modelValue`\nFor instance, an iso formatted date string to a Date object",
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_calculateValues",
              "parameters": [
                {
                  "name": "{ source }",
                  "default": "{ source: null }"
                },
                {
                  "description": "the type of value that triggered this method. It should not be\nset again, so that its observer won't be triggered. Can be:\n'model'|'formatted'|'serialized'.",
                  "name": "config",
                  "type": {
                    "text": "{source:'model'|'serialized'|'formatted'|null}"
                  }
                }
              ],
              "description": "Responsible for storing all representations(modelValue, serializedValue, formattedValue\nand value) of the input value. Prevents infinite loops, so all value observers can be\ntreated like they will only be called once, without indirectly calling other observers.\n(in fact, some are called twice, but the __preventRecursiveTrigger lock prevents the\nsecond call from having effect).",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_callParser",
              "parameters": [
                {
                  "name": "value",
                  "default": "this.formattedValue",
                  "type": {
                    "text": "string|undefined"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_callFormatter",
              "return": {
                "type": {
                  "text": "string|undefined"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchModelValueChangedEvent",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "{ modelValue: unknown; }[]"
                  }
                }
              ],
              "description": "This is wrapped in a distinct method, so that parents can control when the changed event\nis fired. For objects, a deep comparison might be needed.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_reflectBackFormattedValueToUser",
              "description": "Synchronization from `LionField.value` to `._inputNode.value`\n- flow [1] will always be reflected back\n- flow [2] will not be reflected back when this flow was triggered via\n  `@user-input-changed` (this will happen later, when `formatOn` condition is met)",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_reflectBackOn",
              "description": "Every time .formattedValue is attempted to sync to the view value (on change/blur and on\nmodelValue change), this condition is checked. When enhancing it, it's recommended to\ncall `super._reflectBackOn()`",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onUserInputChanged",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onCompositionEvent",
              "parameters": [
                {
                  "name": "{ type }"
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onPaste",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formatOn",
              "type": {
                "text": "string"
              },
              "description": "Event that will trigger formatting (more precise, visual update of the view, so the\nuser sees the formatted value)\nDefault: 'change'",
              "privacy": "protected",
              "default": "'change'",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formatOptions",
              "description": "Configuration object that will be available inside the formatter function",
              "default": "({})",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "description": "The view value is the result of the formatter function (when available).\nThe result will be stored in the native _inputNode (usually an input[type=text]).\n\nExamples:\n- For a date input, this would be '20/01/1999' (dependent on locale).\n- For a number input, this could be '1,234.56' (a String representation of modelValue\n1234.56)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "description": "The serialized version of the model value.\nThis value exists for maximal compatibility with the platform API.\nThe serialized value can be an interface in context where data binding is not\nsupported and a serialized string needs to be set.\n\nExamples:\n- For a date input, this would be the iso format of a date, e.g. '1999-01-20'.\n- For a number input this would be the String representation of a float ('1234.56'\n  instead of 1234.56)\n\nWhen no parser is available, the value is usually the same as the formattedValue\n(being _inputNode.value)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isPasting",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the user is pasting content. Allows Subclassers to do this in their subclass:",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isHandlingUserInput",
              "type": {
                "text": "boolean"
              },
              "description": "Flag that will be set when user interaction takes place (for instance after an 'input'\nevent). Will be added as meta info to the `model-value-changed` event. Depending on\nwhether a user is interacting, formatting logic will be handled differently.",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevViewValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_reflectBackFormattedValueDebounced",
              "privacy": "private",
              "default": "() => {\n        // Make sure this is fired after the change event of _inputNode, so that formattedValue\n        // is guaranteed to be calculated\n        setTimeout(this._reflectBackFormattedValueToUser);\n      }",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "superclass": {
            "name": "LionOption_base",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOption.d.ts"
          },
          "tagName": "lion-option",
          "customElement": true,
          "events": [
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "name": "user-input-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LionOption",
          "declaration": {
            "name": "LionOption",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOption.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOption.js",
      "declarations": [
        {
          "kind": "class",
          "description": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option\nCan be a child of datalist/select, or role=\"listbox\"\n\nElement gets state supplied externally, reflects this to attributes,\nenabling SubClassers to style based on those states",
          "name": "LionOption",
          "members": [
            {
              "kind": "field",
              "name": "slots"
            },
            {
              "kind": "method",
              "name": "__registerEventListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__unRegisterEventListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__onClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "privacy": "public",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Boolean indicating whether or not this element is disabled.",
              "default": "false",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "choiceValue",
              "description": "The value that will be registered to the modelValue of the parent ChoiceGroup. Recommended\nto be a string",
              "type": {
                "text": "string|any"
              },
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "Styles for [input=radio] and [input=checkbox] wrappers.\nFor [role=option] extensions, please override completely",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Template for [input=radio] and [input=checkbox] wrappers.\nFor [role=option] extensions, please override completely",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_choiceGraphicTemplate",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_afterTemplate",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_preventDuplicateLabelClick",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "The native platform fires an event for both the click on the label, and also\nthe redispatched click on the native input element.\nThis results in two click events arriving at the host, but we only want one.\nThis method prevents the duplicate click and ensures the correct isTrusted event\nwith the correct event.target arrives at the host.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_toggleChecked",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_syncNameToParentFormGroup",
              "description": "Override this in case of extending ChoiceInputMixin and requiring\nto sync differently with parent form group name\nRight now it checks tag name match where the parent form group tagname\nshould include the child field tagname ('checkbox' is included in 'checkbox-group')",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncModelCheckedToChecked",
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncCheckedToModel",
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncCheckedToInputElement",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_proxyInputEvent",
              "description": "This can be called whenever the view value should be updated. Dependent on component type\n(\"input\" for <input> or \"change\" for <select>(mainly for IE)) a different event should be\nused  as source for the \"user-input-changed\" event (which can be seen as an abstraction\nlayer on top of other events (input, change, whatever))",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onModelValueChanged",
              "parameters": [
                {
                  "name": "{ modelValue }"
                },
                {
                  "name": "old",
                  "optional": true,
                  "type": {
                    "text": "{ modelValue:unknown }"
                  }
                },
                {
                  "name": "newV",
                  "type": {
                    "text": "{ modelValue:unknown }"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "parser",
              "parameters": [
                {
                  "name": "v",
                  "description": "viewValue: the formatted value inside <input>",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "FormatOptions"
                  }
                }
              ],
              "description": "Converts viewValue to modelValue\nFor instance, a localized date to a Date Object",
              "return": {
                "type": {
                  "text": "*"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "formatter",
              "parameters": [
                {
                  "name": "modelValue",
                  "type": {
                    "text": "ChoiceInputModelValue"
                  }
                }
              ],
              "description": "Converts modelValue to formattedValue (formattedValue will be synced with\n`._inputNode.value`)\nFor instance, a Date object to a localized date.",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "clear",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "description": "Used for required validator.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_syncValueUpwards",
              "description": "Synchronization from `._inputNode.value` to `LionField` (flow [2])\nDownwards syncing should only happen for `LionField`.value changes from 'above'.\nThis triggers _onModelValueChanged and connects user input\nto the parsing/formatting/serializing loop.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "modelValue",
              "type": {
                "text": "{value:string|any,checked:boolean}"
              },
              "description": "Whereas 'normal' `.modelValue`s usually store a complex/typed version\nof a view value, choice inputs have a slightly different approach.\nIn order to remain their Single Source of Truth characteristic, choice inputs\nstore both the value and 'checkedness', in the format { value: 'x', checked: true }\nDifferent from the platform, this also allows to serialize the 'non checkedness',\nallowing to restore form state easily and inform the server about unchecked options.",
              "default": "{ value: '', checked: false }",
              "inheritedFrom": {
                "name": "ChoiceInputMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The view value. Will be delegated to `._inputNode.value`",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "preprocessor",
              "parameters": [
                {
                  "name": "v",
                  "description": "the raw value from the <input> after keyUp/Down event",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Preprocesses the viewValue before it's parsed to a modelValue. Can be used to filter\ninvalid input amongst others.",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "serializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.modelValue` to `.serializedValue`\nFor instance, a Date object to an iso formatted date string",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "deserializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.serializedValue` to `.modelValue`\nFor instance, an iso formatted date string to a Date object",
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_calculateValues",
              "parameters": [
                {
                  "name": "{ source }",
                  "default": "{ source: null }"
                },
                {
                  "description": "the type of value that triggered this method. It should not be\nset again, so that its observer won't be triggered. Can be:\n'model'|'formatted'|'serialized'.",
                  "name": "config",
                  "type": {
                    "text": "{source:'model'|'serialized'|'formatted'|null}"
                  }
                }
              ],
              "description": "Responsible for storing all representations(modelValue, serializedValue, formattedValue\nand value) of the input value. Prevents infinite loops, so all value observers can be\ntreated like they will only be called once, without indirectly calling other observers.\n(in fact, some are called twice, but the __preventRecursiveTrigger lock prevents the\nsecond call from having effect).",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_callParser",
              "parameters": [
                {
                  "name": "value",
                  "default": "this.formattedValue",
                  "type": {
                    "text": "string|undefined"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_callFormatter",
              "return": {
                "type": {
                  "text": "string|undefined"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchModelValueChangedEvent",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "{ modelValue: unknown; }[]"
                  }
                }
              ],
              "description": "This is wrapped in a distinct method, so that parents can control when the changed event\nis fired. For objects, a deep comparison might be needed.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_reflectBackFormattedValueToUser",
              "description": "Synchronization from `LionField.value` to `._inputNode.value`\n- flow [1] will always be reflected back\n- flow [2] will not be reflected back when this flow was triggered via\n  `@user-input-changed` (this will happen later, when `formatOn` condition is met)",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_reflectBackOn",
              "description": "Every time .formattedValue is attempted to sync to the view value (on change/blur and on\nmodelValue change), this condition is checked. When enhancing it, it's recommended to\ncall `super._reflectBackOn()`",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onUserInputChanged",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onCompositionEvent",
              "parameters": [
                {
                  "name": "{ type }"
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onPaste",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formatOn",
              "type": {
                "text": "string"
              },
              "description": "Event that will trigger formatting (more precise, visual update of the view, so the\nuser sees the formatted value)\nDefault: 'change'",
              "privacy": "protected",
              "default": "'change'",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formatOptions",
              "description": "Configuration object that will be available inside the formatter function",
              "default": "({})",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "description": "The view value is the result of the formatter function (when available).\nThe result will be stored in the native _inputNode (usually an input[type=text]).\n\nExamples:\n- For a date input, this would be '20/01/1999' (dependent on locale).\n- For a number input, this could be '1,234.56' (a String representation of modelValue\n1234.56)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "description": "The serialized version of the model value.\nThis value exists for maximal compatibility with the platform API.\nThe serialized value can be an interface in context where data binding is not\nsupported and a serialized string needs to be set.\n\nExamples:\n- For a date input, this would be the iso format of a date, e.g. '1999-01-20'.\n- For a number input this would be the String representation of a float ('1234.56'\n  instead of 1234.56)\n\nWhen no parser is available, the value is usually the same as the formattedValue\n(being _inputNode.value)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isPasting",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the user is pasting content. Allows Subclassers to do this in their subclass:",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isHandlingUserInput",
              "type": {
                "text": "boolean"
              },
              "description": "Flag that will be set when user interaction takes place (for instance after an 'input'\nevent). Will be added as meta info to the `model-value-changed` event. Depending on\nwhether a user is interacting, formatting logic will be handled differently.",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevViewValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_reflectBackFormattedValueDebounced",
              "privacy": "private",
              "default": "() => {\n        // Make sure this is fired after the change event of _inputNode, so that formattedValue\n        // is guaranteed to be calculated\n        setTimeout(this._reflectBackFormattedValueToUser);\n      }",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "events": [
            {
              "name": "active-changed",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "name": "user-input-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "active",
              "fieldName": "active"
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "package": "@lion/core"
            },
            {
              "name": "ChoiceInputMixin",
              "package": "@lion/form-core"
            },
            {
              "name": "FormRegisteringMixin",
              "package": "@lion/form-core"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "lion-option",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LionOption",
          "declaration": {
            "name": "LionOption",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOption.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOptions.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "LionOptions",
          "name": "LionOptions",
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "__redispatchEventForFormRegistrarPortalMixin",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormRegistrarPortalMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarPortalMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registrationTarget",
              "description": "Registration target: an element, usually in the body of the dom, that captures events\nand redispatches them on host",
              "type": {
                "text": "(FormRegistrarPortalHost & HTMLElement) | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormRegistrarPortalMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarPortalMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "superclass": {
            "name": "LionOptions_base",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOptions.d.ts"
          },
          "tagName": "lion-options",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LionOptions",
          "declaration": {
            "name": "LionOptions",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOptions.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOptions.js",
      "declarations": [
        {
          "kind": "class",
          "description": "LionOptions",
          "name": "LionOptions",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'listbox'",
              "privacy": "public",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tabIndex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "privacy": "public",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "__redispatchEventForFormRegistrarPortalMixin",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormRegistrarPortalMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarPortalMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registrationTarget",
              "description": "Registration target: an element, usually in the body of the dom, that captures events\nand redispatches them on host",
              "type": {
                "text": "(FormRegistrarPortalHost & HTMLElement) | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormRegistrarPortalMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarPortalMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "role",
              "fieldName": "role"
            },
            {
              "name": "tabindex",
              "fieldName": "tabIndex"
            }
          ],
          "mixins": [
            {
              "name": "FormRegistrarPortalMixin",
              "package": "@lion/form-core"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "lion-options",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LionOptions",
          "declaration": {
            "name": "LionOptions",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/src/LionOptions.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ListboxMixin",
          "type": {
            "text": "typeof import(\"../types/ListboxMixinTypes.js\").ListboxImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ListboxMixin",
          "declaration": {
            "name": "ListboxMixin",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "ListboxMixin",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "{block} .input-group\n\nStructure:\n- {element} .input-group__before (optional) : a prefix that resides outside the container\n- {element} .input-group__container : an inner container: this element contains all styling\n - {element} .input-group__prefix (optional) : a prefix that resides in the container,\n              allowing it to be detectable as a :first-child\n - {element} .input-group__input : a wrapper around the form-control component\n  - {block} .form-control : the actual input element (input/select/textarea)\n - {element} .input-group__suffix (optional) : a suffix that resides inside the container,\n              allowing it to be detectable as a :last-child\n - {element} .input-group__bottom (optional) : placeholder element for additional styling\n              (like an animated line for material design input)\n- {element} .input-group__after (optional) :  a suffix that resides outside the container",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "description": "Obtains the scoped elements definitions map if specified.",
              "return": {
                "type": {
                  "text": "ScopedElementsMap"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "slots",
              "return": {
                "type": {
                  "text": "SlotsMap"
                }
              },
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "description": "The interactive (form) element. Can be a native element like input/textarea/select or\nan element with tabindex > -1",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_listboxNode"
            },
            {
              "kind": "field",
              "name": "_listboxActiveDescendantNode",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "_listboxSlot",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "_scrollTargetNode",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "_activeDescendantOwnerNode",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "activeIndex"
            },
            {
              "kind": "field",
              "name": "checkedIndex",
              "type": {
                "text": "number | number[]"
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number|number[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "setCheckedIndex",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number|number[]"
                  }
                }
              ],
              "description": "If an array is passed for multiple-choice, it will check the indexes in array, and uncheck the rest\nIf a number is passed, the item with the passed index is checked without unchecking others\nFor single choice, __onChildCheckedChanged we ensure that we uncheck siblings"
            },
            {
              "kind": "method",
              "name": "addFormElement",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControlHost & LionOption"
                  }
                },
                {
                  "name": "indexToInsertAt",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "resetInteractionState",
              "description": "Resets touched and dirty, and recomputes prefilled",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "reset"
            },
            {
              "kind": "method",
              "name": "clear",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getCheckedElements",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_setupListboxNode",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_onListboxContentChanged",
              "description": "A Subclasser can perform additional logic whenever the elements inside the listbox are\nupdated. For instance, when a combobox does server side autocomplete, we want to\nmatch highlighted parts client side."
            },
            {
              "kind": "method",
              "name": "_teardownListboxNode"
            },
            {
              "kind": "method",
              "name": "_getNextEnabledOption",
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "default": "1",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_getPreviousEnabledOption",
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "default": "-1",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_onChildActiveChanged",
              "parameters": [
                {
                  "name": "{ target }"
                },
                {
                  "name": "ev",
                  "type": {
                    "text": "Event & { target: LionOption }"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_listboxOnKeyDown",
              "parameters": [
                {
                  "name": "ev",
                  "description": "the keydown event object",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_listboxOnClick",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_listboxOnKeyUp",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_onLabelClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_scrollIntoView",
              "parameters": [
                {
                  "name": "el",
                  "description": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "scrollTargetEl",
                  "description": "container",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "__setupEventListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__teardownEventListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__setChildActive",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "LionOption | null"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_uncheckChildren",
              "parameters": [
                {
                  "name": "exclude",
                  "default": "[]",
                  "optional": true,
                  "type": {
                    "text": "LionOption|LionOption[]"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "__onChildCheckedChanged",
              "parameters": [
                {
                  "name": "cfgOrEvent",
                  "type": {
                    "text": "Event & { target: LionOption }"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__setAttributeForAllFormElements",
              "parameters": [
                {
                  "name": "attribute",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "// TODO: add to choiceGroup",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__proxyChildModelValueChanged",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent & { target: LionOption; }"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__getEnabledOption",
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__moveOptionsToListboxNode",
              "description": "Moves options put in unnamed slot to slot with [role=\"listbox\"]",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__preventScrollingWithArrowKeys",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__setupListboxNodeInteractions",
              "description": "Helper method used within `._setupListboxNode`",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__requestOptionsToBeDisabled",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__retractRequestOptionsToBeDisabled",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__initInteractionStates",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasNoDefaultSelected",
              "type": {
                "text": "boolean"
              },
              "description": "When setting this to true, on initial render, no option will be selected.\nIt is advisable to override `_noSelectionTemplate` method in the select-invoker\nto render some kind of placeholder initially",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "string"
              },
              "description": "Informs screen reader and affects keyboard navigation.\nBy default 'vertical'",
              "default": "'vertical'"
            },
            {
              "kind": "field",
              "name": "rotateKeyboardNavigation",
              "type": {
                "text": "boolean"
              },
              "description": "Will give first option active state when navigated to the next option from\nlast option.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "selectionFollowsFocus",
              "type": {
                "text": "boolean"
              },
              "description": "When true, will synchronize activedescendant and selected element on\narrow key navigation.\nThis behavior can usually be seen on <select> on the Windows platform.\nNote that this behavior cannot be used when multiple-choice is true.\nSee: https://www.w3.org/TR/wai-aria-practices/#kbd_selection_follows_focus",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_listboxActiveDescendant",
              "type": {
                "text": "number | null"
              },
              "privacy": "protected",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "__hasInitialSelectedFormElement",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_repropagationRole",
              "type": {
                "text": "'child'|'choice-group'|'fieldset'"
              },
              "description": "Based on the role, details of handling model-value-changed repropagation differ.",
              "default": "'choice-group'",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_listboxReceivesNoFocus",
              "type": {
                "text": "boolean"
              },
              "description": "When listbox is coupled to a textbox (in case we are dealing with a combobox),\nspaces should not select an element (they need to be put in the textbox)",
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_oldModelValue",
              "type": {
                "text": "string | string[] | undefined"
              },
              "privacy": "protected",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The label text for the input node.\nWhen no value is defined, textContent of [slot=label] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "description": "The helpt text for the input node.\nWhen no value is defined, textContent of [slot=help-text] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "fieldName",
              "description": "Will be used in validation messages to refer to the current field",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_labelNode",
              "description": "Element where label will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_helpTextNode",
              "description": "Element where help text will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackNode",
              "description": "Element where validation feedback will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11y",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11yForAdditionalSlots",
              "parameters": [
                {
                  "name": "additionalSlots",
                  "default": "['prefix', 'suffix', 'before', 'after']",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Enhances additional slots(prefix, suffix, before, after) defined by developer.\n\nWhen boolean attribute data-label or data-description is found,\nthe slot element will be connected to the input via aria-labelledby or aria-describedby",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__reflectAriaAttr",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "reorder",
                  "type": {
                    "text": "boolean|undefined"
                  }
                }
              ],
              "description": "Will handle help text, validation feedback and character counter,\nprefix/suffix/before/after (if they contain data-description flag attr).\nAlso, contents of id references that will be put in the <lion-field>._ariaDescribedby property\nfrom an external context, will be read by a screen reader.",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Default Render Result:\n<div class=\"form-field__group-one\">\n  <div class=\"form-field__label\">\n    <slot name=\"label\"></slot>\n  </div>\n  <small class=\"form-field__help-text\">\n    <slot name=\"help-text\"></slot>\n  </small>\n</div>\n<div class=\"form-field__group-two\">\n  <div class=\"input-group\">\n    <div class=\"input-group__before\">\n      <slot name=\"before\"></slot>\n    </div>\n    <div class=\"input-group__container\">\n      <div class=\"input-group__prefix\">\n        <slot name=\"prefix\"></slot>\n      </div>\n      <div class=\"input-group__input\">\n        <slot name=\"input\"></slot>\n      </div>\n      <div class=\"input-group__suffix\">\n        <slot name=\"suffix\"></slot>\n      </div>\n    </div>\n    <div class=\"input-group__after\">\n      <slot name=\"after\"></slot>\n    </div>\n  </div>\n  <div class=\"form-field__feedback\">\n    <slot name=\"feedback\"></slot>\n  </div>\n</div>",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupOneTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupTwoTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_helpTextTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupBeforeTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupPrefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupSuffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupAfterTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_feedbackTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "parameters": [
                {
                  "name": "modelValue",
                  "default": "(this).modelValue",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Used for Required validation and computation of interaction states",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getAriaDescriptionElements",
              "description": "This function exposes descripion elements that a FormGroup should expose to its\nchildren. See FormGroupMixin.__getAllDescriptionElementsInParentChain()",
              "return": {
                "type": {
                  "text": "Array.<HTMLElement>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add element references to aria-describedby attribute.",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-describedby attribute.",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getDirectSlotChild",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchInitialModelValueChangedEvent",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to add logic before repropagation",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__repropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_repropagationCondition",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "description": "Based on provided target, this condition determines whether received model-value-changed\nevent should be repropagated",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the element will be registered with to the .formElements collection\nof the parent. Also, it serves as the key of key/value pairs in\n modelValue/serializedValue objects",
              "default": "''",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "A Boolean attribute which, if present, indicates that the user should not be able to edit\nthe value of the input. The difference between disabled and readonly is that read-only\ncontrols can still function, whereas disabled controls generally do not function as\ncontrols until they are enabled.\n(From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputId",
              "description": "Unique id that can be used in all light dom",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaLabelledNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-labelledby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaDescribedNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-describedby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isRepropagationEndpoint",
              "type": {
                "text": "boolean"
              },
              "description": "By default, a field with _repropagationRole 'choice-group' will act as an\n'endpoint'. This means it will be considered as an individual field: for\na select, individual options will not be part of the formPath. They\nwill.\nSimilarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n(from Application Developer perspective) need to be more like fields\n(think of an amount-input with a currency select box next to it), can set this\nto true to hide private internals in the formPath.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__renderAsNodes",
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "parameters": [
                {
                  "name": "slotName",
                  "description": "Name of the slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__privateSlots",
              "privacy": "private",
              "default": "new Set(null)",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "static": true,
              "description": "Obtains the ShadowRoot options.",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "ShadowRootInit"
                  }
                }
              ],
              "type": {
                "text": "ShadowRootInit"
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "static": true,
              "description": "Obtains the element styles.",
              "return": {
                "type": {
                  "text": "CSSResultFlatArray"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registry",
              "description": "Set the CustomElementRegistry associated to the ShadowRoot",
              "return": {
                "type": {
                  "text": "CustomElementRegistry"
                }
              },
              "parameters": [
                {
                  "name": "registry",
                  "type": {
                    "text": "CustomElementRegistry"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "defineScopedElement",
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "klass",
                  "type": {
                    "text": "typeof HTMLElement"
                  }
                }
              ],
              "description": "Defines a scoped element.",
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "getScopedTagName",
              "static": true,
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "modelValue",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_completeRegistration",
              "description": "Resolves the registrationComplete promise. Subclassers can delay if needed",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElementsFilter",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "FormControl"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "A filter function which will exclude a form field when returning false\nBy default, exclude form fields which are disabled\n\nThe type is be passed as well for more fine grained control, e.g.\ndistinguish the filter when fetching modelValue versus serializedValue",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElements",
              "parameters": [
                {
                  "name": "property",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "filterFn",
                  "optional": true,
                  "type": {
                    "text": "(el: FormControl, property?: string) => boolean"
                  }
                }
              ],
              "description": "Implicit :( @override for FormGroupMixin, as choice fields \"fieldsets\"\nwill always implement both mixins\n\nTODO: Consider making this explicit by extracting this method to its own mixin and\nusing it in both FormGroupMixin and ChoiceGroupMixin, then override it here\nThis also makes it more DRY as we have same method with similar implementation\nin FormGroupMixin. I (@jorenbroekema) think the abstraction is worth it here..",
              "return": {
                "type": {
                  "text": "{[name:string]: any}"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_throwWhenInvalidChildModelValue",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControl"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_checkSingleChoiceElements",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent & {target:FormControl}"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_setCheckedElements",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | any[]"
                  }
                },
                {
                  "name": "check",
                  "type": {
                    "text": "Function"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setChoiceGroupTouched",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "multipleChoice",
              "type": {
                "text": "boolean"
              },
              "description": "When false (default), modelValue and serializedValue will reflect the\ncurrently selected choice (usually a string). When true, modelValue will and\nserializedValue will be an array of strings.",
              "default": "false",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isInitialModelValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isInitialSerializedValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isInitialFormattedValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ChoiceGroupMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "isRegisteredFormElement",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "ElementWithParentFormGroup"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFormElement",
              "parameters": [
                {
                  "name": "child",
                  "description": "the child element (field)",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToAddFormElement",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to perform logic before an element is added",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToChangeFormElementName",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToRemoveFormElement",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formElements",
              "description": "Closely mimics the natively supported HTMLFormControlsCollection. It can be accessed\nboth like an array and an object (based on control/element names).",
              "type": {
                "text": "FormControlsCollection"
              },
              "default": "new FormControlsCollection()",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isFormOrFieldset",
              "type": {
                "text": "boolean"
              },
              "description": "Flag that determines how \".formElements\" should behave.\nFor a regular fieldset (see LionFieldset) we expect \".formElements\"\nto be accessible as an object.\nIn case of a radio-group, a checkbox-group or a select/listbox,\nit should act like an array (see ChoiceGroupMixin).\nUsually, when false, we deal with a choice-group (radio-group, checkbox-group,\n(multi)select)",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "initComplete",
              "description": "initComplete resolves after all pending initialization logic\n(for instance `<form-group .serializedValue=${{ child1: 'a', child2: 'b' }}>`)\nis executed",
              "type": {
                "text": "Promise<any>"
              },
              "default": "new Promise((resolve, reject) => {\n        this.__resolveInitComplete = resolve;\n        this.__rejectInitComplete = reject;\n      })",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registrationComplete",
              "description": "registrationComplete waits for all children formElements to have registered",
              "type": {
                "text": "Promise<any> & {done?:boolean}"
              },
              "default": "new Promise((resolve, reject) => {\n        this.__resolveRegistrationComplete = resolve;\n        this.__rejectRegistrationComplete = reject;\n      })",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "done",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "initInteractionState",
              "description": "Evaluations performed on connectedCallback.\nThis method is public, so it can be called at a later moment (when we need to wait for\nregistering children for instance) as well.\nSince this method will be called twice in last mentioned scenario, it must stay idempotent.",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_iStateOnLeave",
              "description": "Sets touched value to true and reevaluates prefilled state.\nWhen false, on next interaction, user will start with a clean state.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_iStateOnValueChange",
              "description": "Sets dirty value and validates when already touched or invalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onTouchedChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onDirtyChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_showFeedbackConditionFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "type": {
                    "text": "InteractionStates"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackConditionMeta",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "touched",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has focused and left(blurred) the field.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "dirty",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has changed the value of the field.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "prefilled",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has left non-empty field or input is prefilled.\nThe name must be seen from the point of view of the input field:\nonce the user enters the input field, the value is non-empty.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "description": "True when the modelValue is non-empty (see _isEmpty in FormControlMixin)",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_leaveEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the touched state",
              "privacy": "protected",
              "default": "'blur'",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_valueChangedEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the dirty state",
              "privacy": "protected",
              "default": "'model-value-changed'",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            }
          ],
          "events": [
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "name": "form-element-name-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            },
            {
              "name": "touched-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "name": "dirty-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@lion/form-core"
            },
            {
              "name": "ScopedElementsMixin",
              "package": "@lion/core"
            },
            {
              "name": "ChoiceGroupMixin",
              "package": "@lion/form-core"
            },
            {
              "name": "SlotMixin",
              "package": "@lion/core"
            },
            {
              "name": "FormRegistrarMixin",
              "package": "@lion/form-core"
            },
            {
              "name": "dedupeMixin",
              "package": "@lion/core"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "ListboxMixin"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ListboxMixin",
          "declaration": {
            "name": "ListboxMixin",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/src/ListboxMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/test/lion-listbox.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/test/lion-option.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/test/lion-options.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/test-helpers/getListboxMembers.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getListboxMembers",
          "return": {
            "type": {
              "text": "{\n    _listboxNode: import(\"../src/LionOptions\").LionOptions;\n    _activeDescendantOwnerNode: HTMLElement;\n    _inputNode: any & LionOptions;\n    _helpTextNode: HTMLElement;\n    _labelNode: HTMLElement;\n    _feedbackNode: import(\"@lion/form-core\").LionValidationFeedback;\n    _allValidators: any;\n}"
            }
          },
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "ListboxHost"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getListboxMembers",
          "declaration": {
            "name": "getListboxMembers",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/test-helpers/getListboxMembers.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/test-helpers/getListboxMembers.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getListboxMembers",
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "ListboxHost"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getListboxMembers",
          "declaration": {
            "name": "getListboxMembers",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/test-helpers/getListboxMembers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/test-helpers/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "getListboxMembers",
          "declaration": {
            "name": "getListboxMembers",
            "module": "\"./getListboxMembers.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/test-helpers/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "getListboxMembers",
          "declaration": {
            "name": "getListboxMembers",
            "module": "./getListboxMembers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/types/LionOption.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LionOptionHost",
          "members": [
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "type": {
                "text": "ChoiceGroupHost"
              },
              "privacy": "protected"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LionOptionHost",
          "declaration": {
            "name": "LionOptionHost",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/types/LionOption.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/listbox/types/ListboxMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ListboxHost",
          "members": [
            {
              "kind": "field",
              "name": "selectionFollowsFocus",
              "type": {
                "text": "Boolean"
              },
              "privacy": "public",
              "description": "When true, will synchronize activedescendant and selected element on\narrow key navigation.\nThis behavior can usually be seen on <select> on the Windows platform.\nNote that this behavior cannot be used when multiple-choice is true.\nSee: https://www.w3.org/TR/wai-aria-practices/#kbd_selection_follows_focus"
            },
            {
              "kind": "field",
              "name": "rotateKeyboardNavigation",
              "type": {
                "text": "Boolean"
              },
              "privacy": "public",
              "description": "Will give first option active state when navigated to the next option from\nlast option."
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'vertical' | 'horizontal'"
              },
              "privacy": "public",
              "description": "Informs screen reader and affects keyboard navigation.\nBy default 'vertical'"
            },
            {
              "kind": "field",
              "name": "hasNoDefaultSelected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "singleOption",
              "type": {
                "text": "boolean"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "checkedIndex",
              "type": {
                "text": "number | number[]"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "activeIndex",
              "type": {
                "text": "number"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "formElements",
              "type": {
                "text": "LionOption[]"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "setCheckedIndex",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number | number[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "reset",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Reset interaction states and modelValue"
            },
            {
              "kind": "field",
              "name": "_scrollTargetNode",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_listboxNode",
              "type": {
                "text": "LionOptions"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_listboxReceivesNoFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_uncheckChildren",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__setupListboxNode",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getPreviousEnabledOption",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getNextEnabledOption",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_listboxOnKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_listboxOnKeyUp",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_scrollIntoView",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "scrollTargetEl",
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setupListboxNode",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_teardownListboxNode",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_listboxOnClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setupListboxInteractions",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onChildActiveChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_activeDescendantOwnerNode",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_onListboxContentChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "ListboxImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<ListboxHost> &\n  Pick<typeof ListboxHost, keyof typeof ListboxHost> &\n  Constructor<ChoiceGroupHost> &\n  Pick<typeof ChoiceGroupHost, keyof typeof ChoiceGroupHost> &\n  Constructor<SlotHost> &\n  Pick<typeof SlotHost, keyof typeof SlotHost> &\n  Constructor<FormRegistrarHost> &\n  Pick<typeof FormRegistrarHost, keyof typeof FormRegistrarHost> &\n  Constructor<FormControlHost> &\n  Pick<typeof FormControlHost, keyof typeof FormControlHost> &\n  Pick<typeof LitElement, keyof typeof LitElement>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ListboxHost",
          "declaration": {
            "name": "ListboxHost",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/types/ListboxMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ListboxImplementation",
          "declaration": {
            "name": "ListboxImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/listbox/types/ListboxMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/isLocalizeESModule.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isLocalizeESModule",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "Object.<string, Object>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "isLocalizeESModule",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/isLocalizeESModule.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/isLocalizeESModule.js",
      "declarations": [
        {
          "kind": "function",
          "name": "isLocalizeESModule",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "Object.<string, Object>"
              }
            }
          ],
          "return": {
            "type": {
              "text": "boolean"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "isLocalizeESModule",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/isLocalizeESModule.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/localize.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "setLocalize",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "newLocalize",
              "type": {
                "text": "LocalizeManager"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "localize",
          "type": {
            "text": "LocalizeManager"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "setLocalize",
          "declaration": {
            "name": "setLocalize",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/localize.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "localize",
          "declaration": {
            "name": "localize",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/localize.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/localize.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "localize",
          "type": {
            "text": "LocalizeManager"
          }
        },
        {
          "kind": "function",
          "name": "setLocalize",
          "parameters": [
            {
              "name": "newLocalize",
              "type": {
                "text": "LocalizeManager"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "localize",
          "declaration": {
            "name": "localize",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/localize.js"
          }
        },
        {
          "kind": "js",
          "name": "setLocalize",
          "declaration": {
            "name": "setLocalize",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/localize.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/LocalizeManager.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "`LocalizeManager` manages your translations (includes loading)",
          "name": "LocalizeManager",
          "members": [
            {
              "kind": "field",
              "name": "__delegationTarget",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_autoLoadOnLocaleChange",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_fallbackLocale",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "__storage",
              "privacy": "private",
              "type": {
                "text": "Object.<string, Object.<string, Object>>"
              }
            },
            {
              "kind": "field",
              "name": "__namespacePatternsMap",
              "privacy": "private",
              "type": {
                "text": "Map.<RegExp|string, function>"
              }
            },
            {
              "kind": "field",
              "name": "__namespaceLoadersCache",
              "privacy": "private",
              "type": {
                "text": "Object.<string, function|null>"
              }
            },
            {
              "kind": "field",
              "name": "__namespaceLoaderPromisesCache",
              "privacy": "private",
              "type": {
                "text": "Object.<string, Object.<string, Promise.<Object|void>>>"
              }
            },
            {
              "kind": "field",
              "name": "formatNumberOptions",
              "type": {
                "text": "{\n        returnIfNaN: string;\n        /** @type {Map<string,DatePostProcessor>} */\n        postProcessors: Map<string, DatePostProcessor>;\n    }"
              }
            },
            {
              "kind": "field",
              "name": "formatDateOptions",
              "type": {
                "text": "{\n        /** @type {Map<string,DatePostProcessor>} */\n        postProcessors: Map<string, DatePostProcessor>;\n    }"
              }
            },
            {
              "kind": "field",
              "name": "_supportExternalTranslationTools",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "locale",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "_setupTranslationToolSupport",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_langAttrSetByTranslationTool",
              "type": {
                "text": "string | null | undefined"
              },
              "description": "This value allows for support for Google Translate (or other 3rd parties taking control\nof the html[lang] attribute).\n\nHave the following scenario in mind:\n1. locale is initialized by developer via html[data-localize-lang=\"en-US\"] and\nhtml[lang=\"en-US\"]. When localize is loaded (note that this also can be after step 2 below),\nit will sync its initial state from html[data-localize-lang]\n2. Google Translate kicks in for the French language. It will set html[lang=\"fr\"].\nThis new language is not one known by us, so we most likely don't have translations for\nthis file. Therefore, we do NOT sync this value to LocalizeManager. The manager should\nstill ask for known resources (in this case for locale 'en-US')\n3. locale is changed (think of a language dropdown)\nIt's a bit of a weird case, because we would not expect an end user to do this. If he/she\ndoes, make sure that we do not go against Google Translate, so we maintain accessibility\n(by not altering html[lang]). We detect this by reading _langAttrSetByTranslationTool:\nwhen its value is null, we consider Google translate 'not active'.\n\nWhen Google Translate is turned off by the user (html[lang=auto]),\n`localize.locale` will be synced to html[lang] again\n\nKeep in mind that all of the above also works with other tools than Google Translate,\nbut this is the most widely used tool and therefore used as an example."
            },
            {
              "kind": "method",
              "name": "teardown",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "__locale",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "method",
              "name": "_setHtmlLangAttribute",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "__handleLanguageOnly",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "loadingComplete",
              "type": {
                "text": "Promise<void | Object>"
              },
              "return": {
                "type": {
                  "text": "Promise.<Object|void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "addData",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "data",
                  "type": {
                    "text": "object"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setupNamespaceLoader",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "pattern",
                  "type": {
                    "text": "RegExp|string"
                  }
                },
                {
                  "name": "loader",
                  "type": {
                    "text": "function"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "loadNamespaces",
              "return": {
                "type": {
                  "text": "Promise.<Object>"
                }
              },
              "parameters": [
                {
                  "name": "namespaces",
                  "type": {
                    "text": "NamespaceObject[]"
                  }
                },
                {
                  "name": "{ locale }",
                  "optional": true,
                  "type": {
                    "text": "{\n        locale?: string;\n    } | undefined"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "@param {string} [options.locale]\n     * "
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "loadNamespace",
              "return": {
                "type": {
                  "text": "Promise.<Object|void>"
                }
              },
              "parameters": [
                {
                  "name": "namespaceObj",
                  "type": {
                    "text": "NamespaceObject"
                  }
                },
                {
                  "name": "{ locale }",
                  "optional": true,
                  "type": {
                    "text": "{\n        locale?: string;\n    } | undefined"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "@param {string} [options.locale]\n     * "
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "msg",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "keys",
                  "type": {
                    "text": "string | string[]"
                  }
                },
                {
                  "name": "vars",
                  "optional": true,
                  "type": {
                    "text": "Object.<string,?>"
                  }
                },
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "@param {string} [opts.locale]\n     * "
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setupHtmlLangAttributeObserver",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_htmlLangAttributeObserver",
              "type": {
                "text": "MutationObserver | undefined"
              }
            },
            {
              "kind": "method",
              "name": "_teardownHtmlLangAttributeObserver",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_isNamespaceInCache",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getCachedNamespaceLoaderPromise",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void | Object> | null"
                }
              },
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_loadNamespaceData",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise.<Object|void>"
                }
              },
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "namespaceObj",
                  "type": {
                    "text": "NamespaceObject"
                  }
                },
                {
                  "name": "isDynamicImport",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getNamespaceLoader",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Function"
                }
              },
              "parameters": [
                {
                  "name": "namespaceObj",
                  "type": {
                    "text": "NamespaceObject"
                  }
                },
                {
                  "name": "isDynamicImport",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getNamespaceLoaderPromise",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise.<any>"
                }
              },
              "parameters": [
                {
                  "name": "loader",
                  "type": {
                    "text": "function"
                  }
                },
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "fallbackLocale",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_cacheNamespaceLoaderPromise",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "promise",
                  "type": {
                    "text": "Promise.<Object|void>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_lookupNamespaceLoader",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "function|null"
                }
              },
              "parameters": [
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getLangFromLocale",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListener"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "...Object"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListener"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "...Object"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "dispatchEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onLocaleChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "undefined"
                }
              },
              "parameters": [
                {
                  "name": "newLocale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldLocale",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_loadAllMissing",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "newLocale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldLocale",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getMessageForKeys",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string | undefined"
                }
              },
              "parameters": [
                {
                  "name": "keys",
                  "type": {
                    "text": "string | string[]"
                  }
                },
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getMessageForKey",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setDatePostProcessorForLocale",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ locale, postProcessor }",
                  "type": {
                    "text": "{\n        locale: string;\n        postProcessor: DatePostProcessor;\n    }"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{locale:string, postProcessor:DatePostProcessor}"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setNumberPostProcessorForLocale",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ locale, postProcessor }",
                  "type": {
                    "text": "{\n        locale: string;\n        postProcessor: NumberPostProcessor;\n    }"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{locale:string, postProcessor:NumberPostProcessor}"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LocalizeManager",
          "declaration": {
            "name": "LocalizeManager",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/LocalizeManager.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/LocalizeManager.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`LocalizeManager` manages your translations (includes loading)",
          "name": "LocalizeManager",
          "members": [
            {
              "kind": "method",
              "name": "_setupTranslationToolSupport",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "teardown"
            },
            {
              "kind": "field",
              "name": "locale",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setHtmlLangAttribute",
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "__handleLanguageOnly",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "loadingComplete",
              "return": {
                "type": {
                  "text": "Promise.<Object|void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "reset"
            },
            {
              "kind": "method",
              "name": "addData",
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "data",
                  "type": {
                    "text": "object"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setupNamespaceLoader",
              "parameters": [
                {
                  "name": "pattern",
                  "type": {
                    "text": "RegExp|string"
                  }
                },
                {
                  "name": "loader",
                  "type": {
                    "text": "function"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "loadNamespaces",
              "parameters": [
                {
                  "name": "namespaces",
                  "type": {
                    "text": "NamespaceObject[]"
                  }
                },
                {
                  "name": "{ locale }",
                  "default": "{}"
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "@param {string} [options.locale]\n   * "
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise.<Object>"
                }
              }
            },
            {
              "kind": "method",
              "name": "loadNamespace",
              "parameters": [
                {
                  "name": "namespaceObj",
                  "type": {
                    "text": "NamespaceObject"
                  }
                },
                {
                  "name": "{ locale = this.locale }",
                  "default": "{ locale: this.locale }"
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "@param {string} [options.locale]\n   * "
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise.<Object|void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "msg",
              "parameters": [
                {
                  "name": "keys",
                  "type": {
                    "text": "string | string[]"
                  }
                },
                {
                  "name": "vars",
                  "optional": true,
                  "type": {
                    "text": "Object.<string,?>"
                  }
                },
                {
                  "name": "opts",
                  "default": "{}",
                  "optional": true,
                  "type": {
                    "text": "@param {string} [opts.locale]\n   * "
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "_setupHtmlLangAttributeObserver",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_teardownHtmlLangAttributeObserver",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_isNamespaceInCache",
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_getCachedNamespaceLoaderPromise",
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_loadNamespaceData",
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "namespaceObj",
                  "type": {
                    "text": "NamespaceObject"
                  }
                },
                {
                  "name": "isDynamicImport",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise.<Object|void>"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_getNamespaceLoader",
              "parameters": [
                {
                  "name": "namespaceObj",
                  "type": {
                    "text": "NamespaceObject"
                  }
                },
                {
                  "name": "isDynamicImport",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_getNamespaceLoaderPromise",
              "parameters": [
                {
                  "name": "loader",
                  "type": {
                    "text": "function"
                  }
                },
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "fallbackLocale",
                  "default": "this._fallbackLocale",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise.<any>"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_cacheNamespaceLoaderPromise",
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "promise",
                  "type": {
                    "text": "Promise.<Object|void>"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_lookupNamespaceLoader",
              "parameters": [
                {
                  "name": "namespace",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "function|null"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_getLangFromLocale",
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListener"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "...Object"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListener"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "...Object"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "dispatchEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onLocaleChanged",
              "parameters": [
                {
                  "name": "newLocale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldLocale",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "undefined"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_loadAllMissing",
              "parameters": [
                {
                  "name": "newLocale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldLocale",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_getMessageForKeys",
              "parameters": [
                {
                  "name": "keys",
                  "type": {
                    "text": "string | string[]"
                  }
                },
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string | undefined"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_getMessageForKey",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setDatePostProcessorForLocale",
              "parameters": [
                {
                  "name": "{ locale, postProcessor }"
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{locale:string, postProcessor:DatePostProcessor}"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setNumberPostProcessorForLocale",
              "parameters": [
                {
                  "name": "{ locale, postProcessor }"
                },
                {
                  "name": "options",
                  "type": {
                    "text": "{locale:string, postProcessor:NumberPostProcessor}"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "__delegationTarget",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_autoLoadOnLocaleChange",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "!!autoLoadOnLocaleChange"
            },
            {
              "kind": "field",
              "name": "_fallbackLocale",
              "privacy": "protected",
              "default": "fallbackLocale"
            },
            {
              "kind": "field",
              "name": "__storage",
              "type": {
                "text": "Object.<string, Object.<string, Object>>"
              },
              "privacy": "private",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "__namespacePatternsMap",
              "type": {
                "text": "Map.<RegExp|string, function>"
              },
              "privacy": "private",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "__namespaceLoadersCache",
              "type": {
                "text": "Object.<string, function|null>"
              },
              "privacy": "private",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "__namespaceLoaderPromisesCache",
              "type": {
                "text": "Object.<string, Object.<string, Promise.<Object|void>>>"
              },
              "privacy": "private",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "formatNumberOptions",
              "type": {
                "text": "object"
              },
              "default": "{\n      returnIfNaN: '',\n      /** @type {Map<string,DatePostProcessor>} */\n      postProcessors: new Map(),\n    }"
            },
            {
              "kind": "field",
              "name": "formatDateOptions",
              "type": {
                "text": "object"
              },
              "default": "{\n      /** @type {Map<string,DatePostProcessor>} */\n      postProcessors: new Map(),\n    }"
            },
            {
              "kind": "field",
              "name": "_supportExternalTranslationTools",
              "privacy": "protected"
            }
          ],
          "events": [
            {
              "name": "__localeChanging",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "localeChanged",
              "type": {
                "text": "CustomEvent"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LocalizeManager",
          "declaration": {
            "name": "LocalizeManager",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/LocalizeManager.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/LocalizeMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "LocalizeMixin",
          "type": {
            "text": "typeof import(\"../types/LocalizeMixinTypes.js\").LocalizeMixinImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LocalizeMixin",
          "declaration": {
            "name": "LocalizeMixin",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/LocalizeMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/LocalizeMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "# LocalizeMixin - for self managed templates",
          "name": "LocalizeMixin",
          "members": [
            {
              "kind": "field",
              "name": "localizeNamespaces",
              "static": true,
              "return": {
                "type": {
                  "text": "Object.<string,function>[]"
                }
              }
            },
            {
              "kind": "field",
              "name": "waitForLocalizeNamespaces",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "performUpdate",
              "description": "hook into LitElement to only render once all translations are loaded",
              "return": {
                "type": {
                  "text": "Promise.<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "msgLit",
              "parameters": [
                {
                  "name": "keys",
                  "type": {
                    "text": "string | string[]"
                  }
                },
                {
                  "name": "variables",
                  "optional": true,
                  "type": {
                    "text": "Object.<string,?>"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "@param {string} [options.locale]\n     * "
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string | DirectiveResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "__getUniqueNamespaces",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__localizeStartLoadingNamespaces",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__localizeOnLocaleChanging",
              "description": "Start loading namespaces on the event that is sent immediately\nwhen localize.locale changes --> 'localeChanging'",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__localizeOnLocaleChanged",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onLocaleReady"
            },
            {
              "kind": "method",
              "name": "onLocaleChanged",
              "parameters": [
                {
                  "name": "newLocale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldLocale",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onLocaleUpdated"
            },
            {
              "kind": "field",
              "name": "__boundLocalizeOnLocaleChanged",
              "privacy": "private",
              "default": "(...args) => {\n          const event = /** @type {CustomEvent} */ (Array.from(args)[0]);\n          this.__localizeOnLocaleChanged(event);\n        }"
            },
            {
              "kind": "field",
              "name": "__boundLocalizeOnLocaleChanging",
              "default": "() => {\n          this.__localizeOnLocaleChanging();\n        }"
            }
          ],
          "parameters": [
            {
              "name": "superclass"
            }
          ],
          "type": {
            "text": "LocalizeMixin"
          },
          "mixins": [
            {
              "name": "dedupeMixin",
              "package": "@lion/core"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LocalizeMixin",
          "declaration": {
            "name": "LocalizeMixin",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/LocalizeMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/isLocalizeESModule.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/localize.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/LocalizeManager.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/LocalizeMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/test-esmodule-default.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "_default",
          "type": {
            "text": "{}"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "_default",
            "module": "packages/atom-listbox/node_modules/@lion/localize/test/test-esmodule-default.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/test-esmodule-default.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/atom-listbox/node_modules/@lion/localize/test/test-esmodule-default.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/fake-imports.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "setupFakeImport",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "Object"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "setupEmptyFakeImportsFor",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "namespaces",
              "type": {
                "text": "string[]"
              }
            },
            {
              "name": "locales",
              "type": {
                "text": "string[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "resetFakeImport",
          "return": {
            "type": {
              "text": "void"
            }
          }
        },
        {
          "kind": "function",
          "name": "fakeImport",
          "return": {
            "type": {
              "text": "Promise.<Object>"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "ms",
              "optional": true,
              "type": {
                "text": "number"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "setupFakeImport",
          "declaration": {
            "name": "setupFakeImport",
            "module": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/fake-imports.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "setupEmptyFakeImportsFor",
          "declaration": {
            "name": "setupEmptyFakeImportsFor",
            "module": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/fake-imports.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "resetFakeImport",
          "declaration": {
            "name": "resetFakeImport",
            "module": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/fake-imports.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fakeImport",
          "declaration": {
            "name": "fakeImport",
            "module": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/fake-imports.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/fake-imports.js",
      "declarations": [
        {
          "kind": "function",
          "name": "setupFakeImport",
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "Object"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "setupEmptyFakeImportsFor",
          "parameters": [
            {
              "name": "namespaces",
              "type": {
                "text": "string[]"
              }
            },
            {
              "name": "locales",
              "type": {
                "text": "string[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "resetFakeImport"
        },
        {
          "kind": "function",
          "name": "fakeImport",
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "ms",
              "default": "0",
              "optional": true,
              "type": {
                "text": "number"
              }
            }
          ],
          "return": {
            "type": {
              "text": "Promise.<Object>"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "setupFakeImport",
          "declaration": {
            "name": "setupFakeImport",
            "module": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/fake-imports.js"
          }
        },
        {
          "kind": "js",
          "name": "setupEmptyFakeImportsFor",
          "declaration": {
            "name": "setupEmptyFakeImportsFor",
            "module": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/fake-imports.js"
          }
        },
        {
          "kind": "js",
          "name": "resetFakeImport",
          "declaration": {
            "name": "resetFakeImport",
            "module": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/fake-imports.js"
          }
        },
        {
          "kind": "js",
          "name": "fakeImport",
          "declaration": {
            "name": "fakeImport",
            "module": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/fake-imports.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "localizeTearDown",
          "declaration": {
            "name": "localizeTearDown",
            "module": "\"./localizeTearDown.js\""
          }
        },
        {
          "kind": "js",
          "name": "fakeImport",
          "declaration": {
            "name": "fakeImport",
            "module": "\"./fake-imports.js\""
          }
        },
        {
          "kind": "js",
          "name": "resetFakeImport",
          "declaration": {
            "name": "resetFakeImport",
            "module": "\"./fake-imports.js\""
          }
        },
        {
          "kind": "js",
          "name": "setupEmptyFakeImportsFor",
          "declaration": {
            "name": "setupEmptyFakeImportsFor",
            "module": "\"./fake-imports.js\""
          }
        },
        {
          "kind": "js",
          "name": "setupFakeImport",
          "declaration": {
            "name": "setupFakeImport",
            "module": "\"./fake-imports.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "fakeImport",
          "declaration": {
            "name": "fakeImport",
            "module": "./fake-imports.js"
          }
        },
        {
          "kind": "js",
          "name": "resetFakeImport",
          "declaration": {
            "name": "resetFakeImport",
            "module": "./fake-imports.js"
          }
        },
        {
          "kind": "js",
          "name": "setupEmptyFakeImportsFor",
          "declaration": {
            "name": "setupEmptyFakeImportsFor",
            "module": "./fake-imports.js"
          }
        },
        {
          "kind": "js",
          "name": "setupFakeImport",
          "declaration": {
            "name": "setupFakeImport",
            "module": "./fake-imports.js"
          }
        },
        {
          "kind": "js",
          "name": "localizeTearDown",
          "declaration": {
            "name": "localizeTearDown",
            "module": "./localizeTearDown.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/localizeTearDown.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "localizeTearDown",
          "return": {
            "type": {
              "text": "void"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "localizeTearDown",
          "declaration": {
            "name": "localizeTearDown",
            "module": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/localizeTearDown.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/localizeTearDown.js",
      "declarations": [
        {
          "kind": "function",
          "name": "localizeTearDown"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "localizeTearDown",
          "declaration": {
            "name": "localizeTearDown",
            "module": "packages/atom-listbox/node_modules/@lion/localize/test-helpers/localizeTearDown.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/types/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "main",
          "type": {
            "text": "any"
          }
        },
        {
          "kind": "variable",
          "name": "fetchMock",
          "type": {
            "text": "any"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "main",
            "module": "packages/atom-listbox/node_modules/@lion/localize/types/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fetchMock",
          "declaration": {
            "name": "fetchMock",
            "module": "packages/atom-listbox/node_modules/@lion/localize/types/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/types/LocalizeMixinTypes.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/base.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "legacyPrototypeMethod",
          "type": {
            "text": "(descriptor: PropertyDescriptor, proto: Object, name: PropertyKey) => void"
          }
        },
        {
          "kind": "variable",
          "name": "standardPrototypeMethod",
          "type": {
            "text": "(descriptor: PropertyDescriptor, element: ClassElement) => {\n    kind: string;\n    placement: string;\n    key: PropertyKey;\n    descriptor: PropertyDescriptor;\n}"
          }
        },
        {
          "kind": "variable",
          "name": "decorateProperty",
          "type": {
            "text": "({ finisher, descriptor, }: {\n    finisher?: ((ctor: typeof ReactiveElement, property: PropertyKey) => void) | null | undefined;\n    descriptor?: ((property: PropertyKey) => PropertyDescriptor) | undefined;\n}) => (protoOrDescriptor: ReactiveElement | ClassElement, name?: PropertyKey | undefined) => void | any"
          },
          "description": "Helper for decorating a property that is compatible with both TypeScript\nand Babel decorators. The optional `finisher` can be used to perform work on\nthe class. The optional `descriptor` should return a PropertyDescriptor\nto install for the given property.",
          "parameters": [
            {
              "description": "Optional finisher method; receives the element\nconstructor and property key as arguments and has no return value.",
              "name": "finisher",
              "type": {
                "text": "function"
              }
            },
            {
              "description": "Optional descriptor method; receives the\nproperty key as an argument and returns a property descriptor to define for\nthe given property.",
              "name": "descriptor",
              "type": {
                "text": "function"
              }
            }
          ],
          "return": {
            "type": {
              "text": "ClassElement|void"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "legacyPrototypeMethod",
          "declaration": {
            "name": "legacyPrototypeMethod",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/base.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "standardPrototypeMethod",
          "declaration": {
            "name": "standardPrototypeMethod",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/base.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "decorateProperty",
          "declaration": {
            "name": "decorateProperty",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/base.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/base.js",
      "declarations": [
        {
          "kind": "function",
          "name": "e",
          "parameters": [
            {
              "name": "e"
            },
            {
              "name": "t"
            },
            {
              "name": "o"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "t",
          "default": "(e,t)=>({kind:\"method\",placement:\"prototype\",key:t.key,descriptor:e})"
        },
        {
          "kind": "variable",
          "name": "o",
          "default": "({finisher:e,descriptor:t})=>(o,n)=>{var r;if(void 0===n){const n=null!==(r=o.originalKey)&&void 0!==r?r:o.key,i=null!=t?{kind:\"method\",placement:\"prototype\",key:n,descriptor:t(o.key)}:{...o,key:n};return null!=e&&(i.finisher=function(t){e(t,n)}),i}{const r=o.constructor;void 0!==t&&Object.defineProperty(o,n,t(n)),null==e||e(r,n)}}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "decorateProperty",
          "declaration": {
            "name": "o",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/base.js"
          }
        },
        {
          "kind": "js",
          "name": "legacyPrototypeMethod",
          "declaration": {
            "name": "e",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/base.js"
          }
        },
        {
          "kind": "js",
          "name": "standardPrototypeMethod",
          "declaration": {
            "name": "t",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/base.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/custom-element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "customElement",
          "type": {
            "text": "(tagName: string) => (classOrDescriptor: CustomElementClass | ClassDescriptor) => any"
          },
          "description": "Class decorator factory that defines the decorated class as a custom element.\n\n```js",
          "parameters": [
            {
              "description": "The tag name of the custom element to define.",
              "name": "tagName"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "customElement",
          "declaration": {
            "name": "customElement",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/custom-element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/custom-element.js",
      "declarations": [
        {
          "kind": "function",
          "name": "n",
          "parameters": [
            {
              "name": "n"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "n",
          "declaration": {
            "name": "e",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/custom-element.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "n",
          "declaration": {
            "name": "e",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/custom-element.js"
          }
        },
        {
          "kind": "js",
          "name": "customElement",
          "declaration": {
            "name": "n",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/custom-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/event-options.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "eventOptions",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: ReactiveElement | import(\"./base.js\").ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "type": {
                "text": "AddEventListenerOptions"
              },
              "description": "An object that specifies event listener options as accepted by\n`EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n\nCurrent browsers support the `capture`, `passive`, and `once` options. See:\nhttps://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n\n```ts\nclass MyElement {\nclicked = false;\n\nrender() {\nreturn html`\n<div"
            }
          ],
          "description": "Adds event listener options to a method used as an event listener in a\nlit-html template."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "eventOptions",
          "declaration": {
            "name": "eventOptions",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/event-options.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/event-options.js",
      "declarations": [
        {
          "kind": "function",
          "name": "e",
          "parameters": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "eventOptions",
          "declaration": {
            "name": "e",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/event-options.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/property.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "property",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: Object | ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "PropertyDeclaration"
              }
            }
          ],
          "description": "A property decorator which creates a reactive property that reflects a\ncorresponding attribute value. When a decorated property is set\nthe element will update and render. A [[`PropertyDeclaration`]] may\noptionally be supplied to configure property features.\n\nThis decorator should only be used for public fields. As public fields,\nproperties should be considered as primarily settable by element users,\neither via attribute or the property itself.\n\nGenerally, properties that are changed by the element should be private or\nprotected fields and should use the [[`state`]] decorator.\n\nHowever, sometimes element code does need to set a public property. This\nshould typically only be done in response to user interaction, and an event\nshould be fired informing the user; for example, a checkbox sets its\n`checked` property when clicked and fires a `changed` event. Mutating public\nproperties should typically not be done for non-primitive (object or array)\nproperties. In other cases when an element needs to manage state, a private\nproperty decorated via the [[`state`]] decorator should be used. When needed,\nstate properties can be initialized via public properties to facilitate\ncomplex interactions.\n\n```ts\nclass MyElement {"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "property",
          "declaration": {
            "name": "property",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/property.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/property.js",
      "declarations": [
        {
          "kind": "function",
          "name": "e",
          "parameters": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "property",
          "declaration": {
            "name": "e",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/property.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query-all.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAll",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: ReactiveElement | import(\"./base.js\").ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "selector",
              "type": {
                "text": "string"
              },
              "description": "A DOMString containing one or more selectors to match.\n\nSee:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter\nthat executes a querySelectorAll on the element's renderRoot."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAll",
          "declaration": {
            "name": "queryAll",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query-all.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query-all.js",
      "declarations": [
        {
          "kind": "function",
          "name": "e",
          "parameters": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAll",
          "declaration": {
            "name": "e",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query-all.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query-assigned-nodes.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAssignedNodes",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: ReactiveElement | import(\"./base.js\").ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "slotName",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "A string name of the slot."
            },
            {
              "name": "flatten",
              "optional": true,
              "type": {
                "text": "boolean"
              },
              "description": "A boolean which when true flattens the assigned nodes,\nmeaning any assigned nodes that are slot elements are replaced with their\nassigned nodes."
            },
            {
              "name": "selector",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "A string which filters the results to elements that match\nthe given css selector.\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nreturns the `assignedNodes` of the given named `slot`. Note, the type of\nthis property should be annotated as `NodeListOf<HTMLElement>`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAssignedNodes",
          "declaration": {
            "name": "queryAssignedNodes",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query-assigned-nodes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query-assigned-nodes.js",
      "declarations": [
        {
          "kind": "function",
          "name": "o",
          "parameters": [
            {
              "name": "o",
              "default": "\"\""
            },
            {
              "name": "n",
              "default": "!1"
            },
            {
              "name": "t",
              "default": "\"\""
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAssignedNodes",
          "declaration": {
            "name": "o",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query-async.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAsync",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: ReactiveElement | import(\"./base.js\").ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "selector",
              "type": {
                "text": "string"
              },
              "description": "A DOMString containing one or more selectors to match.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nreturns a promise that resolves to the result of a querySelector on the\nelement's renderRoot done after the element's `updateComplete` promise\nresolves. When the queried property may change with element state, this\ndecorator can be used instead of requiring users to await the\n`updateComplete` before accessing the property."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAsync",
          "declaration": {
            "name": "queryAsync",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query-async.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query-async.js",
      "declarations": [
        {
          "kind": "function",
          "name": "e",
          "parameters": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAsync",
          "declaration": {
            "name": "e",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query-async.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "query",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: ReactiveElement | import(\"./base.js\").ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "selector",
              "type": {
                "text": "string"
              },
              "description": "A DOMString containing one or more selectors to match."
            },
            {
              "name": "cache",
              "optional": true,
              "type": {
                "text": "boolean"
              },
              "description": "An optional boolean which when true performs the DOM query only\nonce and caches the result.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nexecutes a querySelector on the element's renderRoot."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "query",
          "declaration": {
            "name": "query",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query.js",
      "declarations": [
        {
          "kind": "function",
          "name": "i",
          "parameters": [
            {
              "name": "i"
            },
            {
              "name": "n"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "query",
          "declaration": {
            "name": "i",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/query.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/state.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "state",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: Object | import(\"./base.js\").ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "InternalPropertyDeclaration"
              }
            }
          ],
          "description": "Declares a private or protected reactive property that still triggers\nupdates to the element when it changes. It does not reflect from the\ncorresponding attribute.\n\nProperties declared this way must not be used from HTML or HTML templating\nsystems, they're solely for properties internal to the element. These\nproperties may be renamed by optimization tools like closure compiler."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "state",
          "declaration": {
            "name": "state",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/state.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/state.js",
      "declarations": [
        {
          "kind": "function",
          "name": "t",
          "parameters": [
            {
              "name": "t"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "state",
          "declaration": {
            "name": "t",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/decorators/state.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/css-tag.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "supportsAdoptingStyleSheets",
          "type": {
            "text": "boolean"
          },
          "description": "Whether the current browser supports `adoptedStyleSheets`."
        },
        {
          "kind": "class",
          "description": "A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n\nCSSResult is the return value of `css`-tagged template literals and\n`unsafeCSS()`. In order to ensure that CSSResults are only created via the\n`css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.",
          "name": "CSSResult",
          "members": [
            {
              "kind": "field",
              "name": "['_$cssResult$']",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "cssText",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "styleSheet",
              "type": {
                "text": "CSSStyleSheet | undefined"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "unsafeCSS",
          "type": {
            "text": "(value: unknown) => CSSResult"
          },
          "description": "Wrap a value for interpolation in a [[`css`]] tagged template literal.\n\nThis is unsafe because untrusted CSS text can be used to phone home\nor exfiltrate data to an attacker controlled site. Take care to only use\nthis with trusted input."
        },
        {
          "kind": "variable",
          "name": "css",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: (CSSResultGroup | number)[]) => CSSResult"
          },
          "description": "A template literal tag which can be used with LitElement's\n[[LitElement.styles | `styles`]] property to set element styles.\n\nFor security reasons, only literal string values and number may be used in\nembedded expressions. To incorporate non-literal values [[`unsafeCSS`]] may\nbe used inside an expression."
        },
        {
          "kind": "variable",
          "name": "adoptStyles",
          "type": {
            "text": "(renderRoot: ShadowRoot, styles: Array<CSSResultOrNative>) => void"
          },
          "description": "Applies the given styles to a `shadowRoot`. When Shadow DOM is\navailable but `adoptedStyleSheets` is not, styles are appended to the\n`shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\nNote, when shimming is used, any styles that are subsequently placed into\nthe shadowRoot should be placed *before* any shimmed adopted styles. This\nwill match spec behavior that gives adopted sheets precedence over styles in\nshadowRoot."
        },
        {
          "kind": "variable",
          "name": "getCompatibleStyle",
          "type": {
            "text": "(s: CSSResultOrNative) => CSSResultOrNative"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "supportsAdoptingStyleSheets",
          "declaration": {
            "name": "supportsAdoptingStyleSheets",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "CSSResult",
          "declaration": {
            "name": "CSSResult",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "unsafeCSS",
          "declaration": {
            "name": "unsafeCSS",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "css",
          "declaration": {
            "name": "css",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "adoptStyles",
          "declaration": {
            "name": "adoptStyles",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getCompatibleStyle",
          "declaration": {
            "name": "getCompatibleStyle",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/css-tag.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/css-tag.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "supportsAdoptingStyleSheets",
          "description": "Whether the current browser supports `adoptedStyleSheets`."
        },
        {
          "kind": "class",
          "description": "A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n\nCSSResult is the return value of `css`-tagged template literals and\n`unsafeCSS()`. In order to ensure that CSSResults are only created via the\n`css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.",
          "name": "CSSResult",
          "members": [
            {
              "kind": "field",
              "name": "styleSheet"
            },
            {
              "kind": "method",
              "name": "toString"
            },
            {
              "kind": "field",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "cssText",
              "default": "cssText"
            }
          ]
        },
        {
          "kind": "function",
          "name": "unsafeCSS",
          "parameters": [
            {
              "name": "value"
            }
          ],
          "description": "Wrap a value for interpolation in a [[`css`]] tagged template literal.\n\nThis is unsafe because untrusted CSS text can be used to phone home\nor exfiltrate data to an attacker controlled site. Take care to only use\nthis with trusted input."
        },
        {
          "kind": "function",
          "name": "css",
          "parameters": [
            {
              "name": "strings"
            },
            {
              "name": "values"
            }
          ],
          "description": "A template literal tag which can be used with LitElement's\n[[LitElement.styles | `styles`]] property to set element styles.\n\nFor security reasons, only literal string values and number may be used in\nembedded expressions. To incorporate non-literal values [[`unsafeCSS`]] may\nbe used inside an expression."
        },
        {
          "kind": "function",
          "name": "adoptStyles",
          "parameters": [
            {
              "name": "renderRoot"
            },
            {
              "name": "styles"
            }
          ],
          "description": "Applies the given styles to a `shadowRoot`. When Shadow DOM is\navailable but `adoptedStyleSheets` is not, styles are appended to the\n`shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\nNote, when shimming is used, any styles that are subsequently placed into\nthe shadowRoot should be placed *before* any shimmed adopted styles. This\nwill match spec behavior that gives adopted sheets precedence over styles in\nshadowRoot."
        },
        {
          "kind": "variable",
          "name": "getCompatibleStyle"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "supportsAdoptingStyleSheets",
          "declaration": {
            "name": "supportsAdoptingStyleSheets",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/css-tag.js"
          }
        },
        {
          "kind": "js",
          "name": "CSSResult",
          "declaration": {
            "name": "CSSResult",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/css-tag.js"
          }
        },
        {
          "kind": "js",
          "name": "unsafeCSS",
          "declaration": {
            "name": "unsafeCSS",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/css-tag.js"
          }
        },
        {
          "kind": "js",
          "name": "css",
          "declaration": {
            "name": "css",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/css-tag.js"
          }
        },
        {
          "kind": "js",
          "name": "adoptStyles",
          "declaration": {
            "name": "adoptStyles",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/css-tag.js"
          }
        },
        {
          "kind": "js",
          "name": "getCompatibleStyle",
          "declaration": {
            "name": "getCompatibleStyle",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/css-tag.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/base.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/custom-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/property.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/state.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/event-options.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-all.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-async.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/base.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/custom-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/property.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/state.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/event-options.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-all.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-async.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/polyfill-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/polyfill-support.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-controller.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-controller.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultConverter",
          "type": {
            "text": "ComplexAttributeConverter"
          }
        },
        {
          "kind": "variable",
          "name": "notEqual",
          "type": {
            "text": "HasChanged"
          },
          "description": "Change function that returns true if `value` is different from `oldValue`.\nThis method is used as the default for a property's `hasChanged` function."
        },
        {
          "kind": "class",
          "description": "Base element class which manages element properties and attributes. When\nproperties change, the `update` method is asynchronously called. This method\nshould be supplied by subclassers to render updates as desired.",
          "name": "ReactiveElement",
          "members": [
            {
              "kind": "field",
              "name": "enabledWarnings",
              "type": {
                "text": "WarningKind[] | undefined"
              },
              "static": true,
              "description": "Read or set all the enabled warning categories for this class.\n\nThis property is only used in development builds."
            },
            {
              "kind": "field",
              "name": "enableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Enable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Enable for all ReactiveElement subclasses\nReactiveElement.enableWarning.?('migration');\n\n// Enable for only MyElement and subclasses\nMyElement.enableWarning.?('migration');\n```"
            },
            {
              "kind": "field",
              "name": "disableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Disable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Disable for all ReactiveElement subclasses\nReactiveElement.disableWarning.?('migration');\n\n// Disable for only MyElement and subclasses\nMyElement.disableWarning.?('migration');\n```"
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "initializer",
                  "type": {
                    "text": "Initializer"
                  }
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {"
            },
            {
              "kind": "field",
              "name": "_initializers",
              "type": {
                "text": "Initializer[] | undefined"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "__attributeToPropertyMap",
              "privacy": "private",
              "static": true,
              "description": "Maps attribute names to properties; for example `foobar` attribute to\n`fooBar` property. Created lazily on user subclasses when finalizing the\nclass."
            },
            {
              "kind": "field",
              "name": "[finalized]",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Marks class as having finished creating properties."
            },
            {
              "kind": "field",
              "name": "elementProperties",
              "type": {
                "text": "PropertyDeclarationMap"
              },
              "static": true,
              "description": "Memoized list of all element properties, including any superclass properties.\nCreated lazily on user subclasses when finalizing the class."
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "type": {
                "text": "Array<CSSResultOrNative>"
              },
              "static": true,
              "description": "Memoized list of all element styles.\nCreated lazily on user subclasses when finalizing the class."
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```"
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "{\n        get(): any;\n        set(this: ReactiveElement, value: unknown): void;\n        configurable: boolean;\n        enumerable: boolean;\n    }"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```"
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDeclaration<unknown, unknown>"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]]."
            },
            {
              "kind": "method",
              "name": "finalize",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized."
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "description": "Options used when calling `attachShadow`. Set this property to customize\nthe options for the shadowRoot; for example, to create a closed\nshadowRoot: `{mode: 'closed'}`.\n\nNote, these options are used in `createRenderRoot`. If this method\nis customized, options should be respected if possible."
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "Array<CSSResultOrNative>"
                }
              },
              "parameters": [
                {
                  "name": "styles",
                  "optional": true,
                  "type": {
                    "text": "CSSResultGroup"
                  }
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles."
            },
            {
              "kind": "field",
              "name": "renderRoot",
              "type": {
                "text": "HTMLElement | ShadowRoot"
              },
              "description": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot."
            },
            {
              "kind": "field",
              "name": "__attributeNameForProperty",
              "privacy": "private",
              "static": true,
              "description": "Returns the property name for the given attribute `name`."
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__updatePromise",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read."
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`."
            },
            {
              "kind": "field",
              "name": "__reflectingProperties",
              "privacy": "private",
              "description": "Map with keys of properties that should be reflected when updated."
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "privacy": "private",
              "description": "Name of currently reflecting property"
            },
            {
              "kind": "field",
              "name": "__controllers",
              "privacy": "private",
              "description": "Set of controllers."
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called."
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Removes a `ReactiveController` from the element."
            },
            {
              "kind": "field",
              "name": "__saveInstanceProperties",
              "privacy": "private",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default)."
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`."
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_requestedUpdate",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate."
            },
            {
              "kind": "field",
              "name": "__propertyToAttribute",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__enqueueUpdate",
              "privacy": "private",
              "description": "Sets up the element to asynchronously update."
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void | Promise<unknown>"
                }
              },
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```"
            },
            {
              "kind": "field",
              "name": "__markUpdated",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./css-tag.js"
          }
        },
        {
          "kind": "js",
          "name": "ReactiveController",
          "declaration": {
            "name": "ReactiveController",
            "module": "./reactive-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "ReactiveControllerHost",
          "declaration": {
            "name": "ReactiveControllerHost",
            "module": "./reactive-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "defaultConverter",
          "declaration": {
            "name": "defaultConverter",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "notEqual",
          "declaration": {
            "name": "notEqual",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ReactiveElement",
          "declaration": {
            "name": "ReactiveElement",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultConverter",
          "type": {
            "text": "object"
          },
          "default": "{\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                value = value ? '' : null;\n                break;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                value = value == null ? value : JSON.stringify(value);\n                break;\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        let fromValue = value;\n        switch (type) {\n            case Boolean:\n                fromValue = value !== null;\n                break;\n            case Number:\n                fromValue = value === null ? null : Number(value);\n                break;\n            case Object:\n            case Array:\n                // Do *not* generate exception when invalid JSON is set as elements\n                // don't normally complain on being mis-configured.\n                // TODO(sorvell): Do generate exception in *dev mode*.\n                try {\n                    // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n                    fromValue = JSON.parse(value);\n                }\n                catch (e) {\n                    fromValue = null;\n                }\n                break;\n        }\n        return fromValue;\n    },\n}"
        },
        {
          "kind": "function",
          "name": "notEqual",
          "parameters": [
            {
              "name": "value"
            },
            {
              "name": "old"
            }
          ],
          "description": "Change function that returns true if `value` is different from `oldValue`.\nThis method is used as the default for a property's `hasChanged` function."
        },
        {
          "kind": "class",
          "description": "Base element class which manages element properties and attributes. When\nproperties change, the `update` method is asynchronously called. This method\nshould be supplied by subclassers to render updates as desired.",
          "name": "ReactiveElement",
          "members": [
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {"
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```"
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```"
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]]."
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized."
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles."
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`."
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called."
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element."
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default)."
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate."
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ]
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update."
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```"
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "__markUpdated"
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./css-tag.js"
          }
        },
        {
          "kind": "js",
          "name": "defaultConverter",
          "declaration": {
            "name": "defaultConverter",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
          }
        },
        {
          "kind": "js",
          "name": "notEqual",
          "declaration": {
            "name": "notEqual",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
          }
        },
        {
          "kind": "js",
          "name": "ReactiveElement",
          "declaration": {
            "name": "ReactiveElement",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@open-wc/dedupe-mixin/src/dedupeMixin.js",
      "declarations": [
        {
          "kind": "function",
          "name": "dedupeMixin",
          "parameters": [
            {
              "name": "mixin",
              "description": "Mixin to be applyed",
              "type": {
                "text": "function"
              }
            }
          ],
          "description": "Apply each mixin in the chain to make sure they are not applied more than once to the final class.",
          "return": {
            "type": {
              "text": "object"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dedupeMixin",
          "declaration": {
            "name": "dedupeMixin",
            "module": "packages/atom-listbox/node_modules/@open-wc/dedupe-mixin/src/dedupeMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "ScopedElementsMixin",
          "members": [
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "description": "Obtains the scoped elements definitions map if specified.",
              "return": {
                "type": {
                  "text": "ScopedElementsMap"
                }
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "static": true,
              "description": "Obtains the ShadowRoot options.",
              "type": {
                "text": "ShadowRootInit"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "static": true,
              "description": "Set the shadowRoot options.",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "ShadowRootInit"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "static": true,
              "description": "Obtains the element styles.",
              "return": {
                "type": {
                  "text": "CSSResultFlatArray"
                }
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "static": true
            },
            {
              "kind": "field",
              "name": "registry",
              "description": "Set the CustomElementRegistry associated to the ShadowRoot",
              "return": {
                "type": {
                  "text": "CustomElementRegistry"
                }
              },
              "parameters": [
                {
                  "name": "registry",
                  "type": {
                    "text": "CustomElementRegistry"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "createRenderRoot"
            },
            {
              "kind": "method",
              "name": "defineScopedElement",
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "klass",
                  "type": {
                    "text": "typeof HTMLElement"
                  }
                }
              ],
              "description": "Defines a scoped element."
            },
            {
              "kind": "method",
              "name": "getScopedTagName",
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "getScopedTagName",
              "static": true,
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              }
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ],
          "mixins": [
            {
              "name": "dedupeMixin",
              "package": "@open-wc/dedupe-mixin"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ScopedElementsMixin",
          "declaration": {
            "name": "ScopedElementsMixin",
            "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/types.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ScopedElementsHost",
          "members": [
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "ScopedElementsMap"
              },
              "static": true,
              "description": "Obtains the scoped elements definitions map"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "registry",
              "type": {
                "text": "CustomElementRegistry"
              },
              "description": "Obtains the CustomElementRegistry"
            },
            {
              "kind": "method",
              "name": "defineScopedElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "klass",
                  "type": {
                    "text": "Constructor<T>"
                  }
                }
              ],
              "description": "Defines a scoped element inside the CustomElementRegistry bound to the shadowRoot."
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              },
              "privacy": "public"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Constructor",
          "declaration": {
            "name": "Constructor",
            "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/types.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ScopedElementsHost",
          "declaration": {
            "name": "ScopedElementsHost",
            "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/types.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/types/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ScopedElementsMixin",
          "declaration": {
            "name": "ScopedElementsMixin",
            "module": "\"./src/ScopedElementsMixin.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@types/trusted-types/lib/index.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TrustedHTML",
          "members": [
            {
              "kind": "field",
              "name": "brand",
              "type": {
                "text": "true"
              },
              "privacy": "private"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "TrustedScript",
          "members": [
            {
              "kind": "field",
              "name": "brand",
              "type": {
                "text": "true"
              },
              "privacy": "private"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "TrustedScriptURL",
          "members": [
            {
              "kind": "field",
              "name": "brand",
              "type": {
                "text": "true"
              },
              "privacy": "private"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "TrustedTypePolicyFactory",
          "members": [
            {
              "kind": "method",
              "name": "createPolicy",
              "return": {
                "type": {
                  "text": "Pick<TrustedTypePolicy<Options>, 'name' | Extract<keyof Options, FnNames>>"
                }
              },
              "parameters": [
                {
                  "name": "policyName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "policyOptions",
                  "optional": true,
                  "type": {
                    "text": "Options"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isHTML",
              "return": {
                "type": {
                  "text": "value is TrustedHTML"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isScript",
              "return": {
                "type": {
                  "text": "value is TrustedScript"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isScriptURL",
              "return": {
                "type": {
                  "text": "value is TrustedScriptURL"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "emptyHTML",
              "type": {
                "text": "TrustedHTML"
              }
            },
            {
              "kind": "field",
              "name": "emptyScript",
              "type": {
                "text": "TrustedScript"
              }
            },
            {
              "kind": "method",
              "name": "getAttributeType",
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "attribute",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "elementNs",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "attrNs",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPropertyType",
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "property",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "elementNs",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "defaultPolicy",
              "type": {
                "text": "TrustedTypePolicy | null"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "TrustedTypePolicy",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "createHTML",
              "return": {
                "type": {
                  "text": "TrustedHTML"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Args<Options, 'createHTML'>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "createScript",
              "return": {
                "type": {
                  "text": "TrustedScript"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Args<Options, 'createScript'>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "createScriptURL",
              "return": {
                "type": {
                  "text": "TrustedScriptURL"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Args<Options, 'createScriptURL'>"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TrustedHTML",
          "declaration": {
            "name": "TrustedHTML",
            "module": "packages/atom-listbox/node_modules/@types/trusted-types/lib/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TrustedScript",
          "declaration": {
            "name": "TrustedScript",
            "module": "packages/atom-listbox/node_modules/@types/trusted-types/lib/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TrustedScriptURL",
          "declaration": {
            "name": "TrustedScriptURL",
            "module": "packages/atom-listbox/node_modules/@types/trusted-types/lib/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TrustedTypePolicyFactory",
          "declaration": {
            "name": "TrustedTypePolicyFactory",
            "module": "packages/atom-listbox/node_modules/@types/trusted-types/lib/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TrustedTypePolicy",
          "declaration": {
            "name": "TrustedTypePolicy",
            "module": "packages/atom-listbox/node_modules/@types/trusted-types/lib/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@webcomponents/scoped-custom-element-registry/src/scoped-custom-element-registry.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/custom-element.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/custom-element.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/event-options.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/event-options.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/property.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/property.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/query-all.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/query-all.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/query-assigned-nodes.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/query-assigned-nodes.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/query-async.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/query-async.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/query.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/query.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/state.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-element/development/decorators/state.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/async-append.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncAppendDirective",
          "members": [
            {
              "kind": "field",
              "name": "__childPart",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "commitValue",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directives/async-replace.js"
              }
            },
            {
              "kind": "method",
              "name": "disconnected",
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "__weakThis",
              "default": "new PseudoWeakRef(this)",
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directives/async-replace.js"
              }
            },
            {
              "kind": "field",
              "name": "__pauser",
              "default": "new Pauser()",
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directives/async-replace.js"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "parameters": [
                {
                  "name": "part"
                },
                {
                  "name": "parent"
                },
                {
                  "name": "attributeIndex"
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$disconnectableChildren",
              "default": "undefined",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "AsyncReplaceDirective",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/directives/async-replace.js"
          }
        },
        {
          "kind": "variable",
          "name": "asyncAppend",
          "type": {
            "text": "(value: AsyncIterable<unknown>, _mapper?: ((v: unknown, index?: number | undefined) => unknown) | undefined) => import(\"../directive.js\").DirectiveResult<typeof AsyncAppendDirective>"
          },
          "description": "A directive that renders the items of an async iterable[1], appending new\nvalues after previous values, similar to the built-in support for iterables.\nThis directive is usable only in child expressions.\n\nAsync iterables are objects with a [Symbol.asyncIterator] method, which\nreturns an iterator who's `next()` method returns a Promise. When a new\nvalue is available, the Promise resolves and the value is appended to the\nPart controlled by the directive. If another value other than this\ndirective has been set on the Part, the iterable will no longer be listened\nto and new values won't be written to the Part.\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of",
          "parameters": [
            {
              "description": "An async iterable",
              "name": "value"
            },
            {
              "description": "An optional function that maps from (value, index) to another\nvalue. Useful for generating templates for each item in the iterable.",
              "name": "mapper"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "asyncAppend",
          "declaration": {
            "name": "asyncAppend",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/async-append.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "AsyncAppendDirective",
          "declaration": {
            "name": "AsyncAppendDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/async-append.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/async-append.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "asyncAppend",
          "description": "A directive that renders the items of an async iterable[1], appending new\nvalues after previous values, similar to the built-in support for iterables.\nThis directive is usable only in child expressions.\n\nAsync iterables are objects with a [Symbol.asyncIterator] method, which\nreturns an iterator who's `next()` method returns a Promise. When a new\nvalue is available, the Promise resolves and the value is appended to the\nPart controlled by the directive. If another value other than this\ndirective has been set on the Part, the iterable will no longer be listened\nto and new values won't be written to the Part.\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of",
          "parameters": [
            {
              "description": "An async iterable",
              "name": "value"
            },
            {
              "description": "An optional function that maps from (value, index) to another\nvalue. Useful for generating templates for each item in the iterable.",
              "name": "mapper"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "asyncAppend",
          "declaration": {
            "name": "asyncAppend",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/async-append.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/async-replace.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncReplaceDirective",
          "members": [
            {
              "kind": "field",
              "name": "__value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__weakThis",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__pauser",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "commitValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "_index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "disconnected",
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "parameters": [
                {
                  "name": "part"
                },
                {
                  "name": "parent"
                },
                {
                  "name": "attributeIndex"
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$disconnectableChildren",
              "default": "undefined",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "AsyncDirective",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "asyncReplace",
          "type": {
            "text": "(value: AsyncIterable<unknown>, _mapper?: Mapper<unknown> | undefined) => import(\"../directive.js\").DirectiveResult<typeof AsyncReplaceDirective>"
          },
          "description": "A directive that renders the items of an async iterable[1], replacing\nprevious values with new values, so that only one value is ever rendered\nat a time. This directive may be used in any expression type.\n\nAsync iterables are objects with a `[Symbol.asyncIterator]` method, which\nreturns an iterator who's `next()` method returns a Promise. When a new\nvalue is available, the Promise resolves and the value is rendered to the\nPart controlled by the directive. If another value other than this\ndirective has been set on the Part, the iterable will no longer be listened\nto and new values won't be written to the Part.\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of",
          "parameters": [
            {
              "description": "An async iterable",
              "name": "value"
            },
            {
              "description": "An optional function that maps from (value, index) to another\nvalue. Useful for generating templates for each item in the iterable.",
              "name": "mapper"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AsyncReplaceDirective",
          "declaration": {
            "name": "AsyncReplaceDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/async-replace.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "asyncReplace",
          "declaration": {
            "name": "asyncReplace",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/async-replace.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/async-replace.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncReplaceDirective",
          "members": [
            {
              "kind": "method",
              "name": "commitValue",
              "parameters": [
                {
                  "name": "value"
                },
                {
                  "name": "_index"
                }
              ]
            },
            {
              "kind": "method",
              "name": "disconnected",
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "__weakThis",
              "default": "new PseudoWeakRef(this)"
            },
            {
              "kind": "field",
              "name": "__pauser",
              "default": "new Pauser()"
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "parameters": [
                {
                  "name": "part"
                },
                {
                  "name": "parent"
                },
                {
                  "name": "attributeIndex"
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$disconnectableChildren",
              "default": "undefined",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "AsyncDirective",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "asyncReplace",
          "description": "A directive that renders the items of an async iterable[1], replacing\nprevious values with new values, so that only one value is ever rendered\nat a time. This directive may be used in any expression type.\n\nAsync iterables are objects with a `[Symbol.asyncIterator]` method, which\nreturns an iterator who's `next()` method returns a Promise. When a new\nvalue is available, the Promise resolves and the value is rendered to the\nPart controlled by the directive. If another value other than this\ndirective has been set on the Part, the iterable will no longer be listened\nto and new values won't be written to the Part.\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of",
          "parameters": [
            {
              "description": "An async iterable",
              "name": "value"
            },
            {
              "description": "An optional function that maps from (value, index) to another\nvalue. Useful for generating templates for each item in the iterable.",
              "name": "mapper"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AsyncReplaceDirective",
          "declaration": {
            "name": "AsyncReplaceDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/async-replace.js"
          }
        },
        {
          "kind": "js",
          "name": "asyncReplace",
          "declaration": {
            "name": "asyncReplace",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/async-replace.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/cache.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CacheDirective",
          "members": [
            {
              "kind": "field",
              "name": "_templateCache",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "cache",
          "type": {
            "text": "(v: unknown) => import(\"../directive.js\").DirectiveResult<typeof CacheDirective>"
          },
          "description": "Enables fast switching between multiple templates by caching the DOM nodes\nand TemplateInstances produced by the templates.\n\nExample:\n\n```js\nlet checked = false;\n\nhtml`\n  ${cache(checked ? html`input is checked` : html`input is not checked`)}\n`\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cache",
          "declaration": {
            "name": "cache",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/cache.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "CacheDirective",
          "declaration": {
            "name": "CacheDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/cache.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/cache.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "cache",
          "description": "Enables fast switching between multiple templates by caching the DOM nodes\nand TemplateInstances produced by the templates.\n\nExample:\n\n```js\nlet checked = false;\n\nhtml`\n  ${cache(checked ? html`input is checked` : html`input is not checked`)}\n`\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cache",
          "declaration": {
            "name": "cache",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/cache.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/class-map.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ClassMapDirective",
          "members": [
            {
              "kind": "field",
              "name": "_previousClasses",
              "privacy": "private",
              "description": "Stores the ClassInfo object applied to a given AttributePart.\nUsed to unset existing values when a new ClassInfo object is applied."
            },
            {
              "kind": "field",
              "name": "_staticClasses",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "classMap",
          "type": {
            "text": "(classInfo: ClassInfo) => import(\"../directive.js\").DirectiveResult<typeof ClassMapDirective>"
          },
          "description": "A directive that applies dynamic CSS classes.\n\nThis must be used in the `class` attribute and must be the only part used in\nthe attribute. It takes each property in the `classInfo` argument and adds\nthe property name to the element's `classList` if the property value is\ntruthy; if the property value is falsey, the property name is removed from\nthe element's `class`.\n\nFor example `{foo: bar}` applies the class `foo` if the value of `bar` is\ntruthy.",
          "parameters": [
            {
              "name": "classInfo"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "classMap",
          "declaration": {
            "name": "classMap",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/class-map.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ClassMapDirective",
          "declaration": {
            "name": "ClassMapDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/class-map.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/class-map.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "classMap",
          "description": "A directive that applies dynamic CSS classes.\n\nThis must be used in the `class` attribute and must be the only part used in\nthe attribute. It takes each property in the `classInfo` argument and adds\nthe property name to the element's `classList` if the property value is\ntruthy; if the property value is falsey, the property name is removed from\nthe element's `class`.\n\nFor example `{foo: bar}` applies the class `foo` if the value of `bar` is\ntruthy.",
          "parameters": [
            {
              "name": "classInfo"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "classMap",
          "declaration": {
            "name": "classMap",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/class-map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/guard.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GuardDirective",
          "members": [
            {
              "kind": "field",
              "name": "_previousValue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "guard",
          "type": {
            "text": "(_value: unknown, f: () => unknown) => import(\"../directive.js\").DirectiveResult<typeof GuardDirective>"
          },
          "description": "Prevents re-render of a template function until a single value or an array of\nvalues changes.\n\nValues are checked against previous values with strict equality (`===`), and\nso the check won't detect nested property changes inside objects or arrays.\nArrays values have each item checked against the previous value at the same\nindex with strict equality. Nested arrays are also checked only by strict\nequality.\n\nExample:\n\n```js\nhtml`\n  <div>\n    ${guard([user.id, company.id], () => html`...`)}\n  </div>\n`\n```\n\nIn this case, the template only rerenders if either `user.id` or `company.id`\nchanges.\n\nguard() is useful with immutable data patterns, by preventing expensive work\nuntil data updates.\n\nExample:\n\n```js\nhtml`\n  <div>\n    ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n  </div>\n`\n```\n\nIn this case, items are mapped over only when the array reference changes.",
          "parameters": [
            {
              "description": "the value to check before re-rendering",
              "name": "value"
            },
            {
              "description": "the template function",
              "name": "f"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "guard",
          "declaration": {
            "name": "guard",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/guard.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "GuardDirective",
          "declaration": {
            "name": "GuardDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/guard.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/guard.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "guard",
          "description": "Prevents re-render of a template function until a single value or an array of\nvalues changes.\n\nValues are checked against previous values with strict equality (`===`), and\nso the check won't detect nested property changes inside objects or arrays.\nArrays values have each item checked against the previous value at the same\nindex with strict equality. Nested arrays are also checked only by strict\nequality.\n\nExample:\n\n```js\nhtml`\n  <div>\n    ${guard([user.id, company.id], () => html`...`)}\n  </div>\n`\n```\n\nIn this case, the template only rerenders if either `user.id` or `company.id`\nchanges.\n\nguard() is useful with immutable data patterns, by preventing expensive work\nuntil data updates.\n\nExample:\n\n```js\nhtml`\n  <div>\n    ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n  </div>\n`\n```\n\nIn this case, items are mapped over only when the array reference changes.",
          "parameters": [
            {
              "description": "the value to check before re-rendering",
              "name": "value"
            },
            {
              "description": "the template function",
              "name": "f"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "guard",
          "declaration": {
            "name": "guard",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/guard.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/if-defined.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ifDefined",
          "type": {
            "text": "<T>(value: T) => typeof nothing | NonNullable<T>"
          },
          "description": "For AttributeParts, sets the attribute if the value is defined and removes\nthe attribute if the value is undefined.\n\nFor other part types, this directive is a no-op."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ifDefined",
          "declaration": {
            "name": "ifDefined",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/if-defined.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/if-defined.js",
      "declarations": [
        {
          "kind": "function",
          "name": "ifDefined",
          "parameters": [
            {
              "name": "value"
            }
          ],
          "description": "For AttributeParts, sets the attribute if the value is defined and removes\nthe attribute if the value is undefined.\n\nFor other part types, this directive is a no-op."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ifDefined",
          "declaration": {
            "name": "ifDefined",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/if-defined.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/live.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LiveDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "live",
          "type": {
            "text": "(value: unknown) => import(\"../directive.js\").DirectiveResult<typeof LiveDirective>"
          },
          "description": "Checks binding values against live DOM values, instead of previously bound\nvalues, when determining whether to update the value.\n\nThis is useful for cases where the DOM value may change from outside of\nlit-html, such as with a binding to an `<input>` element's `value` property,\na content editable elements text, or to a custom element that changes it's\nown properties or attributes.\n\nIn these cases if the DOM value changes, but the value set through lit-html\nbindings hasn't, lit-html won't know to update the DOM value and will leave\nit alone. If this is not what you want--if you want to overwrite the DOM\nvalue with the bound value no matter what--use the `live()` directive:\n\n```js\nhtml`<input .value=${live(x)}>`\n```\n\n`live()` performs a strict equality check agains the live DOM value, and if\nthe new value is equal to the live value, does nothing. This means that\n`live()` should not be used when the binding will cause a type conversion. If\nyou use `live()` with an attribute binding, make sure that only strings are\npassed in, or the binding will update every render."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "live",
          "declaration": {
            "name": "live",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/live.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "LiveDirective",
          "declaration": {
            "name": "LiveDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/live.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/live.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "live",
          "description": "Checks binding values against live DOM values, instead of previously bound\nvalues, when determining whether to update the value.\n\nThis is useful for cases where the DOM value may change from outside of\nlit-html, such as with a binding to an `<input>` element's `value` property,\na content editable elements text, or to a custom element that changes it's\nown properties or attributes.\n\nIn these cases if the DOM value changes, but the value set through lit-html\nbindings hasn't, lit-html won't know to update the DOM value and will leave\nit alone. If this is not what you want--if you want to overwrite the DOM\nvalue with the bound value no matter what--use the `live()` directive:\n\n```js\nhtml`<input .value=${live(x)}>`\n```\n\n`live()` performs a strict equality check agains the live DOM value, and if\nthe new value is equal to the live value, does nothing. This means that\n`live()` should not be used when the binding will cause a type conversion. If\nyou use `live()` with an attribute binding, make sure that only strings are\npassed in, or the binding will update every render."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "live",
          "declaration": {
            "name": "live",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/live.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/private-async-helpers.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "forAwaitOf",
          "type": {
            "text": "<T>(iterable: AsyncIterable<T>, callback: (value: T) => Promise<boolean>) => Promise<void>"
          },
          "description": "Helper to iterate an AsyncIterable in its own closure.",
          "parameters": [
            {
              "description": "The iterable to iterate",
              "name": "iterable"
            },
            {
              "description": "The callback to call for each value. If the callback returns\n`false`, the loop will be broken.",
              "name": "callback"
            }
          ]
        },
        {
          "kind": "class",
          "description": "Holds a reference to an instance that can be disconnected and reconnected,\nso that a closure over the ref (e.g. in a then function to a promise) does\nnot strongly hold a ref to the instance. Approximates a WeakRef but must\nbe manually connected & disconnected to the backing instance.",
          "name": "PseudoWeakRef",
          "members": [
            {
              "kind": "field",
              "name": "_ref",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "disconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Disassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "reconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ref",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "description": "Reassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "deref",
              "return": {
                "type": {
                  "text": "T | undefined"
                }
              },
              "description": "Retrieves the backing instance (will be undefined when disconnected)"
            }
          ]
        },
        {
          "kind": "class",
          "description": "A helper to pause and resume waiting on a condition in an async function",
          "name": "Pauser",
          "members": [
            {
              "kind": "field",
              "name": "_promise",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resolve",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "get",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "When paused, returns a promise to be awaited; when unpaused, returns\nundefined. Note that in the microtask between the pauser being resumed\nan an await of this promise resolving, the pauser could be paused again,\nhence callers should check the promise in a loop when awaiting."
            },
            {
              "kind": "method",
              "name": "pause",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Creates a promise to be awaited"
            },
            {
              "kind": "method",
              "name": "resume",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resolves the promise which may be awaited"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forAwaitOf",
          "declaration": {
            "name": "forAwaitOf",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/private-async-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "PseudoWeakRef",
          "declaration": {
            "name": "PseudoWeakRef",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/private-async-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Pauser",
          "declaration": {
            "name": "Pauser",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/private-async-helpers.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/private-async-helpers.js",
      "declarations": [
        {
          "kind": "function",
          "name": "forAwaitOf",
          "parameters": [
            {
              "name": "iterable",
              "description": "The iterable to iterate"
            },
            {
              "name": "callback",
              "description": "The callback to call for each value. If the callback returns\n`false`, the loop will be broken."
            }
          ],
          "description": "Helper to iterate an AsyncIterable in its own closure."
        },
        {
          "kind": "class",
          "description": "Holds a reference to an instance that can be disconnected and reconnected,\nso that a closure over the ref (e.g. in a then function to a promise) does\nnot strongly hold a ref to the instance. Approximates a WeakRef but must\nbe manually connected & disconnected to the backing instance.",
          "name": "PseudoWeakRef",
          "members": [
            {
              "kind": "method",
              "name": "disconnect",
              "description": "Disassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "reconnect",
              "parameters": [
                {
                  "name": "ref"
                }
              ],
              "description": "Reassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "deref",
              "description": "Retrieves the backing instance (will be undefined when disconnected)"
            },
            {
              "kind": "field",
              "name": "_ref",
              "default": "ref"
            }
          ]
        },
        {
          "kind": "class",
          "description": "A helper to pause and resume waiting on a condition in an async function",
          "name": "Pauser",
          "members": [
            {
              "kind": "method",
              "name": "get",
              "description": "When paused, returns a promise to be awaited; when unpaused, returns\nundefined. Note that in the microtask between the pauser being resumed\nan an await of this promise resolving, the pauser could be paused again,\nhence callers should check the promise in a loop when awaiting.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "pause",
              "description": "Creates a promise to be awaited"
            },
            {
              "kind": "method",
              "name": "resume",
              "description": "Resolves the promise which may be awaited"
            },
            {
              "kind": "field",
              "name": "_promise",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_resolve",
              "default": "undefined"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forAwaitOf",
          "declaration": {
            "name": "forAwaitOf",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/private-async-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "PseudoWeakRef",
          "declaration": {
            "name": "PseudoWeakRef",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/private-async-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "Pauser",
          "declaration": {
            "name": "Pauser",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/private-async-helpers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/ref.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "createRef",
          "type": {
            "text": "<T = Element>() => Ref<T>"
          },
          "description": "Creates a new Ref object, which is container for a reference to an element."
        },
        {
          "kind": "class",
          "description": "An object that holds a ref value.",
          "name": "Ref",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "description": "The current Element value of the ref, or else `undefined` if the ref is no\nlonger rendered."
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "RefDirective",
          "members": [
            {
              "kind": "field",
              "name": "_element",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_ref",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_context",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_updateRefValue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_lastElementForRef",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "disconnected",
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "parameters": [
                {
                  "name": "part"
                },
                {
                  "name": "parent"
                },
                {
                  "name": "attributeIndex"
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$disconnectableChildren",
              "default": "undefined",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "AsyncDirective",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "ref",
          "type": {
            "text": "(_ref: RefOrCallback) => import(\"../directive.js\").DirectiveResult<typeof RefDirective>"
          },
          "description": "Sets the value of a Ref object or calls a ref callback with the element it's\nbound to.\n\nA Ref object acts as a container for a reference to an element. A ref\ncallback is a function that takes an element as its only argument.\n\nThe ref directive sets the value of the Ref object or calls the ref callback\nduring rendering, if the referenced element changed.\n\nNote: If a ref callback is rendered to a different element position or is\nremoved in a subsequent render, it will first be called with `undefined`,\nfollowed by another call with the new element it was rendered to (if any).\n\n```js\n// Using Ref object\nconst inputRef = createRef();\nrender(html`<input ${ref(inputRef)}>`, container);\ninputRef.value.focus();\n\n// Using callback\nconst callback = (inputElement) => inputElement.focus();\nrender(html`<input ${ref(callback)}>`, container);\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createRef",
          "declaration": {
            "name": "createRef",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/ref.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Ref",
          "declaration": {
            "name": "Ref",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/ref.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ref",
          "declaration": {
            "name": "ref",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/ref.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "RefDirective",
          "declaration": {
            "name": "RefDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/ref.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/ref.js",
      "declarations": [
        {
          "kind": "function",
          "name": "createRef",
          "description": "Creates a new Ref object, which is container for a reference to an element."
        },
        {
          "kind": "variable",
          "name": "ref",
          "description": "Sets the value of a Ref object or calls a ref callback with the element it's\nbound to.\n\nA Ref object acts as a container for a reference to an element. A ref\ncallback is a function that takes an element as its only argument.\n\nThe ref directive sets the value of the Ref object or calls the ref callback\nduring rendering, if the referenced element changed.\n\nNote: If a ref callback is rendered to a different element position or is\nremoved in a subsequent render, it will first be called with `undefined`,\nfollowed by another call with the new element it was rendered to (if any).\n\n```js\n// Using Ref object\nconst inputRef = createRef();\nrender(html`<input ${ref(inputRef)}>`, container);\ninputRef.value.focus();\n\n// Using callback\nconst callback = (inputElement) => inputElement.focus();\nrender(html`<input ${ref(callback)}>`, container);\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createRef",
          "declaration": {
            "name": "createRef",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/ref.js"
          }
        },
        {
          "kind": "js",
          "name": "ref",
          "declaration": {
            "name": "ref",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/ref.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/repeat.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RepeatDirective",
          "members": [
            {
              "kind": "field",
              "name": "_itemKeys",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getValuesAndKeys",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "repeat",
          "type": {
            "text": "RepeatDirectiveFn"
          },
          "description": "A directive that repeats a series of values (usually `TemplateResults`)\ngenerated from an iterable, and updates those items efficiently when the\niterable changes based on user-provided `keys` associated with each item.\n\nNote that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\nmeaning previous DOM for a given key is moved into the new position if\nneeded, and DOM will never be reused with values for different keys (new DOM\nwill always be created for new keys). This is generally the most efficient\nway to use `repeat` since it performs minimum unnecessary work for insertions\nand removals.\n\nThe `keyFn` takes two parameters, the item and its index, and returns a unique key value.\n\n```js\nhtml`\n  <ol>\n    ${repeat(this.items, (item) => item.id, (item, index) => {\n      return html`<li>${index}: ${item.name}</li>`;\n    })}\n  </ol>\n`\n```\n\n**Important**: If providing a `keyFn`, keys *must* be unique for all items in a\ngiven call to `repeat`. The behavior when two or more items have the same key\nis undefined.\n\nIf no `keyFn` is provided, this directive will perform similar to mapping\nitems to values, and DOM will be reused against potentially different items."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "repeat",
          "declaration": {
            "name": "repeat",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/repeat.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "RepeatDirective",
          "declaration": {
            "name": "RepeatDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/repeat.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/repeat.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "repeat",
          "description": "A directive that repeats a series of values (usually `TemplateResults`)\ngenerated from an iterable, and updates those items efficiently when the\niterable changes based on user-provided `keys` associated with each item.\n\nNote that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\nmeaning previous DOM for a given key is moved into the new position if\nneeded, and DOM will never be reused with values for different keys (new DOM\nwill always be created for new keys). This is generally the most efficient\nway to use `repeat` since it performs minimum unnecessary work for insertions\nand removals.\n\nThe `keyFn` takes two parameters, the item and its index, and returns a unique key value.\n\n```js\nhtml`\n  <ol>\n    ${repeat(this.items, (item) => item.id, (item, index) => {\n      return html`<li>${index}: ${item.name}</li>`;\n    })}\n  </ol>\n`\n```\n\n**Important**: If providing a `keyFn`, keys *must* be unique for all items in a\ngiven call to `repeat`. The behavior when two or more items have the same key\nis undefined.\n\nIf no `keyFn` is provided, this directive will perform similar to mapping\nitems to values, and DOM will be reused against potentially different items."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "repeat",
          "declaration": {
            "name": "repeat",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/repeat.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/style-map.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StyleMapDirective",
          "members": [
            {
              "kind": "field",
              "name": "_previousStyleProperties",
              "type": {
                "text": "Set<string> | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "styleMap",
          "type": {
            "text": "(styleInfo: StyleInfo) => import(\"../directive.js\").DirectiveResult<typeof StyleMapDirective>"
          },
          "description": "A directive that applies CSS properties to an element.\n\n`styleMap` can only be used in the `style` attribute and must be the only\nexpression in the attribute. It takes the property names in the `styleInfo`\nobject and adds the property values as CSS properties. Property names with\ndashes (`-`) are assumed to be valid CSS property names and set on the\nelement's style object using `setProperty()`. Names without dashes are\nassumed to be camelCased JavaScript property names and set on the element's\nstyle object using property assignment, allowing the style object to\ntranslate JavaScript-style names to CSS property names.\n\nFor example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n'0'})` sets the `background-color`, `border-top` and `--size` properties.",
          "parameters": [
            {
              "name": "styleInfo"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "styleMap",
          "declaration": {
            "name": "styleMap",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/style-map.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "StyleMapDirective",
          "declaration": {
            "name": "StyleMapDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/style-map.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/style-map.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "styleMap",
          "description": "A directive that applies CSS properties to an element.\n\n`styleMap` can only be used in the `style` attribute and must be the only\nexpression in the attribute. It takes the property names in the `styleInfo`\nobject and adds the property values as CSS properties. Property names with\ndashes (`-`) are assumed to be valid CSS property names and set on the\nelement's style object using `setProperty()`. Names without dashes are\nassumed to be camelCased JavaScript property names and set on the element's\nstyle object using property assignment, allowing the style object to\ntranslate JavaScript-style names to CSS property names.\n\nFor example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n'0'})` sets the `background-color`, `border-top` and `--size` properties.",
          "parameters": [
            {
              "name": "styleInfo"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "styleMap",
          "declaration": {
            "name": "styleMap",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/style-map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/template-content.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TemplateContentDirective",
          "members": [
            {
              "kind": "field",
              "name": "_previousTemplate",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "templateContent",
          "type": {
            "text": "(template: HTMLTemplateElement) => import(\"../directive.js\").DirectiveResult<typeof TemplateContentDirective>"
          },
          "description": "Renders the content of a template element as HTML.\n\nNote, the template should be developer controlled and not user controlled.\nRendering a user-controlled template with this directive\ncould lead to cross-site-scripting vulnerabilities."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "templateContent",
          "declaration": {
            "name": "templateContent",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/template-content.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TemplateContentDirective",
          "declaration": {
            "name": "TemplateContentDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/template-content.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/template-content.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "templateContent",
          "description": "Renders the content of a template element as HTML.\n\nNote, the template should be developer controlled and not user controlled.\nRendering a user-controlled template with this directive\ncould lead to cross-site-scripting vulnerabilities."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "templateContent",
          "declaration": {
            "name": "templateContent",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/template-content.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/unsafe-html.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UnsafeHTMLDirective",
          "members": [
            {
              "kind": "field",
              "name": "directiveName",
              "type": {
                "text": "string"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "resultType",
              "type": {
                "text": "number"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "_value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_templateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "unsafeHTML",
          "type": {
            "text": "(value: string | typeof noChange | typeof nothing | null | undefined) => import(\"../directive.js\").DirectiveResult<typeof UnsafeHTMLDirective>"
          },
          "description": "Renders the result as HTML, rather than text.\n\nThe values `undefined`, `null`, and `nothing`, will all result in no content\n(empty string) being rendered.\n\nNote, this is unsafe to use with any user-provided input that hasn't been\nsanitized or escaped, as it may lead to cross-site-scripting\nvulnerabilities."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UnsafeHTMLDirective",
          "declaration": {
            "name": "UnsafeHTMLDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/unsafe-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "unsafeHTML",
          "declaration": {
            "name": "unsafeHTML",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/unsafe-html.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/unsafe-html.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UnsafeHTMLDirective",
          "members": [
            {
              "kind": "field",
              "name": "_value",
              "default": "nothing"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "unsafeHTML",
          "description": "Renders the result as HTML, rather than text.\n\nThe values `undefined`, `null`, and `nothing`, will all result in no content\n(empty string) being rendered.\n\nNote, this is unsafe to use with any user-provided input that hasn't been\nsanitized or escaped, as it may lead to cross-site-scripting\nvulnerabilities."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UnsafeHTMLDirective",
          "declaration": {
            "name": "UnsafeHTMLDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/unsafe-html.js"
          }
        },
        {
          "kind": "js",
          "name": "unsafeHTML",
          "declaration": {
            "name": "unsafeHTML",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/unsafe-html.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/unsafe-svg.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UnsafeSVGDirective",
          "members": [
            {
              "kind": "field",
              "name": "directiveName",
              "type": {
                "text": "string"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "resultType",
              "type": {
                "text": "number"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "_value",
              "default": "nothing",
              "inheritedFrom": {
                "name": "UnsafeHTMLDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directives/unsafe-html.js"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "UnsafeHTMLDirective",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/directives/unsafe-html.js"
          }
        },
        {
          "kind": "variable",
          "name": "unsafeSVG",
          "type": {
            "text": "(value: string | typeof import(\"../lit-html.js\").noChange | typeof import(\"../lit-html.js\").nothing | null | undefined) => import(\"../directive.js\").DirectiveResult<typeof UnsafeSVGDirective>"
          },
          "description": "Renders the result as SVG, rather than text.\n\nThe values `undefined`, `null`, and `nothing`, will all result in no content\n(empty string) being rendered.\n\nNote, this is unsafe to use with any user-provided input that hasn't been\nsanitized or escaped, as it may lead to cross-site-scripting\nvulnerabilities."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "unsafeSVG",
          "declaration": {
            "name": "unsafeSVG",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/unsafe-svg.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "UnsafeSVGDirective",
          "declaration": {
            "name": "UnsafeSVGDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/unsafe-svg.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/unsafe-svg.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "unsafeSVG",
          "description": "Renders the result as SVG, rather than text.\n\nThe values `undefined`, `null`, and `nothing`, will all result in no content\n(empty string) being rendered.\n\nNote, this is unsafe to use with any user-provided input that hasn't been\nsanitized or escaped, as it may lead to cross-site-scripting\nvulnerabilities."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "unsafeSVG",
          "declaration": {
            "name": "unsafeSVG",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/unsafe-svg.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/until.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UntilDirective",
          "members": [
            {
              "kind": "field",
              "name": "__lastRenderedIndex",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__values",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__weakThis",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__pauser",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "disconnected",
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "parameters": [
                {
                  "name": "part"
                },
                {
                  "name": "parent"
                },
                {
                  "name": "attributeIndex"
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$disconnectableChildren",
              "default": "undefined",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "AsyncDirective",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "until",
          "type": {
            "text": "(...values: unknown[]) => import(\"../directive.js\").DirectiveResult<typeof UntilDirective>"
          },
          "description": "Renders one of a series of values, including Promises, to a Part.\n\nValues are rendered in priority order, with the first argument having the\nhighest priority and the last argument having the lowest priority. If a\nvalue is a Promise, low-priority values will be rendered until it resolves.\n\nThe priority of values can be used to create placeholder content for async\ndata. For example, a Promise with pending content can be the first,\nhighest-priority, argument, and a non_promise loading indicator template can\nbe used as the second, lower-priority, argument. The loading indicator will\nrender immediately, and the primary content will render when the Promise\nresolves.\n\nExample:\n\n```js\nconst content = fetch('./content.txt').then(r => r.text());\nhtml`${until(content, html`<span>Loading...</span>`)}`\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UntilDirective",
          "declaration": {
            "name": "UntilDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/until.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "until",
          "declaration": {
            "name": "until",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/until.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/lit-html/development/directives/until.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UntilDirective",
          "members": [
            {
              "kind": "method",
              "name": "disconnected",
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "__lastRenderedIndex",
              "default": "0x3fffffff",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "__values",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "__weakThis",
              "default": "new PseudoWeakRef(this)"
            },
            {
              "kind": "field",
              "name": "__pauser",
              "default": "new Pauser()"
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "parameters": [
                {
                  "name": "part"
                },
                {
                  "name": "parent"
                },
                {
                  "name": "attributeIndex"
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$disconnectableChildren",
              "default": "undefined",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "inheritedFrom": {
                "name": "Directive",
                "module": "packages/atom-listbox/node_modules/lit-html/development/directive.js"
              }
            }
          ],
          "superclass": {
            "name": "AsyncDirective",
            "module": "/packages/atom-listbox/node_modules/lit-html/development/async-directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "until",
          "description": "Renders one of a series of values, including Promises, to a Part.\n\nValues are rendered in priority order, with the first argument having the\nhighest priority and the last argument having the lowest priority. If a\nvalue is a Promise, low-priority values will be rendered until it resolves.\n\nThe priority of values can be used to create placeholder content for async\ndata. For example, a Promise with pending content can be the first,\nhighest-priority, argument, and a non_promise loading indicator template can\nbe used as the second, lower-priority, argument. The loading indicator will\nrender immediately, and the primary content will render when the Promise\nresolves.\n\nExample:\n\n```js\nconst content = fetch('./content.txt').then(r => r.text());\nhtml`${until(content, html`<span>Loading...</span>`)}`\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UntilDirective",
          "declaration": {
            "name": "UntilDirective",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/until.js"
          }
        },
        {
          "kind": "js",
          "name": "until",
          "declaration": {
            "name": "until",
            "module": "packages/atom-listbox/node_modules/lit-html/development/directives/until.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ChoiceGroupMixin",
          "type": {
            "text": "typeof import(\"../../types/choice-group/ChoiceGroupMixinTypes.js\").ChoiceGroupImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ChoiceGroupMixin",
          "declaration": {
            "name": "ChoiceGroupMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "ChoiceGroupMixin applies on both Fields (listbox/select-rich/combobox)  and FormGroups\n(radio-group, checkbox-group)\nTODO: Ideally, the ChoiceGroupMixin should not depend on InteractionStateMixin, which is only\ndesigned for usage with Fields, in other words: their interaction states are not derived from\nchildren events, like in FormGroups",
          "name": "ChoiceGroupMixin",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "modelValue"
            },
            {
              "kind": "field",
              "name": "serializedValue"
            },
            {
              "kind": "field",
              "name": "formattedValue"
            },
            {
              "kind": "method",
              "name": "_completeRegistration",
              "description": "Resolves the registrationComplete promise. Subclassers can delay if needed",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addFormElement",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControl"
                  }
                },
                {
                  "name": "indexToInsertAt",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "clear"
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElementsFilter",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "FormControl"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "A filter function which will exclude a form field when returning false\nBy default, exclude form fields which are disabled\n\nThe type is be passed as well for more fine grained control, e.g.\ndistinguish the filter when fetching modelValue versus serializedValue",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElements",
              "parameters": [
                {
                  "name": "property",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "filterFn",
                  "optional": true,
                  "type": {
                    "text": "(el: FormControl, property?: string) => boolean"
                  }
                }
              ],
              "description": "Implicit :( @override for FormGroupMixin, as choice fields \"fieldsets\"\nwill always implement both mixins\n\nTODO: Consider making this explicit by extracting this method to its own mixin and\nusing it in both FormGroupMixin and ChoiceGroupMixin, then override it here\nThis also makes it more DRY as we have same method with similar implementation\nin FormGroupMixin. I (@jorenbroekema) think the abstraction is worth it here..",
              "return": {
                "type": {
                  "text": "{[name:string]: any}"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_throwWhenInvalidChildModelValue",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControl"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "parameters": [
                {
                  "name": "modelValue",
                  "default": "(this).modelValue",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Used for Required validation and computation of interaction states",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_checkSingleChoiceElements",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent & {target:FormControl}"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_getCheckedElements",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_setCheckedElements",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | any[]"
                  }
                },
                {
                  "name": "check",
                  "type": {
                    "text": "Function"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "__setChoiceGroupTouched",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to add logic before repropagation",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_repropagationCondition",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "FormControlHost & ChoiceInputHost"
                  }
                }
              ],
              "description": "Based on provided target, this condition determines whether received model-value-changed\nevent should be repropagated",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "multipleChoice",
              "type": {
                "text": "boolean"
              },
              "description": "When false (default), modelValue and serializedValue will reflect the\ncurrently selected choice (usually a string). When true, modelValue will and\nserializedValue will be an array of strings.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_repropagationRole",
              "type": {
                "text": "'child'|'choice-group'|'fieldset'"
              },
              "description": "Based on the role, details of handling model-value-changed repropagation differ.",
              "default": "'choice-group'",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "__isInitialModelValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "__isInitialSerializedValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "__isInitialFormattedValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "method",
              "name": "isRegisteredFormElement",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "ElementWithParentFormGroup"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFormElement",
              "parameters": [
                {
                  "name": "child",
                  "description": "the child element (field)",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToAddFormElement",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to perform logic before an element is added",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToChangeFormElementName",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToRemoveFormElement",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formElements",
              "description": "Closely mimics the natively supported HTMLFormControlsCollection. It can be accessed\nboth like an array and an object (based on control/element names).",
              "type": {
                "text": "FormControlsCollection"
              },
              "default": "new FormControlsCollection()",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isFormOrFieldset",
              "type": {
                "text": "boolean"
              },
              "description": "Flag that determines how \".formElements\" should behave.\nFor a regular fieldset (see LionFieldset) we expect \".formElements\"\nto be accessible as an object.\nIn case of a radio-group, a checkbox-group or a select/listbox,\nit should act like an array (see ChoiceGroupMixin).\nUsually, when false, we deal with a choice-group (radio-group, checkbox-group,\n(multi)select)",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "initComplete",
              "description": "initComplete resolves after all pending initialization logic\n(for instance `<form-group .serializedValue=${{ child1: 'a', child2: 'b' }}>`)\nis executed",
              "type": {
                "text": "Promise<any>"
              },
              "default": "new Promise((resolve, reject) => {\n        this.__resolveInitComplete = resolve;\n        this.__rejectInitComplete = reject;\n      })",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registrationComplete",
              "description": "registrationComplete waits for all children formElements to have registered",
              "type": {
                "text": "Promise<any> & {done?:boolean}"
              },
              "default": "new Promise((resolve, reject) => {\n        this.__resolveRegistrationComplete = resolve;\n        this.__rejectRegistrationComplete = reject;\n      })",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "done",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldVal",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "initInteractionState",
              "description": "Evaluations performed on connectedCallback.\nThis method is public, so it can be called at a later moment (when we need to wait for\nregistering children for instance) as well.\nSince this method will be called twice in last mentioned scenario, it must stay idempotent.",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_iStateOnLeave",
              "description": "Sets touched value to true and reevaluates prefilled state.\nWhen false, on next interaction, user will start with a clean state.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_iStateOnValueChange",
              "description": "Sets dirty value and validates when already touched or invalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "resetInteractionState",
              "description": "Resets touched and dirty, and recomputes prefilled",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onTouchedChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onDirtyChanged",
              "description": "Dispatches event on touched state change",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_showFeedbackConditionFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "type": {
                    "text": "InteractionStates"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackConditionMeta",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "touched",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has focused and left(blurred) the field.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "dirty",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has changed the value of the field.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "prefilled",
              "type": {
                "text": "boolean"
              },
              "description": "True when user has left non-empty field or input is prefilled.\nThe name must be seen from the point of view of the input field:\nonce the user enters the input field, the value is non-empty.",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "description": "True when the modelValue is non-empty (see _isEmpty in FormControlMixin)",
              "default": "false",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_leaveEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the touched state",
              "privacy": "protected",
              "default": "'blur'",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_valueChangedEvent",
              "type": {
                "text": "string"
              },
              "description": "The event that triggers the dirty state",
              "privacy": "protected",
              "default": "'model-value-changed'",
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The label text for the input node.\nWhen no value is defined, textContent of [slot=label] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "description": "The helpt text for the input node.\nWhen no value is defined, textContent of [slot=help-text] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "fieldName",
              "description": "Will be used in validation messages to refer to the current field",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "slots",
              "return": {
                "type": {
                  "text": "SlotsMap"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "description": "The interactive (form) element. Can be a native element like input/textarea/select or\nan element with tabindex > -1",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_labelNode",
              "description": "Element where label will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_helpTextNode",
              "description": "Element where help text will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackNode",
              "description": "Element where validation feedback will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11y",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11yForAdditionalSlots",
              "parameters": [
                {
                  "name": "additionalSlots",
                  "default": "['prefix', 'suffix', 'before', 'after']",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Enhances additional slots(prefix, suffix, before, after) defined by developer.\n\nWhen boolean attribute data-label or data-description is found,\nthe slot element will be connected to the input via aria-labelledby or aria-describedby",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__reflectAriaAttr",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "reorder",
                  "type": {
                    "text": "boolean|undefined"
                  }
                }
              ],
              "description": "Will handle help text, validation feedback and character counter,\nprefix/suffix/before/after (if they contain data-description flag attr).\nAlso, contents of id references that will be put in the <lion-field>._ariaDescribedby property\nfrom an external context, will be read by a screen reader.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Default Render Result:\n<div class=\"form-field__group-one\">\n  <div class=\"form-field__label\">\n    <slot name=\"label\"></slot>\n  </div>\n  <small class=\"form-field__help-text\">\n    <slot name=\"help-text\"></slot>\n  </small>\n</div>\n<div class=\"form-field__group-two\">\n  <div class=\"input-group\">\n    <div class=\"input-group__before\">\n      <slot name=\"before\"></slot>\n    </div>\n    <div class=\"input-group__container\">\n      <div class=\"input-group__prefix\">\n        <slot name=\"prefix\"></slot>\n      </div>\n      <div class=\"input-group__input\">\n        <slot name=\"input\"></slot>\n      </div>\n      <div class=\"input-group__suffix\">\n        <slot name=\"suffix\"></slot>\n      </div>\n    </div>\n    <div class=\"input-group__after\">\n      <slot name=\"after\"></slot>\n    </div>\n  </div>\n  <div class=\"form-field__feedback\">\n    <slot name=\"feedback\"></slot>\n  </div>\n</div>",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupOneTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupTwoTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_helpTextTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupBeforeTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupPrefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupSuffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupAfterTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_feedbackTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "{block} .input-group\n\nStructure:\n- {element} .input-group__before (optional) : a prefix that resides outside the container\n- {element} .input-group__container : an inner container: this element contains all styling\n - {element} .input-group__prefix (optional) : a prefix that resides in the container,\n              allowing it to be detectable as a :first-child\n - {element} .input-group__input : a wrapper around the form-control component\n  - {block} .form-control : the actual input element (input/select/textarea)\n - {element} .input-group__suffix (optional) : a suffix that resides inside the container,\n              allowing it to be detectable as a :last-child\n - {element} .input-group__bottom (optional) : placeholder element for additional styling\n              (like an animated line for material design input)\n- {element} .input-group__after (optional) :  a suffix that resides outside the container",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getAriaDescriptionElements",
              "description": "This function exposes descripion elements that a FormGroup should expose to its\nchildren. See FormGroupMixin.__getAllDescriptionElementsInParentChain()",
              "return": {
                "type": {
                  "text": "Array.<HTMLElement>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add element references to aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getDirectSlotChild",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchInitialModelValueChangedEvent",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__repropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onLabelClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the element will be registered with to the .formElements collection\nof the parent. Also, it serves as the key of key/value pairs in\n modelValue/serializedValue objects",
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "A Boolean attribute which, if present, indicates that the user should not be able to edit\nthe value of the input. The difference between disabled and readonly is that read-only\ncontrols can still function, whereas disabled controls generally do not function as\ncontrols until they are enabled.\n(From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputId",
              "description": "Unique id that can be used in all light dom",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaLabelledNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-labelledby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaDescribedNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-describedby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isRepropagationEndpoint",
              "type": {
                "text": "boolean"
              },
              "description": "By default, a field with _repropagationRole 'choice-group' will act as an\n'endpoint'. This means it will be considered as an individual field: for\na select, individual options will not be part of the formPath. They\nwill.\nSimilarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n(from Application Developer perspective) need to be more like fields\n(think of an amount-input with a currency select box next to it), can set this\nto true to hide private internals in the formPath.",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__renderAsNodes",
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "parameters": [
                {
                  "name": "slotName",
                  "description": "Name of the slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__privateSlots",
              "privacy": "private",
              "default": "new Set(null)",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormRegistrarMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
            },
            {
              "name": "InteractionStateMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
            },
            {
              "name": "dedupeMixin",
              "package": "@lion/core"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "ChoiceGroupMixin"
          },
          "events": [
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "touched-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "name": "dirty-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "InteractionStateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/InteractionStateMixin.js"
              }
            },
            {
              "name": "form-element-name-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ChoiceGroupMixin",
          "declaration": {
            "name": "ChoiceGroupMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceGroupMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ChoiceInputMixin",
          "type": {
            "text": "typeof import(\"../../types/choice-group/ChoiceInputMixinTypes.js\").ChoiceInputImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ChoiceInputMixin",
          "declaration": {
            "name": "ChoiceInputMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "ChoiceInputMixin",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "choiceValue",
              "description": "The value that will be registered to the modelValue of the parent ChoiceGroup. Recommended\nto be a string",
              "type": {
                "text": "string|any"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "description": "Empty pending queue in order to guarantee order independence",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "Styles for [input=radio] and [input=checkbox] wrappers.\nFor [role=option] extensions, please override completely",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Template for [input=radio] and [input=checkbox] wrappers.\nFor [role=option] extensions, please override completely",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_choiceGraphicTemplate",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_afterTemplate",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_preventDuplicateLabelClick",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "The native platform fires an event for both the click on the label, and also\nthe redispatched click on the native input element.\nThis results in two click events arriving at the host, but we only want one.\nThis method prevents the duplicate click and ensures the correct isTrusted event\nwith the correct event.target arrives at the host.",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_toggleChecked",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_syncNameToParentFormGroup",
              "description": "Override this in case of extending ChoiceInputMixin and requiring\nto sync differently with parent form group name\nRight now it checks tag name match where the parent form group tagname\nshould include the child field tagname ('checkbox' is included in 'checkbox-group')",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "__syncModelCheckedToChecked",
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__syncCheckedToModel",
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__syncCheckedToInputElement",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_proxyInputEvent",
              "description": "This can be called whenever the view value should be updated. Dependent on component type\n(\"input\" for <input> or \"change\" for <select>(mainly for IE)) a different event should be\nused  as source for the \"user-input-changed\" event (which can be seen as an abstraction\nlayer on top of other events (input, change, whatever))",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onModelValueChanged",
              "parameters": [
                {
                  "name": "{ modelValue }"
                },
                {
                  "name": "old",
                  "optional": true,
                  "type": {
                    "text": "{ modelValue:unknown }"
                  }
                },
                {
                  "name": "newV",
                  "type": {
                    "text": "{ modelValue:unknown }"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "parser",
              "parameters": [
                {
                  "name": "v",
                  "description": "viewValue: the formatted value inside <input>",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "FormatOptions"
                  }
                }
              ],
              "description": "Converts viewValue to modelValue\nFor instance, a localized date to a Date Object",
              "return": {
                "type": {
                  "text": "*"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "formatter",
              "parameters": [
                {
                  "name": "modelValue",
                  "type": {
                    "text": "ChoiceInputModelValue"
                  }
                }
              ],
              "description": "Converts modelValue to formattedValue (formattedValue will be synced with\n`._inputNode.value`)\nFor instance, a Date object to a localized date.",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "clear"
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "parameters": [
                {
                  "name": "modelValue",
                  "default": "(this).modelValue",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Used for required validator.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_syncValueUpwards",
              "description": "Synchronization from `._inputNode.value` to `LionField` (flow [2])\nDownwards syncing should only happen for `LionField`.value changes from 'above'.\nThis triggers _onModelValueChanged and connects user input\nto the parsing/formatting/serializing loop.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "modelValue",
              "type": {
                "text": "{value:string|any,checked:boolean}"
              },
              "description": "Whereas 'normal' `.modelValue`s usually store a complex/typed version\nof a view value, choice inputs have a slightly different approach.\nIn order to remain their Single Source of Truth characteristic, choice inputs\nstore both the value and 'checkedness', in the format { value: 'x', checked: true }\nDifferent from the platform, this also allows to serialize the 'non checkedness',\nallowing to restore form state easily and inform the server about unchecked options.",
              "default": "{ value: '', checked: false }"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              },
              "description": "Boolean indicating whether or not this element is disabled."
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The view value. Will be delegated to `._inputNode.value`",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "preprocessor",
              "parameters": [
                {
                  "name": "v",
                  "description": "the raw value from the <input> after keyUp/Down event",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Preprocesses the viewValue before it's parsed to a modelValue. Can be used to filter\ninvalid input amongst others.",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "serializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.modelValue` to `.serializedValue`\nFor instance, a Date object to an iso formatted date string",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "deserializer",
              "parameters": [
                {
                  "name": "v",
                  "description": "modelValue: can be an Object, Number, String depending on the\ninput type(date, number, email etc)",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Converts `.serializedValue` to `.modelValue`\nFor instance, an iso formatted date string to a Date object",
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_calculateValues",
              "parameters": [
                {
                  "name": "{ source }",
                  "default": "{ source: null }"
                },
                {
                  "description": "the type of value that triggered this method. It should not be\nset again, so that its observer won't be triggered. Can be:\n'model'|'formatted'|'serialized'.",
                  "name": "config",
                  "type": {
                    "text": "{source:'model'|'serialized'|'formatted'|null}"
                  }
                }
              ],
              "description": "Responsible for storing all representations(modelValue, serializedValue, formattedValue\nand value) of the input value. Prevents infinite loops, so all value observers can be\ntreated like they will only be called once, without indirectly calling other observers.\n(in fact, some are called twice, but the __preventRecursiveTrigger lock prevents the\nsecond call from having effect).",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_callParser",
              "parameters": [
                {
                  "name": "value",
                  "default": "this.formattedValue",
                  "type": {
                    "text": "string|undefined"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "?"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_callFormatter",
              "return": {
                "type": {
                  "text": "string|undefined"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchModelValueChangedEvent",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "{ modelValue: unknown; }[]"
                  }
                }
              ],
              "description": "This is wrapped in a distinct method, so that parents can control when the changed event\nis fired. For objects, a deep comparison might be needed.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_reflectBackFormattedValueToUser",
              "description": "Synchronization from `LionField.value` to `._inputNode.value`\n- flow [1] will always be reflected back\n- flow [2] will not be reflected back when this flow was triggered via\n  `@user-input-changed` (this will happen later, when `formatOn` condition is met)",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_reflectBackOn",
              "description": "Every time .formattedValue is attempted to sync to the view value (on change/blur and on\nmodelValue change), this condition is checked. When enhancing it, it's recommended to\ncall `super._reflectBackOn()`",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onUserInputChanged",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onCompositionEvent",
              "parameters": [
                {
                  "name": "{ type }"
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onPaste",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formatOn",
              "type": {
                "text": "string"
              },
              "description": "Event that will trigger formatting (more precise, visual update of the view, so the\nuser sees the formatted value)\nDefault: 'change'",
              "privacy": "protected",
              "default": "'change'",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formatOptions",
              "description": "Configuration object that will be available inside the formatter function",
              "default": "({})",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "description": "The view value is the result of the formatter function (when available).\nThe result will be stored in the native _inputNode (usually an input[type=text]).\n\nExamples:\n- For a date input, this would be '20/01/1999' (dependent on locale).\n- For a number input, this could be '1,234.56' (a String representation of modelValue\n1234.56)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "description": "The serialized version of the model value.\nThis value exists for maximal compatibility with the platform API.\nThe serialized value can be an interface in context where data binding is not\nsupported and a serialized string needs to be set.\n\nExamples:\n- For a date input, this would be the iso format of a date, e.g. '1999-01-20'.\n- For a number input this would be the String representation of a float ('1234.56'\n  instead of 1234.56)\n\nWhen no parser is available, the value is usually the same as the formattedValue\n(being _inputNode.value)",
              "type": {
                "text": "string|undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isPasting",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the user is pasting content. Allows Subclassers to do this in their subclass:",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isHandlingUserInput",
              "type": {
                "text": "boolean"
              },
              "description": "Flag that will be set when user interaction takes place (for instance after an 'input'\nevent). Will be added as meta info to the `model-value-changed` event. Depending on\nwhether a user is interacting, formatting logic will be handled differently.",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevViewValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_reflectBackFormattedValueDebounced",
              "privacy": "private",
              "default": "() => {\n        // Make sure this is fired after the change event of _inputNode, so that formattedValue\n        // is guaranteed to be calculated\n        setTimeout(this._reflectBackFormattedValueToUser);\n      }",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "description": "Obtains the scoped elements definitions map if specified.",
              "return": {
                "type": {
                  "text": "ScopedElementsMap"
                }
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationTypes",
              "static": true,
              "description": "Types of validation supported by this FormControl (for instance 'error'|'warning'|'info')",
              "type": {
                "text": "ValidationType[]"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "slots",
              "return": {
                "type": {
                  "text": "SlotsMap"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_allValidators",
              "description": "Combination of validators provided by Application Developer and the default validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updateSync",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "An abstraction that has the exact same api as `requestUpdate`, but taking\ninto account:\n- [member order independence](https://github.com/webcomponents/gold-standard/wiki/Member-Order-Independence)\n- property effects start when all (light) dom has initialized (on firstUpdated)\n- property effects don't interrupt the first meaningful paint\n- compatible with propertyAccessor.`hasChanged`: no manual checks needed or accidentally\nrun property effects / events when no change happened\neffects when values didn't change\nAll code previously present in requestUpdate can be placed in this method.",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "parameters": [
                {
                  "name": "{ clearCurrentResult }",
                  "default": "{}"
                },
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "{ clearCurrentResult?: boolean }"
                  }
                }
              ],
              "description": "Triggered by:\n - modelValue change\n - change in the 'validators' array\n-  change in the config of an individual Validator\n\nThree situations are handled:\n- a1) the FormControl is empty: further execution is halted. When the Required Validator\n(being mutually exclusive to the other Validators) is applied, it will end up in the\nvalidation result (as the only Validator, since further execution was halted).\n- a2) there are synchronous Validators: this is the most common flow. When modelValue hasn't\nchanged since last async results were generated, 'sync results' are merged with the\n'async results'.\n- a3) there are asynchronous Validators: for instance when server side evaluation is needed.\nExecutions are scheduled and awaited and the 'async results' are merged with the\n'sync results'.\n\n- b) there are ResultValidators. After steps a1, a2, or a3 are finished, the holistic\nResultValidators (evaluating the total result of the 'regular' (a1, a2 and a3) validators)\nwill be run...\n\nSituations a2 and a3 are not mutually exclusive and can be triggered within one `validate()`\ncall. Situation b will occur after every call.",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeValidators",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeSyncValidators",
              "parameters": [
                {
                  "name": "syncValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "{ hasAsync }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ hasAsync: boolean }"
                  }
                }
              ],
              "description": "step a2 (as explained in `validate()`): calls `__finishValidation`",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeAsyncValidators",
              "parameters": [
                {
                  "name": "asyncValidators",
                  "description": "all Validators except required and ResultValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "step a3 (as explained in `validate()`), calls __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeResultValidators",
              "parameters": [
                {
                  "name": "regularValidationResult",
                  "description": "result of steps 1-3",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "description": "step b (as explained in `validate()`), called by __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__finishValidation",
              "parameters": [
                {
                  "name": "{ source, hasAsync }"
                },
                {
                  "name": "options",
                  "type": {
                    "text": "@param {'sync'|'async'} options.source\n     * @param {boolean} [options.hasAsync] whether async validators are configured in this run.\n     * "
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__clearValidationResults",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onValidatorUpdated",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event|CustomEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__isEmpty",
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Helper method for the mutually exclusive Required Validator",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getFeedbackMessages",
              "parameters": [
                {
                  "name": "validators",
                  "description": "list of objects having a .getMessage method",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise.<FeedbackMessage[]>"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateFeedbackComponent",
              "description": "Responsible for retrieving messages from Validators and\n(delegation of) rendering them.\n\nFor `._feedbackNode` (extension of LionValidationFeedback):\n- retrieve messages from highest prio Validators\n- provide the result to custom feedback node and let the\ncustom node decide on their renderings\n\nIn both cases:\n- we compute the 'show' flag (like 'hasErrorVisible') for all types\n- we set the customValidity message of the highest prio Validator\n- we set aria-invalid=\"true\" in case hasErrorVisible is true",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_showFeedbackConditionFor",
              "parameters": [
                {
                  "name": "type",
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "description": "meta info (interaction states etc)",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "Default feedbackCondition condition, used by Subclassers, that will be used when\n`feedbackCondition()` is not overridden by Application Developer.\nShow the validity feedback when returning true, don't show when false",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackConditionMeta",
              "description": "Allows Subclassers to add meta info for feedbackCondition",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "feedbackCondition",
              "parameters": [
                {
                  "name": "type",
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "default": "this._feedbackConditionMeta",
                  "description": "meta info (interaction states etc)",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "name": "currentCondition",
                  "default": "this._showFeedbackConditionFor.bind(this)",
                  "description": "this is the _showFeedbackConditionFor\nthat can be used if a developer wants to override for a certain type, but wants to fallback\nfor other types",
                  "type": {
                    "text": "((type: string, meta: object) => boolean)"
                  }
                }
              ],
              "description": "Allows the end user to specify when a feedback message should be shown",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_hasFeedbackVisibleFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Used to translate `.hasFeedbackFor` and `.shouldShowFeedbackFor` to `.showsFeedbackFor`",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateShouldShowFeedbackFor",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_prioritizeAndFilterFeedback",
              "parameters": [
                {
                  "name": "{ validationResult }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ validationResult: Validator[] }"
                  }
                }
              ],
              "description": "Orders all active validators in this.__validationResult. Can\nalso filter out occurrences (based on interaction states)",
              "return": {
                "type": {
                  "text": "Validator[]"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "hasFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "As soon as validation happens (after modelValue/validators/validator param change), this\narray is updated with the active ValidationTypes ('error'|'warning'|'success'|'info' etc.).\nNotice the difference with `.showsFeedbackFor`, which filters `.hasFeedbackFor` based on\n`.feedbackCondition()`.\n\nFor styling purposes, will be reflected to [has-feedback-for=\"error warning\"]. This can\nbe useful for subtle visual feedback on keyup, like a red/green border around an input.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "showsFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "Based on outcome of feedbackCondition, this array decides what ValidationTypes should be\nshown in validationFeedback, based on meta data like interaction states.\n\nFor styling purposes, it reflects it `[shows-feedback-for=\"error warning\"]`",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shouldShowFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "A temporary storage to transition from hasFeedbackFor to showsFeedbackFor",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationStates",
              "type": {
                "text": "Object.<string, Object.<string, boolean>>"
              },
              "description": "The outcome of a validation 'round'. Keyed by ValidationType and Validator name",
              "default": "{}",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "isPending",
              "type": {
                "text": "boolean"
              },
              "description": "Flag indicating whether async validation is pending.\nCreates attribute [is-pending] as a styling hook",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Application Developers to add Validators to a FormControl.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "defaultValidators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Subclassers to add default Validators to a particular FormControl.\nA date input for instance, always needs the isDate validator.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_visibleMessagesAmount",
              "type": {
                "text": "number"
              },
              "description": "The amount of feedback messages that will visible in LionValidationFeedback",
              "privacy": "protected",
              "default": "1",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__syncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__asyncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__validationResult",
              "type": {
                "text": "Validator[]"
              },
              "description": "Aggregated result from sync Validators, async Validators and ResultValidators",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevShownValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__childModelValueChanged",
              "type": {
                "text": "boolean"
              },
              "description": "The updated children validity affects the validity of the parent. Helper to recompute\nvalidatity of parent FormGroup",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The label text for the input node.\nWhen no value is defined, textContent of [slot=label] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "description": "The helpt text for the input node.\nWhen no value is defined, textContent of [slot=help-text] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "fieldName",
              "description": "Will be used in validation messages to refer to the current field",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "description": "The interactive (form) element. Can be a native element like input/textarea/select or\nan element with tabindex > -1",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_labelNode",
              "description": "Element where label will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_helpTextNode",
              "description": "Element where help text will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackNode",
              "description": "Element where validation feedback will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11y",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11yForAdditionalSlots",
              "parameters": [
                {
                  "name": "additionalSlots",
                  "default": "['prefix', 'suffix', 'before', 'after']",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Enhances additional slots(prefix, suffix, before, after) defined by developer.\n\nWhen boolean attribute data-label or data-description is found,\nthe slot element will be connected to the input via aria-labelledby or aria-describedby",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__reflectAriaAttr",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "reorder",
                  "type": {
                    "text": "boolean|undefined"
                  }
                }
              ],
              "description": "Will handle help text, validation feedback and character counter,\nprefix/suffix/before/after (if they contain data-description flag attr).\nAlso, contents of id references that will be put in the <lion-field>._ariaDescribedby property\nfrom an external context, will be read by a screen reader.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupOneTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupTwoTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_helpTextTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupBeforeTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupPrefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupSuffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupAfterTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_feedbackTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getAriaDescriptionElements",
              "description": "This function exposes descripion elements that a FormGroup should expose to its\nchildren. See FormGroupMixin.__getAllDescriptionElementsInParentChain()",
              "return": {
                "type": {
                  "text": "Array.<HTMLElement>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add element references to aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getDirectSlotChild",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchInitialModelValueChangedEvent",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to add logic before repropagation",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__repropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_repropagationCondition",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "description": "Based on provided target, this condition determines whether received model-value-changed\nevent should be repropagated",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onLabelClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the element will be registered with to the .formElements collection\nof the parent. Also, it serves as the key of key/value pairs in\n modelValue/serializedValue objects",
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "A Boolean attribute which, if present, indicates that the user should not be able to edit\nthe value of the input. The difference between disabled and readonly is that read-only\ncontrols can still function, whereas disabled controls generally do not function as\ncontrols until they are enabled.\n(From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputId",
              "description": "Unique id that can be used in all light dom",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaLabelledNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-labelledby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaDescribedNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-describedby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_repropagationRole",
              "type": {
                "text": "'child'|'choice-group'|'fieldset'"
              },
              "description": "Based on the role, details of handling model-value-changed repropagation differ.",
              "default": "'child'",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isRepropagationEndpoint",
              "type": {
                "text": "boolean"
              },
              "description": "By default, a field with _repropagationRole 'choice-group' will act as an\n'endpoint'. This means it will be considered as an individual field: for\na select, individual options will not be part of the formPath. They\nwill.\nSimilarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n(from Application Developer perspective) need to be more like fields\n(think of an amount-input with a currency select box next to it), can set this\nto true to hide private internals in the formPath.",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableHasChanged",
              "static": true,
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Makes the propertyAccessor.`hasChanged` compatible in synchronous updates",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableInitialize",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__SyncUpdatableNamespace",
              "type": {
                "text": "SyncUpdatableNamespace"
              },
              "description": "Namespace for this mixin that guarantees naming clashes will not occur...",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__renderAsNodes",
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "parameters": [
                {
                  "name": "slotName",
                  "description": "Name of the slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__privateSlots",
              "privacy": "private",
              "default": "new Set(null)",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "static": true,
              "description": "Obtains the ShadowRoot options.",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "ShadowRootInit"
                  }
                }
              ],
              "type": {
                "text": "ShadowRootInit"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "static": true,
              "description": "Obtains the element styles.",
              "return": {
                "type": {
                  "text": "CSSResultFlatArray"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registry",
              "description": "Set the CustomElementRegistry associated to the ShadowRoot",
              "return": {
                "type": {
                  "text": "CustomElementRegistry"
                }
              },
              "parameters": [
                {
                  "name": "registry",
                  "type": {
                    "text": "CustomElementRegistry"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "defineScopedElement",
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "klass",
                  "type": {
                    "text": "typeof HTMLElement"
                  }
                }
              ],
              "description": "Defines a scoped element.",
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "getScopedTagName",
              "static": true,
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormatMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
            },
            {
              "name": "dedupeMixin",
              "package": "@lion/core"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "ChoiceInputMixin"
          },
          "events": [
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "user-input-changed",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormatMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormatMixin.js"
              }
            },
            {
              "name": "showsFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "shouldShowFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "validate-performed",
              "type": {
                "text": "Event"
              },
              "description": "private event that should be listened to by LionFieldSet",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "form-element-name-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ChoiceInputMixin",
          "declaration": {
            "name": "ChoiceInputMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/choice-group/ChoiceInputMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormControlsCollection.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This class closely mimics the natively\nsupported HTMLFormControlsCollection. It can be accessed\nboth like an array and an object (based on control/element names).",
          "name": "FormControlsCollection",
          "members": [
            {
              "kind": "method",
              "name": "_keys",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string[]"
                }
              }
            }
          ],
          "superclass": {
            "name": "Array",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormControlsCollection.d.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormControlsCollection",
          "declaration": {
            "name": "FormControlsCollection",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormControlsCollection.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormControlsCollection.js",
      "declarations": [
        {
          "kind": "class",
          "description": "This class closely mimics the natively\nsupported HTMLFormControlsCollection. It can be accessed\nboth like an array and an object (based on control/element names).",
          "name": "FormControlsCollection",
          "members": [
            {
              "kind": "method",
              "name": "_keys",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "privacy": "protected"
            }
          ],
          "superclass": {
            "name": "Array",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormControlsCollection.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormControlsCollection",
          "declaration": {
            "name": "FormControlsCollection",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormControlsCollection.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FormRegisteringMixin",
          "type": {
            "text": "typeof import(\"../../types/registration/FormRegisteringMixinTypes\").FormRegisteringImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormRegisteringMixin",
          "declaration": {
            "name": "FormRegisteringMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "#FormRegisteringMixin:\n\nThis Mixin registers a form element to a Registrar",
          "name": "FormRegisteringMixin",
          "members": [
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined"
            }
          ],
          "events": [
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "FormRegisteringMixin"
          },
          "mixins": [
            {
              "name": "dedupeMixin",
              "package": "@lion/core"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormRegisteringMixin",
          "declaration": {
            "name": "FormRegisteringMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FormRegistrarMixin",
          "type": {
            "text": "typeof import(\"../../types/registration/FormRegistrarMixinTypes.js\").FormRegistrarImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormRegistrarMixin",
          "declaration": {
            "name": "FormRegistrarMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "FormRegistrarMixin",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "_completeRegistration",
              "description": "Resolves the registrationComplete promise. Subclassers can delay if needed"
            },
            {
              "kind": "method",
              "name": "isRegisteredFormElement",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "ElementWithParentFormGroup"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addFormElement",
              "parameters": [
                {
                  "name": "child",
                  "description": "the child element (field)",
                  "type": {
                    "text": "FormControl"
                  }
                },
                {
                  "name": "indexToInsertAt",
                  "description": "index to insert the form element at",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeFormElement",
              "parameters": [
                {
                  "name": "child",
                  "description": "the child element (field)",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onRequestToAddFormElement",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to perform logic before an element is added",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_onRequestToChangeFormElementName",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_onRequestToRemoveFormElement",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "formElements",
              "description": "Closely mimics the natively supported HTMLFormControlsCollection. It can be accessed\nboth like an array and an object (based on control/element names).",
              "type": {
                "text": "FormControlsCollection"
              },
              "default": "new FormControlsCollection()"
            },
            {
              "kind": "field",
              "name": "_isFormOrFieldset",
              "type": {
                "text": "boolean"
              },
              "description": "Flag that determines how \".formElements\" should behave.\nFor a regular fieldset (see LionFieldset) we expect \".formElements\"\nto be accessible as an object.\nIn case of a radio-group, a checkbox-group or a select/listbox,\nit should act like an array (see ChoiceGroupMixin).\nUsually, when false, we deal with a choice-group (radio-group, checkbox-group,\n(multi)select)",
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "initComplete",
              "description": "initComplete resolves after all pending initialization logic\n(for instance `<form-group .serializedValue=${{ child1: 'a', child2: 'b' }}>`)\nis executed",
              "type": {
                "text": "Promise<any>"
              },
              "default": "new Promise((resolve, reject) => {\n        this.__resolveInitComplete = resolve;\n        this.__rejectInitComplete = reject;\n      })"
            },
            {
              "kind": "field",
              "name": "registrationComplete",
              "description": "registrationComplete waits for all children formElements to have registered",
              "type": {
                "text": "Promise<any> & {done?:boolean}"
              },
              "default": "new Promise((resolve, reject) => {\n        this.__resolveRegistrationComplete = resolve;\n        this.__rejectRegistrationComplete = reject;\n      })"
            },
            {
              "kind": "field",
              "name": "done",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormRegisteringMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
            },
            {
              "name": "dedupeMixin",
              "package": "@lion/core"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "FormRegistrarMixin"
          },
          "events": [
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormRegistrarMixin",
          "declaration": {
            "name": "FormRegistrarMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarPortalMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FormRegistrarPortalMixin",
          "type": {
            "text": "typeof import(\"../../types/registration/FormRegistrarPortalMixinTypes\").FormRegistrarPortalImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormRegistrarPortalMixin",
          "declaration": {
            "name": "FormRegistrarPortalMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarPortalMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarPortalMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "This allows to register fields within a form even though they are not within the same dom tree.\nIt does that by redispatching the event on the registration target.\nNeither form or field need to know about the portal. It acts as if the field is part of the dom tree.",
          "name": "FormRegistrarPortalMixin",
          "members": [
            {
              "kind": "method",
              "name": "__redispatchEventForFormRegistrarPortalMixin",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "registrationTarget",
              "description": "Registration target: an element, usually in the body of the dom, that captures events\nand redispatches them on host",
              "type": {
                "text": "(FormRegistrarPortalHost & HTMLElement) | undefined"
              },
              "default": "undefined"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<HTMLElement>"
              }
            }
          ],
          "type": {
            "text": "FormRegistrarPortalMixin"
          },
          "mixins": [
            {
              "name": "dedupeMixin",
              "package": "@lion/core"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormRegistrarPortalMixin",
          "declaration": {
            "name": "FormRegistrarPortalMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarPortalMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/form-group/FormElementsHaveNoError.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormElementsHaveNoError",
          "members": [
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormElementsHaveNoError",
          "declaration": {
            "name": "FormElementsHaveNoError",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/form-group/FormElementsHaveNoError.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/form-group/FormElementsHaveNoError.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormElementsHaveNoError",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{ node: any }"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormElementsHaveNoError",
          "declaration": {
            "name": "FormElementsHaveNoError",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/form-group/FormElementsHaveNoError.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/form-group/FormGroupMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FormGroupMixin",
          "type": {
            "text": "typeof import(\"../../types/form-group/FormGroupMixinTypes.js\").FormGroupImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormGroupMixin",
          "declaration": {
            "name": "FormGroupMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/form-group/FormGroupMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/form-group/FormGroupMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "FormGroupMixin",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "description": "The host element with role group (or radigroup or form) containing neccessary aria attributes",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "modelValue",
              "description": "Object keyed by formElements names, containing formElements' modelValues"
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "description": "Object keyed by formElements names, containing formElements' serializedValues"
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "description": "Object keyed by formElements names, containing formElements' formattedValues"
            },
            {
              "kind": "field",
              "name": "prefilled",
              "description": "True when all of the children are prefilled (see InteractionStateMixin for more details.)"
            },
            {
              "kind": "method",
              "name": "__initInteractionStates"
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupOutsideClickHandling"
            },
            {
              "kind": "method",
              "name": "_checkForOutsideClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__requestChildrenToBeDisabled"
            },
            {
              "kind": "method",
              "name": "__retractRequestChildrenToBeDisabled"
            },
            {
              "kind": "method",
              "name": "_inputGroupTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "submitGroup",
              "description": "Handles interaction state 'submitted'.\nThis allows children to enable visibility of validation feedback"
            },
            {
              "kind": "method",
              "name": "resetGroup",
              "description": "Resets to initial/prefilled values and interaction states of all FormControls in group,"
            },
            {
              "kind": "method",
              "name": "clearGroup",
              "description": "Clears all values and resets all interaction states of all FormControls in group,"
            },
            {
              "kind": "method",
              "name": "resetInteractionState",
              "description": "Resets all interaction states for all formElements"
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElementsFilter",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "FormControl"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "A filter function which will exclude a form field when returning false\nBy default, exclude form fields which are disabled\n\nThe type is be passed as well for more fine grained control, e.g.\ndistinguish the filter when fetching modelValue versus serializedValue",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElements",
              "parameters": [
                {
                  "name": "property",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "filterFn",
                  "optional": true,
                  "type": {
                    "text": "(el: FormControl, property?: string) => boolean"
                  }
                }
              ],
              "description": "Gets a keyed be name object for requested property (like modelValue/serializedValue)",
              "return": {
                "type": {
                  "text": "{[name:string]: any}"
                }
              }
            },
            {
              "kind": "method",
              "name": "_setValueForAllFormElements",
              "parameters": [
                {
                  "name": "property",
                  "type": {
                    "text": "string | number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Sets the same value for requested property in all formElements"
            },
            {
              "kind": "method",
              "name": "_setValueMapForAllFormElements",
              "parameters": [
                {
                  "name": "property",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "values",
                  "type": {
                    "text": "{ [x: string]: any; }"
                  }
                }
              ],
              "description": "Allows to set formElements values via a keyed object structure"
            },
            {
              "kind": "method",
              "name": "_anyFormElementHas",
              "parameters": [
                {
                  "name": "property",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns true when one of the formElements has requested"
            },
            {
              "kind": "method",
              "name": "_anyFormElementHasFeedbackFor",
              "parameters": [
                {
                  "name": "state",
                  "description": "one of ValidateHost.validationTypes",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_everyFormElementHas",
              "parameters": [
                {
                  "name": "property",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns true when all of the formElements have requested property"
            },
            {
              "kind": "method",
              "name": "__onChildValidatePerformed",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Gets triggered by event 'validate-performed' which enabled us to handle 2 different situations\n - react on modelValue change, which says something about the validity as a whole\n (at least two checkboxes for instance) and nothing about the children's values\n - children validity states have changed, so fieldset needs to update itself based on that"
            },
            {
              "kind": "method",
              "name": "_syncFocused"
            },
            {
              "kind": "method",
              "name": "_onFocusOut",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_syncDirty"
            },
            {
              "kind": "method",
              "name": "__storeAllDescriptionElementsInParentChain",
              "description": "Traverses the _parentFormGroup tree, and gathers all aria description elements\n(feedback and helptext) that should be provided to children.\n\nIn the example below, when the input for 'street' has focus, a screenreader user\nwould hear the #group-error.\nIn case one of the inputs was in error state as well, the SR user would\nfirst hear the local error, followed by #group-error"
            },
            {
              "kind": "method",
              "name": "__linkParentMessages",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControl"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__unlinkParentMessages",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControl"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addFormElement",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControl & {serializedValue:string|object}"
                  }
                },
                {
                  "name": "indexToInsertAt",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_initialModelValue",
              "description": "Gathers initial model values of all children. Used when resetGroup() is called."
            },
            {
              "kind": "method",
              "name": "removeFormElement",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "FormRegisteringHost & FormControl"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              },
              "description": "Disables all formElements in group"
            },
            {
              "kind": "field",
              "name": "submitted",
              "type": {
                "text": "boolean"
              },
              "description": "True when parent form is submitted",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "dirty",
              "type": {
                "text": "boolean"
              },
              "description": "True when any of the children is dirty (see InteractionStateMixin for more details.)",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "touched",
              "type": {
                "text": "boolean"
              },
              "description": "True when the group as a whole is blurred (see InteractionStateMixin for more details.)",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "description": "True when any of the children is focused.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "__addedSubValidators",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "__isInitialModelValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "__isInitialSerializedValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "defaultValidators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Subclassers to add default Validators to a particular FormControl.\nA date input for instance, always needs the isDate validator.",
              "default": "[new FormElementsHaveNoError()]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__descriptionElementsInParentChain",
              "default": "new Set()"
            },
            {
              "kind": "field",
              "name": "__pendingValues",
              "type": {
                "text": "{modelValue?:{[key:string]: any}, serializedValue?:{[key:string]: any}}"
              },
              "default": "{ modelValue: {}, serializedValue: {} }"
            },
            {
              "kind": "method",
              "name": "_completeRegistration",
              "description": "Resolves the registrationComplete promise. Subclassers can delay if needed",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "isRegisteredFormElement",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "ElementWithParentFormGroup"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToAddFormElement",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to perform logic before an element is added",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToChangeFormElementName",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onRequestToRemoveFormElement",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "formElements",
              "description": "Closely mimics the natively supported HTMLFormControlsCollection. It can be accessed\nboth like an array and an object (based on control/element names).",
              "type": {
                "text": "FormControlsCollection"
              },
              "default": "new FormControlsCollection()",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isFormOrFieldset",
              "type": {
                "text": "boolean"
              },
              "description": "Flag that determines how \".formElements\" should behave.\nFor a regular fieldset (see LionFieldset) we expect \".formElements\"\nto be accessible as an object.\nIn case of a radio-group, a checkbox-group or a select/listbox,\nit should act like an array (see ChoiceGroupMixin).\nUsually, when false, we deal with a choice-group (radio-group, checkbox-group,\n(multi)select)",
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "initComplete",
              "description": "initComplete resolves after all pending initialization logic\n(for instance `<form-group .serializedValue=${{ child1: 'a', child2: 'b' }}>`)\nis executed",
              "type": {
                "text": "Promise<any>"
              },
              "default": "new Promise((resolve, reject) => {\n        this.__resolveInitComplete = resolve;\n        this.__rejectInitComplete = reject;\n      })",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registrationComplete",
              "description": "registrationComplete waits for all children formElements to have registered",
              "type": {
                "text": "Promise<any> & {done?:boolean}"
              },
              "default": "new Promise((resolve, reject) => {\n        this.__resolveRegistrationComplete = resolve;\n        this.__rejectRegistrationComplete = reject;\n      })",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "done",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormRegistrarMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The label text for the input node.\nWhen no value is defined, textContent of [slot=label] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "description": "The helpt text for the input node.\nWhen no value is defined, textContent of [slot=help-text] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "fieldName",
              "description": "Will be used in validation messages to refer to the current field",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "slots",
              "return": {
                "type": {
                  "text": "SlotsMap"
                }
              },
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_labelNode",
              "description": "Element where label will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_helpTextNode",
              "description": "Element where help text will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackNode",
              "description": "Element where validation feedback will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11y",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11yForAdditionalSlots",
              "parameters": [
                {
                  "name": "additionalSlots",
                  "default": "['prefix', 'suffix', 'before', 'after']",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Enhances additional slots(prefix, suffix, before, after) defined by developer.\n\nWhen boolean attribute data-label or data-description is found,\nthe slot element will be connected to the input via aria-labelledby or aria-describedby",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__reflectAriaAttr",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "reorder",
                  "type": {
                    "text": "boolean|undefined"
                  }
                }
              ],
              "description": "Will handle help text, validation feedback and character counter,\nprefix/suffix/before/after (if they contain data-description flag attr).\nAlso, contents of id references that will be put in the <lion-field>._ariaDescribedby property\nfrom an external context, will be read by a screen reader.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Default Render Result:\n<div class=\"form-field__group-one\">\n  <div class=\"form-field__label\">\n    <slot name=\"label\"></slot>\n  </div>\n  <small class=\"form-field__help-text\">\n    <slot name=\"help-text\"></slot>\n  </small>\n</div>\n<div class=\"form-field__group-two\">\n  <div class=\"input-group\">\n    <div class=\"input-group__before\">\n      <slot name=\"before\"></slot>\n    </div>\n    <div class=\"input-group__container\">\n      <div class=\"input-group__prefix\">\n        <slot name=\"prefix\"></slot>\n      </div>\n      <div class=\"input-group__input\">\n        <slot name=\"input\"></slot>\n      </div>\n      <div class=\"input-group__suffix\">\n        <slot name=\"suffix\"></slot>\n      </div>\n    </div>\n    <div class=\"input-group__after\">\n      <slot name=\"after\"></slot>\n    </div>\n  </div>\n  <div class=\"form-field__feedback\">\n    <slot name=\"feedback\"></slot>\n  </div>\n</div>",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupOneTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupTwoTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_helpTextTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupBeforeTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupPrefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupSuffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupAfterTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_feedbackTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "parameters": [
                {
                  "name": "modelValue",
                  "default": "(this).modelValue",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Used for Required validation and computation of interaction states",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "{block} .input-group\n\nStructure:\n- {element} .input-group__before (optional) : a prefix that resides outside the container\n- {element} .input-group__container : an inner container: this element contains all styling\n - {element} .input-group__prefix (optional) : a prefix that resides in the container,\n              allowing it to be detectable as a :first-child\n - {element} .input-group__input : a wrapper around the form-control component\n  - {block} .form-control : the actual input element (input/select/textarea)\n - {element} .input-group__suffix (optional) : a suffix that resides inside the container,\n              allowing it to be detectable as a :last-child\n - {element} .input-group__bottom (optional) : placeholder element for additional styling\n              (like an animated line for material design input)\n- {element} .input-group__after (optional) :  a suffix that resides outside the container",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getAriaDescriptionElements",
              "description": "This function exposes descripion elements that a FormGroup should expose to its\nchildren. See FormGroupMixin.__getAllDescriptionElementsInParentChain()",
              "return": {
                "type": {
                  "text": "Array.<HTMLElement>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add element references to aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getDirectSlotChild",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchInitialModelValueChangedEvent",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to add logic before repropagation",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__repropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_repropagationCondition",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "description": "Based on provided target, this condition determines whether received model-value-changed\nevent should be repropagated",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onLabelClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the element will be registered with to the .formElements collection\nof the parent. Also, it serves as the key of key/value pairs in\n modelValue/serializedValue objects",
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "A Boolean attribute which, if present, indicates that the user should not be able to edit\nthe value of the input. The difference between disabled and readonly is that read-only\ncontrols can still function, whereas disabled controls generally do not function as\ncontrols until they are enabled.\n(From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputId",
              "description": "Unique id that can be used in all light dom",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaLabelledNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-labelledby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaDescribedNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-describedby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_repropagationRole",
              "type": {
                "text": "'child'|'choice-group'|'fieldset'"
              },
              "description": "Based on the role, details of handling model-value-changed repropagation differ.",
              "default": "'child'",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isRepropagationEndpoint",
              "type": {
                "text": "boolean"
              },
              "description": "By default, a field with _repropagationRole 'choice-group' will act as an\n'endpoint'. This means it will be considered as an individual field: for\na select, individual options will not be part of the formPath. They\nwill.\nSimilarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n(from Application Developer perspective) need to be more like fields\n(think of an amount-input with a currency select box next to it), can set this\nto true to hide private internals in the formPath.",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__renderAsNodes",
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "parameters": [
                {
                  "name": "slotName",
                  "description": "Name of the slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__privateSlots",
              "privacy": "private",
              "default": "new Set(null)",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "description": "Obtains the scoped elements definitions map if specified.",
              "return": {
                "type": {
                  "text": "ScopedElementsMap"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationTypes",
              "static": true,
              "description": "Types of validation supported by this FormControl (for instance 'error'|'warning'|'info')",
              "type": {
                "text": "ValidationType[]"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_allValidators",
              "description": "Combination of validators provided by Application Developer and the default validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "description": "Empty pending queue in order to guarantee order independence",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updateSync",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "An abstraction that has the exact same api as `requestUpdate`, but taking\ninto account:\n- [member order independence](https://github.com/webcomponents/gold-standard/wiki/Member-Order-Independence)\n- property effects start when all (light) dom has initialized (on firstUpdated)\n- property effects don't interrupt the first meaningful paint\n- compatible with propertyAccessor.`hasChanged`: no manual checks needed or accidentally\nrun property effects / events when no change happened\neffects when values didn't change\nAll code previously present in requestUpdate can be placed in this method.",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "parameters": [
                {
                  "name": "{ clearCurrentResult }",
                  "default": "{}"
                },
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "{ clearCurrentResult?: boolean }"
                  }
                }
              ],
              "description": "Triggered by:\n - modelValue change\n - change in the 'validators' array\n-  change in the config of an individual Validator\n\nThree situations are handled:\n- a1) the FormControl is empty: further execution is halted. When the Required Validator\n(being mutually exclusive to the other Validators) is applied, it will end up in the\nvalidation result (as the only Validator, since further execution was halted).\n- a2) there are synchronous Validators: this is the most common flow. When modelValue hasn't\nchanged since last async results were generated, 'sync results' are merged with the\n'async results'.\n- a3) there are asynchronous Validators: for instance when server side evaluation is needed.\nExecutions are scheduled and awaited and the 'async results' are merged with the\n'sync results'.\n\n- b) there are ResultValidators. After steps a1, a2, or a3 are finished, the holistic\nResultValidators (evaluating the total result of the 'regular' (a1, a2 and a3) validators)\nwill be run...\n\nSituations a2 and a3 are not mutually exclusive and can be triggered within one `validate()`\ncall. Situation b will occur after every call.",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeValidators",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeSyncValidators",
              "parameters": [
                {
                  "name": "syncValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "{ hasAsync }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ hasAsync: boolean }"
                  }
                }
              ],
              "description": "step a2 (as explained in `validate()`): calls `__finishValidation`",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeAsyncValidators",
              "parameters": [
                {
                  "name": "asyncValidators",
                  "description": "all Validators except required and ResultValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "step a3 (as explained in `validate()`), calls __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__executeResultValidators",
              "parameters": [
                {
                  "name": "regularValidationResult",
                  "description": "result of steps 1-3",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "description": "step b (as explained in `validate()`), called by __finishValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__finishValidation",
              "parameters": [
                {
                  "name": "{ source, hasAsync }"
                },
                {
                  "name": "options",
                  "type": {
                    "text": "@param {'sync'|'async'} options.source\n     * @param {boolean} [options.hasAsync] whether async validators are configured in this run.\n     * "
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__clearValidationResults",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__onValidatorUpdated",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event|CustomEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__setupValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__isEmpty",
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Helper method for the mutually exclusive Required Validator",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getFeedbackMessages",
              "parameters": [
                {
                  "name": "validators",
                  "description": "list of objects having a .getMessage method",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise.<FeedbackMessage[]>"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateFeedbackComponent",
              "description": "Responsible for retrieving messages from Validators and\n(delegation of) rendering them.\n\nFor `._feedbackNode` (extension of LionValidationFeedback):\n- retrieve messages from highest prio Validators\n- provide the result to custom feedback node and let the\ncustom node decide on their renderings\n\nIn both cases:\n- we compute the 'show' flag (like 'hasErrorVisible') for all types\n- we set the customValidity message of the highest prio Validator\n- we set aria-invalid=\"true\" in case hasErrorVisible is true",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_showFeedbackConditionFor",
              "parameters": [
                {
                  "name": "type",
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "description": "meta info (interaction states etc)",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "Default feedbackCondition condition, used by Subclassers, that will be used when\n`feedbackCondition()` is not overridden by Application Developer.\nShow the validity feedback when returning true, don't show when false",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackConditionMeta",
              "description": "Allows Subclassers to add meta info for feedbackCondition",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "feedbackCondition",
              "parameters": [
                {
                  "name": "type",
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "default": "this._feedbackConditionMeta",
                  "description": "meta info (interaction states etc)",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "name": "currentCondition",
                  "default": "this._showFeedbackConditionFor.bind(this)",
                  "description": "this is the _showFeedbackConditionFor\nthat can be used if a developer wants to override for a certain type, but wants to fallback\nfor other types",
                  "type": {
                    "text": "((type: string, meta: object) => boolean)"
                  }
                }
              ],
              "description": "Allows the end user to specify when a feedback message should be shown",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_hasFeedbackVisibleFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Used to translate `.hasFeedbackFor` and `.shouldShowFeedbackFor` to `.showsFeedbackFor`",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateShouldShowFeedbackFor",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_prioritizeAndFilterFeedback",
              "parameters": [
                {
                  "name": "{ validationResult }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ validationResult: Validator[] }"
                  }
                }
              ],
              "description": "Orders all active validators in this.__validationResult. Can\nalso filter out occurrences (based on interaction states)",
              "return": {
                "type": {
                  "text": "Validator[]"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "hasFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "As soon as validation happens (after modelValue/validators/validator param change), this\narray is updated with the active ValidationTypes ('error'|'warning'|'success'|'info' etc.).\nNotice the difference with `.showsFeedbackFor`, which filters `.hasFeedbackFor` based on\n`.feedbackCondition()`.\n\nFor styling purposes, will be reflected to [has-feedback-for=\"error warning\"]. This can\nbe useful for subtle visual feedback on keyup, like a red/green border around an input.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "showsFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "Based on outcome of feedbackCondition, this array decides what ValidationTypes should be\nshown in validationFeedback, based on meta data like interaction states.\n\nFor styling purposes, it reflects it `[shows-feedback-for=\"error warning\"]`",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shouldShowFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "A temporary storage to transition from hasFeedbackFor to showsFeedbackFor",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationStates",
              "type": {
                "text": "Object.<string, Object.<string, boolean>>"
              },
              "description": "The outcome of a validation 'round'. Keyed by ValidationType and Validator name",
              "default": "{}",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "isPending",
              "type": {
                "text": "boolean"
              },
              "description": "Flag indicating whether async validation is pending.\nCreates attribute [is-pending] as a styling hook",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Application Developers to add Validators to a FormControl.",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_visibleMessagesAmount",
              "type": {
                "text": "number"
              },
              "description": "The amount of feedback messages that will visible in LionValidationFeedback",
              "privacy": "protected",
              "default": "1",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__syncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__asyncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__validationResult",
              "type": {
                "text": "Validator[]"
              },
              "description": "Aggregated result from sync Validators, async Validators and ResultValidators",
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__prevShownValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__childModelValueChanged",
              "type": {
                "text": "boolean"
              },
              "description": "The updated children validity affects the validity of the parent. Helper to recompute\nvalidatity of parent FormGroup",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableHasChanged",
              "static": true,
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Makes the propertyAccessor.`hasChanged` compatible in synchronous updates",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableInitialize",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__SyncUpdatableNamespace",
              "type": {
                "text": "SyncUpdatableNamespace"
              },
              "description": "Namespace for this mixin that guarantees naming clashes will not occur...",
              "default": "{}",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "static": true,
              "description": "Obtains the ShadowRoot options.",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "ShadowRootInit"
                  }
                }
              ],
              "type": {
                "text": "ShadowRootInit"
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "static": true,
              "description": "Obtains the element styles.",
              "return": {
                "type": {
                  "text": "CSSResultFlatArray"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registry",
              "description": "Set the CustomElementRegistry associated to the ShadowRoot",
              "return": {
                "type": {
                  "text": "CustomElementRegistry"
                }
              },
              "parameters": [
                {
                  "name": "registry",
                  "type": {
                    "text": "CustomElementRegistry"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "defineScopedElement",
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "klass",
                  "type": {
                    "text": "typeof HTMLElement"
                  }
                }
              ],
              "description": "Defines a scoped element.",
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "getScopedTagName",
              "static": true,
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormRegistrarMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js"
            },
            {
              "name": "FormControlMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
            },
            {
              "name": "ValidateMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
            },
            {
              "name": "DisabledMixin",
              "package": "@lion/core"
            },
            {
              "name": "SlotMixin",
              "package": "@lion/core"
            },
            {
              "name": "dedupeMixin",
              "package": "@lion/core"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "FormGroupMixin"
          },
          "events": [
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "form-element-name-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "showsFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "shouldShowFeedbackForChanged",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            },
            {
              "name": "validate-performed",
              "type": {
                "text": "Event"
              },
              "description": "private event that should be listened to by LionFieldSet",
              "inheritedFrom": {
                "name": "ValidateMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormGroupMixin",
          "declaration": {
            "name": "FormGroupMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/form-group/FormGroupMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/AsyncQueue.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Use the `.add` method to add async functions to the queue\nAwait the `.complete` if you want to ensure the queue is empty at any point\n`complete` resolves whenever no more tasks are running.\nImportant note: Currently runs tasks 1 by 1, there is no concurrency option at the moment",
          "name": "AsyncQueue",
          "members": [
            {
              "kind": "field",
              "name": "__running",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "__queue",
              "type": {
                "text": "function[]"
              }
            },
            {
              "kind": "method",
              "name": "add",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "task",
                  "type": {
                    "text": "function"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "complete",
              "type": {
                "text": "Promise<any> | undefined"
              }
            },
            {
              "kind": "field",
              "name": "__callComplete",
              "type": {
                "text": "function"
              }
            },
            {
              "kind": "field",
              "name": "__run",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AsyncQueue",
          "declaration": {
            "name": "AsyncQueue",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/AsyncQueue.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/AsyncQueue.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Use the `.add` method to add async functions to the queue\nAwait the `.complete` if you want to ensure the queue is empty at any point\n`complete` resolves whenever no more tasks are running.\nImportant note: Currently runs tasks 1 by 1, there is no concurrency option at the moment",
          "name": "AsyncQueue",
          "members": [
            {
              "kind": "method",
              "name": "add",
              "parameters": [
                {
                  "name": "task",
                  "type": {
                    "text": "function"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__run",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__running",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "__queue",
              "type": {
                "text": "function[]"
              },
              "default": "[]"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AsyncQueue",
          "declaration": {
            "name": "AsyncQueue",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/AsyncQueue.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/getAriaElementsInRightDomOrder.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getAriaElementsInRightDomOrder",
          "return": {
            "type": {
              "text": "HTMLElement[]"
            }
          },
          "parameters": [
            {
              "name": "descriptionElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "holds references to description or label elements whose\nid should be returned"
            },
            {
              "name": "{ reverse }",
              "optional": true,
              "type": {
                "text": "{\n    reverse: boolean;\n}"
              }
            },
            {
              "name": "opts",
              "type": {
                "text": "@param {boolean} [opts.reverse]\n * "
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getAriaElementsInRightDomOrder",
          "declaration": {
            "name": "getAriaElementsInRightDomOrder",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/getAriaElementsInRightDomOrder.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/getAriaElementsInRightDomOrder.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getAriaElementsInRightDomOrder",
          "parameters": [
            {
              "name": "descriptionElements",
              "description": "holds references to description or label elements whose\nid should be returned",
              "type": {
                "text": "HTMLElement[]"
              }
            },
            {
              "name": "{ reverse }",
              "default": "{}"
            },
            {
              "name": "opts",
              "type": {
                "text": "@param {boolean} [opts.reverse]\n * "
              }
            }
          ],
          "return": {
            "type": {
              "text": "HTMLElement[]"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getAriaElementsInRightDomOrder",
          "declaration": {
            "name": "getAriaElementsInRightDomOrder",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/getAriaElementsInRightDomOrder.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/pascalCase.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "pascalCase",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Return PascalCased version of the camelCased string"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "pascalCase",
          "declaration": {
            "name": "pascalCase",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/pascalCase.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/pascalCase.js",
      "declarations": [
        {
          "kind": "function",
          "name": "pascalCase",
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Return PascalCased version of the camelCased string",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "pascalCase",
          "declaration": {
            "name": "pascalCase",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/pascalCase.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "SyncUpdatableMixin",
          "type": {
            "text": "typeof import(\"../../types/utils/SyncUpdatableMixinTypes\").SyncUpdatableImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SyncUpdatableMixin",
          "declaration": {
            "name": "SyncUpdatableMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Why this mixin?\n- it adheres to the \"Member Order Independence\" web components standard:\nhttps://github.com/webcomponents/gold-standard/wiki/Member-Order-Independence\n- sync observers can be dependent on the outcome of the render function (or, more generically\nspeaking, the light and shadow dom). This aligns with the 'updated' callback that is supported\nout of the box by LitElement, which runs after connectedCallback as well.\n- makes the propertyAccessor.`hasChanged` compatible in synchronous updates:\n`updateSync` will only be called when new value differs from old value.\nSee: https://lit-element.polymer-project.org/guide/lifecycle#haschanged\n- it is a stable abstraction on top of a protected/non official lifecycle LitElement api.\nWhenever the implementation of `requestUpdate` changes (this happened in the past for\n`requestUpdate`) we only have to change our abstraction instead of all our components",
          "name": "SyncUpdatableMixin",
          "members": [
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "description": "Empty pending queue in order to guarantee order independence"
            },
            {
              "kind": "method",
              "name": "__syncUpdatableHasChanged",
              "static": true,
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Makes the propertyAccessor.`hasChanged` compatible in synchronous updates",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__syncUpdatableInitialize",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "*"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateSync",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "An abstraction that has the exact same api as `requestUpdate`, but taking\ninto account:\n- [member order independence](https://github.com/webcomponents/gold-standard/wiki/Member-Order-Independence)\n- property effects start when all (light) dom has initialized (on firstUpdated)\n- property effects don't interrupt the first meaningful paint\n- compatible with propertyAccessor.`hasChanged`: no manual checks needed or accidentally\nrun property effects / events when no change happened\neffects when values didn't change\nAll code previously present in requestUpdate can be placed in this method."
            },
            {
              "kind": "field",
              "name": "__SyncUpdatableNamespace",
              "type": {
                "text": "SyncUpdatableNamespace"
              },
              "description": "Namespace for this mixin that guarantees naming clashes will not occur...",
              "default": "{}"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "SyncUpdatableMixin"
          },
          "mixins": [
            {
              "name": "dedupeMixin",
              "package": "@lion/core"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SyncUpdatableMixin",
          "declaration": {
            "name": "SyncUpdatableMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/LionValidationFeedback.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LionValidationFeedback",
          "members": [
            {
              "kind": "method",
              "name": "_messageTemplate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string | Node | import(\"@lion/core\").TemplateResult<1 | 2>"
                }
              },
              "parameters": [
                {
                  "name": "{ message }",
                  "type": {
                    "text": "{\n        message: string | Node | TemplateResult;\n        type: string;\n        validator: Validator;\n    }"
                  }
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "@param {string | Node | TemplateResult } opts.message message or feedback node or TemplateResult\n     * @param {string} [opts.type]\n     * @param {Validator} [opts.validator]\n     * "
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "currentType",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "removeMessage",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "field",
              "name": "feedbackData",
              "type": {
                "text": "messageMap[]"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "lion-validation-feedback",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LionValidationFeedback",
          "declaration": {
            "name": "LionValidationFeedback",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/LionValidationFeedback.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/LionValidationFeedback.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LionValidationFeedback",
          "members": [
            {
              "kind": "method",
              "name": "_messageTemplate",
              "parameters": [
                {
                  "name": "{ message }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "@param {string | Node | TemplateResult } opts.message message or feedback node or TemplateResult\n   * @param {string} [opts.type]\n   * @param {Validator} [opts.validator]\n   * "
                  }
                }
              ],
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "feedbackData",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "lion-validation-feedback",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LionValidationFeedback",
          "declaration": {
            "name": "LionValidationFeedback",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/LionValidationFeedback.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ResultValidator.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ResultValidator",
          "members": [
            {
              "kind": "method",
              "name": "executeOnResults",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "{ regularValidationResult, prevValidationResult, prevShownValidationResult, validators, }",
                  "type": {
                    "text": "{\n        regularValidationResult: Validator[];\n        prevValidationResult: Validator[];\n        prevShownValidationResult: Validator[];\n        validators: Validator[];\n    }"
                  }
                },
                {
                  "name": "context",
                  "type": {
                    "text": "@param {Validator[]} context.regularValidationResult\n     * @param {Validator[]} context.prevValidationResult\n     * @param {Validator[]} context.prevShownValidationResult\n     * @param {Validator[]} [context.validators]\n     * "
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ResultValidator",
          "declaration": {
            "name": "ResultValidator",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ResultValidator.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ResultValidator.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ResultValidator",
          "members": [
            {
              "kind": "method",
              "name": "executeOnResults",
              "parameters": [
                {
                  "name": "{\n    regularValidationResult,\n    prevValidationResult,\n    prevShownValidationResult,\n    validators,\n  }"
                },
                {
                  "name": "context",
                  "type": {
                    "text": "@param {Validator[]} context.regularValidationResult\n   * @param {Validator[]} context.prevValidationResult\n   * @param {Validator[]} context.prevShownValidationResult\n   * @param {Validator[]} [context.validators]\n   * "
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ResultValidator",
          "declaration": {
            "name": "ResultValidator",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ResultValidator.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Unparseable.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A modelValue can demand a certain type (Date, Number, Iban etc.). A correct type will always be\ntranslatable into a String representation (the value presented to the end user) via the\n`formatter`. When the type is not valid (usually as a consequence of a user typing in an invalid\nor incomplete viewValue), the current truth is captured in the `Unparseable` type.\nFor example: a viewValue can't be parsed (for instance 'foo' when the type should be Number).\n\nThe model(value) concept as implemented in lion-web is conceptually comparable to those found in\npopular frameworks like Angular and Vue.\n\nThe Unparseable type is an addition on top of this that mainly is added for the following two\npurposes:\n- restoring user sessions\n- realtime updated with all value changes",
          "name": "Unparseable",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'unparseable'"
              },
              "description": "Meta info for restoring serialized Unparseable values"
            },
            {
              "kind": "field",
              "name": "viewValue",
              "type": {
                "text": "string"
              },
              "description": "Stores current view value. For instance, value '09-' is an unparseable Date.\nThis info can be used to restore previous form states."
            },
            {
              "kind": "method",
              "name": "toString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Unparseable",
          "declaration": {
            "name": "Unparseable",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Unparseable.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Unparseable.js",
      "declarations": [
        {
          "kind": "class",
          "description": "A modelValue can demand a certain type (Date, Number, Iban etc.). A correct type will always be\ntranslatable into a String representation (the value presented to the end user) via the\n`formatter`. When the type is not valid (usually as a consequence of a user typing in an invalid\nor incomplete viewValue), the current truth is captured in the `Unparseable` type.\nFor example: a viewValue can't be parsed (for instance 'foo' when the type should be Number).\n\nThe model(value) concept as implemented in lion-web is conceptually comparable to those found in\npopular frameworks like Angular and Vue.\n\nThe Unparseable type is an addition on top of this that mainly is added for the following two\npurposes:\n- restoring user sessions\n- realtime updated with all value changes",
          "name": "Unparseable",
          "members": [
            {
              "kind": "method",
              "name": "toString"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'unparseable'"
              },
              "description": "Meta info for restoring serialized Unparseable values",
              "default": "'unparseable'"
            },
            {
              "kind": "field",
              "name": "viewValue",
              "description": "Stores current view value. For instance, value '09-' is an unparseable Date.\nThis info can be used to restore previous form states.",
              "type": {
                "text": "string"
              },
              "default": "value"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Unparseable",
          "declaration": {
            "name": "Unparseable",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Unparseable.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ValidateMixinImplementation",
          "type": {
            "text": "ValidateMixin"
          },
          "description": "Handles all validation, based on modelValue changes. It has no knowledge about dom and\nUI. All error visibility, dom interaction and accessibility are handled in FeedbackMixin.",
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "ValidateMixin",
          "type": {
            "text": "typeof import(\"../../types/validate/ValidateMixinTypes.js\").ValidateImplementation"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ValidateMixinImplementation",
          "declaration": {
            "name": "ValidateMixinImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ValidateMixin",
          "declaration": {
            "name": "ValidateMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Handles all validation, based on modelValue changes. It has no knowledge about dom and\nUI. All error visibility, dom interaction and accessibility are handled in FeedbackMixin.",
          "name": "ValidateMixin",
          "members": [
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "description": "Obtains the scoped elements definitions map if specified.",
              "return": {
                "type": {
                  "text": "ScopedElementsMap"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "validationTypes",
              "static": true,
              "description": "Types of validation supported by this FormControl (for instance 'error'|'warning'|'info')",
              "type": {
                "text": "ValidationType[]"
              }
            },
            {
              "kind": "field",
              "name": "slots",
              "return": {
                "type": {
                  "text": "SlotsMap"
                }
              },
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_allValidators",
              "description": "Combination of validators provided by Application Developer and the default validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "description": "Empty pending queue in order to guarantee order independence",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "updateSync",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "An abstraction that has the exact same api as `requestUpdate`, but taking\ninto account:\n- [member order independence](https://github.com/webcomponents/gold-standard/wiki/Member-Order-Independence)\n- property effects start when all (light) dom has initialized (on firstUpdated)\n- property effects don't interrupt the first meaningful paint\n- compatible with propertyAccessor.`hasChanged`: no manual checks needed or accidentally\nrun property effects / events when no change happened\neffects when values didn't change\nAll code previously present in requestUpdate can be placed in this method.",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "parameters": [
                {
                  "name": "{ clearCurrentResult }",
                  "default": "{}"
                },
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "{ clearCurrentResult?: boolean }"
                  }
                }
              ],
              "description": "Triggered by:\n - modelValue change\n - change in the 'validators' array\n-  change in the config of an individual Validator\n\nThree situations are handled:\n- a1) the FormControl is empty: further execution is halted. When the Required Validator\n(being mutually exclusive to the other Validators) is applied, it will end up in the\nvalidation result (as the only Validator, since further execution was halted).\n- a2) there are synchronous Validators: this is the most common flow. When modelValue hasn't\nchanged since last async results were generated, 'sync results' are merged with the\n'async results'.\n- a3) there are asynchronous Validators: for instance when server side evaluation is needed.\nExecutions are scheduled and awaited and the 'async results' are merged with the\n'sync results'.\n\n- b) there are ResultValidators. After steps a1, a2, or a3 are finished, the holistic\nResultValidators (evaluating the total result of the 'regular' (a1, a2 and a3) validators)\nwill be run...\n\nSituations a2 and a3 are not mutually exclusive and can be triggered within one `validate()`\ncall. Situation b will occur after every call."
            },
            {
              "kind": "method",
              "name": "__executeValidators"
            },
            {
              "kind": "method",
              "name": "__executeSyncValidators",
              "parameters": [
                {
                  "name": "syncValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "{ hasAsync }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ hasAsync: boolean }"
                  }
                }
              ],
              "description": "step a2 (as explained in `validate()`): calls `__finishValidation`",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__executeAsyncValidators",
              "parameters": [
                {
                  "name": "asyncValidators",
                  "description": "all Validators except required and ResultValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "step a3 (as explained in `validate()`), calls __finishValidation",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__executeResultValidators",
              "parameters": [
                {
                  "name": "regularValidationResult",
                  "description": "result of steps 1-3",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "description": "step b (as explained in `validate()`), called by __finishValidation",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__finishValidation",
              "parameters": [
                {
                  "name": "{ source, hasAsync }"
                },
                {
                  "name": "options",
                  "type": {
                    "text": "@param {'sync'|'async'} options.source\n     * @param {boolean} [options.hasAsync] whether async validators are configured in this run.\n     * "
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__clearValidationResults",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__onValidatorUpdated",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event|CustomEvent"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__setupValidators",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__isEmpty",
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "description": "Helper method for the mutually exclusive Required Validator",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__getFeedbackMessages",
              "parameters": [
                {
                  "name": "validators",
                  "description": "list of objects having a .getMessage method",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise.<FeedbackMessage[]>"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateFeedbackComponent",
              "description": "Responsible for retrieving messages from Validators and\n(delegation of) rendering them.\n\nFor `._feedbackNode` (extension of LionValidationFeedback):\n- retrieve messages from highest prio Validators\n- provide the result to custom feedback node and let the\ncustom node decide on their renderings\n\nIn both cases:\n- we compute the 'show' flag (like 'hasErrorVisible') for all types\n- we set the customValidity message of the highest prio Validator\n- we set aria-invalid=\"true\" in case hasErrorVisible is true",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_showFeedbackConditionFor",
              "parameters": [
                {
                  "name": "type",
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "description": "meta info (interaction states etc)",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "description": "Default feedbackCondition condition, used by Subclassers, that will be used when\n`feedbackCondition()` is not overridden by Application Developer.\nShow the validity feedback when returning true, don't show when false",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_feedbackConditionMeta",
              "description": "Allows Subclassers to add meta info for feedbackCondition"
            },
            {
              "kind": "method",
              "name": "feedbackCondition",
              "parameters": [
                {
                  "name": "type",
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "meta",
                  "default": "this._feedbackConditionMeta",
                  "description": "meta info (interaction states etc)",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "name": "currentCondition",
                  "default": "this._showFeedbackConditionFor.bind(this)",
                  "description": "this is the _showFeedbackConditionFor\nthat can be used if a developer wants to override for a certain type, but wants to fallback\nfor other types",
                  "type": {
                    "text": "((type: string, meta: object) => boolean)"
                  }
                }
              ],
              "description": "Allows the end user to specify when a feedback message should be shown",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_hasFeedbackVisibleFor",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Used to translate `.hasFeedbackFor` and `.shouldShowFeedbackFor` to `.showsFeedbackFor`",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateShouldShowFeedbackFor",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_prioritizeAndFilterFeedback",
              "parameters": [
                {
                  "name": "{ validationResult }"
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ validationResult: Validator[] }"
                  }
                }
              ],
              "description": "Orders all active validators in this.__validationResult. Can\nalso filter out occurrences (based on interaction states)",
              "return": {
                "type": {
                  "text": "Validator[]"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "hasFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "As soon as validation happens (after modelValue/validators/validator param change), this\narray is updated with the active ValidationTypes ('error'|'warning'|'success'|'info' etc.).\nNotice the difference with `.showsFeedbackFor`, which filters `.hasFeedbackFor` based on\n`.feedbackCondition()`.\n\nFor styling purposes, will be reflected to [has-feedback-for=\"error warning\"]. This can\nbe useful for subtle visual feedback on keyup, like a red/green border around an input.",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "showsFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "Based on outcome of feedbackCondition, this array decides what ValidationTypes should be\nshown in validationFeedback, based on meta data like interaction states.\n\nFor styling purposes, it reflects it `[shows-feedback-for=\"error warning\"]`",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "shouldShowFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "A temporary storage to transition from hasFeedbackFor to showsFeedbackFor",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "validationStates",
              "type": {
                "text": "Object.<string, Object.<string, boolean>>"
              },
              "description": "The outcome of a validation 'round'. Keyed by ValidationType and Validator name",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "isPending",
              "type": {
                "text": "boolean"
              },
              "description": "Flag indicating whether async validation is pending.\nCreates attribute [is-pending] as a styling hook",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Application Developers to add Validators to a FormControl.",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "defaultValidators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Subclassers to add default Validators to a particular FormControl.\nA date input for instance, always needs the isDate validator.",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_visibleMessagesAmount",
              "type": {
                "text": "number"
              },
              "description": "The amount of feedback messages that will visible in LionValidationFeedback",
              "privacy": "protected",
              "default": "1"
            },
            {
              "kind": "field",
              "name": "__syncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "__asyncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "__validationResult",
              "type": {
                "text": "Validator[]"
              },
              "description": "Aggregated result from sync Validators, async Validators and ResultValidators",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "__prevValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "__prevShownValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "__childModelValueChanged",
              "type": {
                "text": "boolean"
              },
              "description": "The updated children validity affects the validity of the parent. Helper to recompute\nvalidatity of parent FormGroup",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The label text for the input node.\nWhen no value is defined, textContent of [slot=label] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "description": "The helpt text for the input node.\nWhen no value is defined, textContent of [slot=help-text] will be used",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "fieldName",
              "description": "Will be used in validation messages to refer to the current field",
              "type": {
                "text": "string"
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "description": "The interactive (form) element. Can be a native element like input/textarea/select or\nan element with tabindex > -1",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_labelNode",
              "description": "Element where label will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_helpTextNode",
              "description": "Element where help text will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_feedbackNode",
              "description": "Element where validation feedback will be rendered to",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11y",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_enhanceLightDomA11yForAdditionalSlots",
              "parameters": [
                {
                  "name": "additionalSlots",
                  "default": "['prefix', 'suffix', 'before', 'after']",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Enhances additional slots(prefix, suffix, before, after) defined by developer.\n\nWhen boolean attribute data-label or data-description is found,\nthe slot element will be connected to the input via aria-labelledby or aria-describedby",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__reflectAriaAttr",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "reorder",
                  "type": {
                    "text": "boolean|undefined"
                  }
                }
              ],
              "description": "Will handle help text, validation feedback and character counter,\nprefix/suffix/before/after (if they contain data-description flag attr).\nAlso, contents of id references that will be put in the <lion-field>._ariaDescribedby property\nfrom an external context, will be read by a screen reader.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Default Render Result:\n<div class=\"form-field__group-one\">\n  <div class=\"form-field__label\">\n    <slot name=\"label\"></slot>\n  </div>\n  <small class=\"form-field__help-text\">\n    <slot name=\"help-text\"></slot>\n  </small>\n</div>\n<div class=\"form-field__group-two\">\n  <div class=\"input-group\">\n    <div class=\"input-group__before\">\n      <slot name=\"before\"></slot>\n    </div>\n    <div class=\"input-group__container\">\n      <div class=\"input-group__prefix\">\n        <slot name=\"prefix\"></slot>\n      </div>\n      <div class=\"input-group__input\">\n        <slot name=\"input\"></slot>\n      </div>\n      <div class=\"input-group__suffix\">\n        <slot name=\"suffix\"></slot>\n      </div>\n    </div>\n    <div class=\"input-group__after\">\n      <slot name=\"after\"></slot>\n    </div>\n  </div>\n  <div class=\"form-field__feedback\">\n    <slot name=\"feedback\"></slot>\n  </div>\n</div>",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupOneTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_groupTwoTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_helpTextTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupBeforeTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupPrefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupInputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupSuffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | nothing"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_inputGroupAfterTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_feedbackTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "parameters": [
                {
                  "name": "modelValue",
                  "default": "(this).modelValue",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Used for Required validation and computation of interaction states",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "description": "{block} .input-group\n\nStructure:\n- {element} .input-group__before (optional) : a prefix that resides outside the container\n- {element} .input-group__container : an inner container: this element contains all styling\n - {element} .input-group__prefix (optional) : a prefix that resides in the container,\n              allowing it to be detectable as a :first-child\n - {element} .input-group__input : a wrapper around the form-control component\n  - {block} .form-control : the actual input element (input/select/textarea)\n - {element} .input-group__suffix (optional) : a suffix that resides inside the container,\n              allowing it to be detectable as a :last-child\n - {element} .input-group__bottom (optional) : placeholder element for additional styling\n              (like an animated line for material design input)\n- {element} .input-group__after (optional) :  a suffix that resides outside the container",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_getAriaDescriptionElements",
              "description": "This function exposes descripion elements that a FormGroup should expose to its\nchildren. See FormGroupMixin.__getAllDescriptionElementsInParentChain()",
              "return": {
                "type": {
                  "text": "Array.<HTMLElement>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add extra element references to aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaLabelledBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-labelledby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "addToAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "{ idPrefix = '', reorder = true }",
                  "default": "{}"
                },
                {
                  "name": "customConfig",
                  "type": {
                    "text": "{idPrefix?:string; reorder?: boolean}"
                  }
                }
              ],
              "description": "Allows to add element references to aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "removeFromAriaDescribedBy",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Allows to remove element references from aria-describedby attribute.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__getDirectSlotChild",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchInitialModelValueChangedEvent",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to add logic before repropagation",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__repropagateChildrenValues",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_repropagationCondition",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "description": "Based on provided target, this condition determines whether received model-value-changed\nevent should be repropagated",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_onLabelClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the element will be registered with to the .formElements collection\nof the parent. Also, it serves as the key of key/value pairs in\n modelValue/serializedValue objects",
              "default": "''",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "description": "A Boolean attribute which, if present, indicates that the user should not be able to edit\nthe value of the input. The difference between disabled and readonly is that read-only\ncontrols can still function, whereas disabled controls generally do not function as\ncontrols until they are enabled.\n(From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_inputId",
              "description": "Unique id that can be used in all light dom",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaLabelledNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-labelledby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_ariaDescribedNodes",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "Contains all elements that should end up in aria-describedby of `._inputNode`",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_repropagationRole",
              "type": {
                "text": "'child'|'choice-group'|'fieldset'"
              },
              "description": "Based on the role, details of handling model-value-changed repropagation differ.",
              "default": "'child'",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_isRepropagationEndpoint",
              "type": {
                "text": "boolean"
              },
              "description": "By default, a field with _repropagationRole 'choice-group' will act as an\n'endpoint'. This means it will be considered as an individual field: for\na select, individual options will not be part of the formPath. They\nwill.\nSimilarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n(from Application Developer perspective) need to be more like fields\n(think of an amount-input with a currency select box next to it), can set this\nto true to hide private internals in the formPath.",
              "default": "false",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "makeRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "retractRequestToBeDisabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__internalSetDisabled",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "_requestedToBeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__isUserSettingDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__restoreDisabledTo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/DisabledMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__renderAsNodes",
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_connectSlotMixin",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "_isPrivateSlot",
              "parameters": [
                {
                  "name": "slotName",
                  "description": "Name of the slot",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__privateSlots",
              "privacy": "private",
              "default": "new Set(null)",
              "inheritedFrom": {
                "name": "SlotMixin",
                "module": "packages/atom-listbox/node_modules/@lion/core/src/SlotMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableHasChanged",
              "static": true,
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Makes the propertyAccessor.`hasChanged` compatible in synchronous updates",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "__syncUpdatableInitialize",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "__SyncUpdatableNamespace",
              "type": {
                "text": "SyncUpdatableNamespace"
              },
              "description": "Namespace for this mixin that guarantees naming clashes will not occur...",
              "default": "{}",
              "inheritedFrom": {
                "name": "SyncUpdatableMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "static": true,
              "description": "Obtains the ShadowRoot options.",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "ShadowRootInit"
                  }
                }
              ],
              "type": {
                "text": "ShadowRootInit"
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "static": true,
              "description": "Obtains the element styles.",
              "return": {
                "type": {
                  "text": "CSSResultFlatArray"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "registry",
              "description": "Set the CustomElementRegistry associated to the ShadowRoot",
              "return": {
                "type": {
                  "text": "CustomElementRegistry"
                }
              },
              "parameters": [
                {
                  "name": "registry",
                  "type": {
                    "text": "CustomElementRegistry"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "defineScopedElement",
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "klass",
                  "type": {
                    "text": "typeof HTMLElement"
                  }
                }
              ],
              "description": "Defines a scoped element.",
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "method",
              "name": "getScopedTagName",
              "static": true,
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              },
              "inheritedFrom": {
                "name": "ScopedElementsMixin",
                "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js"
              }
            }
          ],
          "events": [
            {
              "name": "showsFeedbackForChanged",
              "type": {
                "text": "Event"
              }
            },
            {
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "shouldShowFeedbackForChanged",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "validate-performed",
              "type": {
                "text": "Event"
              },
              "description": "private event that should be listened to by LionFieldSet"
            },
            {
              "name": "form-element-name-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "model-value-changed",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
              }
            },
            {
              "name": "form-element-register",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormRegisteringMixin",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/FormControlMixin.js"
            },
            {
              "name": "SyncUpdatableMixin",
              "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js"
            },
            {
              "name": "DisabledMixin",
              "package": "@lion/core"
            },
            {
              "name": "SlotMixin",
              "package": "@lion/core"
            },
            {
              "name": "ScopedElementsMixin",
              "package": "@lion/core"
            },
            {
              "name": "dedupeMixin",
              "package": "@lion/core"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "Constructor<LitElement>"
              }
            }
          ],
          "type": {
            "text": "ValidateMixin"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ValidateMixinImplementation",
          "declaration": {
            "name": "ValidateMixinImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "ValidateMixin",
          "declaration": {
            "name": "ValidateMixin",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ValidateMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Validator",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "type": {
                "text": "string"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "async",
              "type": {
                "text": "boolean"
              },
              "static": true
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "param",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "type": {
                "text": "{\n        [x: string]: any;\n    }"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "addEventListener",
              "type": {
                "text": "((type: string, listener: EventListener, opts?: Object | undefined) => void) | undefined"
              }
            },
            {
              "kind": "field",
              "name": "removeEventListener",
              "type": {
                "text": "((type: string, listener: EventListener, opts?: Object | undefined) => void) | undefined"
              }
            },
            {
              "kind": "field",
              "name": "dispatchEvent",
              "type": {
                "text": "((event: Event | CustomEvent) => boolean) | undefined"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Validator",
          "declaration": {
            "name": "Validator",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Validator",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true
            },
            {
              "kind": "field",
              "name": "async",
              "static": true
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              }
            },
            {
              "kind": "field",
              "name": "param"
            },
            {
              "kind": "field",
              "name": "config"
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "abortExecution"
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param"
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              }
            },
            {
              "kind": "field",
              "name": "type"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Validator",
          "declaration": {
            "name": "Validator",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/choice-group/ChoiceGroupMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/choice-group/ChoiceInputMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/utils/getAriaElementsInRightDomOrder.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/utils/SyncUpdatableMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/form-group/FormGroupMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/validate/DateValidators.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/validate/lion-validation-feedback.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/validate/NumberValidators.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/validate/Required.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/validate/ResultValidator.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/validate/StringValidators.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/validate/ValidateMixin.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/validate/ValidateMixinFeedbackPart.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/test/validate/Validator.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/types/choice-group/ChoiceGroupMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ChoiceGroupHost",
          "members": [
            {
              "kind": "field",
              "name": "multipleChoice",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "modelValue",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "addFormElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControlHost"
                  }
                },
                {
                  "name": "indexToInsertAt",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clear",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_oldModelValue",
              "type": {
                "text": "any"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElementsFilter",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "FormControl"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElements",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "property",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "filterFn",
                  "optional": true,
                  "type": {
                    "text": "(el: FormControl, property?: string) => boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_throwWhenInvalidChildModelValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_checkSingleChoiceElements",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getCheckedElements",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_setCheckedElements",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "check",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onBeforeRepropagateChildrenValues",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__setChoiceGroupTouched",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__delegateNameAttribute",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "function",
          "name": "ChoiceGroupImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<ChoiceGroupHost> &\n  Pick<typeof ChoiceGroupHost, keyof typeof ChoiceGroupHost> &\n  Constructor<FormRegistrarHost> &\n  Pick<typeof FormRegistrarHost, keyof typeof FormRegistrarHost> &\n  Constructor<InteractionStateHost> &\n  Pick<typeof InteractionStateHost, keyof typeof InteractionStateHost> &\n  Pick<typeof LitElement, keyof typeof LitElement>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ChoiceGroupHost",
          "declaration": {
            "name": "ChoiceGroupHost",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/choice-group/ChoiceGroupMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ChoiceGroupImplementation",
          "declaration": {
            "name": "ChoiceGroupImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/choice-group/ChoiceGroupMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/types/choice-group/ChoiceInputMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ChoiceInputHost",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "type": {
                "text": "ChoiceInputSerializedValue"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "modelValue",
              "type": {
                "text": "ChoiceInputModelValue"
              }
            },
            {
              "kind": "field",
              "name": "choiceValue",
              "type": {
                "text": "any"
              },
              "description": "The value that will be registered to the modelValue of the parent ChoiceGroup. Recommended\nto be a string"
            },
            {
              "kind": "method",
              "name": "parser",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "formatter",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "modelValue",
                  "type": {
                    "text": "ChoiceInputModelValue"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_isHandlingUserInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_proxyInputEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_choiceGraphicTemplate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_afterTemplate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_preventDuplicateLabelClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_syncNameToParentFormGroup",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_toggleChecked",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onModelValueChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "newV",
                  "type": {
                    "text": "{ modelValue: ChoiceInputModelValue }"
                  }
                },
                {
                  "name": "oldV",
                  "type": {
                    "text": "{ modelValue: ChoiceInputModelValue }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_isEmpty",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_syncValueUpwards",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__syncModelCheckedToChecked",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__syncCheckedToModel",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__syncCheckedToInputElement",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "ChoiceInputImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<ChoiceInputHost> &\n  Pick<typeof ChoiceInputHost, keyof typeof ChoiceInputHost> &\n  Constructor<FormatHost> &\n  Pick<typeof FormatHost, keyof typeof FormatHost> &\n  Pick<typeof LitElement, keyof typeof LitElement>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ChoiceInputHost",
          "declaration": {
            "name": "ChoiceInputHost",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/choice-group/ChoiceInputMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ChoiceInputImplementation",
          "declaration": {
            "name": "ChoiceInputImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/choice-group/ChoiceInputMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/types/form-group/FormGroupMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormGroupHost",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Disables all formElements in group"
            },
            {
              "kind": "field",
              "name": "prefilled",
              "type": {
                "text": "boolean"
              },
              "description": "True when all of the children are prefilled (see InteractionStateMixin for more details.)"
            },
            {
              "kind": "field",
              "name": "touched",
              "type": {
                "text": "boolean"
              },
              "description": "True when the group as a whole is blurred (see InteractionStateMixin for more details.)"
            },
            {
              "kind": "field",
              "name": "dirty",
              "type": {
                "text": "boolean"
              },
              "description": "True when any of the children is dirty (see InteractionStateMixin for more details.)"
            },
            {
              "kind": "field",
              "name": "submitted",
              "type": {
                "text": "boolean"
              },
              "description": "True when parent form is submitted"
            },
            {
              "kind": "field",
              "name": "serializedValue",
              "type": {
                "text": "{ [key: string]: any }"
              },
              "description": "Object keyed by formElements names, containing formElements' serializedValues"
            },
            {
              "kind": "field",
              "name": "formattedValue",
              "type": {
                "text": "string"
              },
              "description": "Object keyed by formElements names, containing formElements' formattedValues"
            },
            {
              "kind": "field",
              "name": "modelValue",
              "type": {
                "text": "{ [x: string]: any }"
              },
              "description": "Object keyed by formElements names, containing formElements' modelValues"
            },
            {
              "kind": "method",
              "name": "resetInteractionState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resets all interaction states for all formElements"
            },
            {
              "kind": "method",
              "name": "clearGroup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Clears all values and resets all interaction states of all FormControls in group,"
            },
            {
              "kind": "method",
              "name": "submitGroup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handles interaction state 'submitted'.\nThis allows children to enable visibility of validation feedback"
            },
            {
              "kind": "method",
              "name": "resetGroup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resets to initial/prefilled values and interaction states of all FormControls in group,"
            },
            {
              "kind": "field",
              "name": "_initialModelValue",
              "type": {
                "text": "{ [x: string]: any }"
              },
              "privacy": "protected",
              "description": "Gathers initial model values of all children. Used when resetGroup() is called."
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected",
              "description": "The host element with role group (or radigroup or form) containing neccessary aria attributes"
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElements",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "{ [name: string]: any }"
                }
              },
              "parameters": [
                {
                  "name": "property",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "filterFn",
                  "optional": true,
                  "type": {
                    "text": "(el: FormControl, property?: string) => boolean"
                  }
                }
              ],
              "description": "Gets a keyed be name object for requested property (like modelValue/serializedValue)"
            },
            {
              "kind": "method",
              "name": "_getFromAllFormElementsFilter",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "FormControl"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "A filter function which will exclude a form field when returning false\nBy default, exclude form fields which are disabled\n\nThe type is be passed as well for more fine grained control, e.g.\ndistinguish the filter when fetching modelValue versus serializedValue"
            },
            {
              "kind": "method",
              "name": "_setValueMapForAllFormElements",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "property",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "values",
                  "type": {
                    "text": "{ [x: string]: any }"
                  }
                }
              ],
              "description": "Allows to set formElements values via a keyed object structure"
            },
            {
              "kind": "method",
              "name": "_setValueForAllFormElements",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "property",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Sets the same value for requested property in all formElements"
            },
            {
              "kind": "method",
              "name": "_anyFormElementHas",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns true when one of the formElements has requested property"
            },
            {
              "kind": "method",
              "name": "_everyFormElementHas",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns true when all of the formElements have requested property"
            },
            {
              "kind": "method",
              "name": "_anyFormElementHasFeedbackFor",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns true when all of the formElements have requested property"
            },
            {
              "kind": "method",
              "name": "_checkForOutsideClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_triggerInitialModelValueChangedEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_syncDirty",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onFocusOut",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_syncFocused",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "__descriptionElementsInParentChain",
              "type": {
                "text": "Set<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__addedSubValidators",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__isInitialModelValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__isInitialSerializedValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__pendingValues",
              "type": {
                "text": "{\n    modelValue?: { [key: string]: any };\n    serializedValue?: { [key: string]: any };\n  }"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__initInteractionStates",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__setupOutsideClickHandling",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__requestChildrenToBeDisabled",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__retractRequestChildrenToBeDisabled",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__linkParentMessages",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__unlinkParentMessages",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__storeAllDescriptionElementsInParentChain",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__onChildValidatePerformed",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "function",
          "name": "FormGroupImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<FormGroupHost> &\n  Pick<typeof FormGroupHost, keyof typeof FormGroupHost> &\n  Constructor<FormRegistrarHost> &\n  Pick<typeof FormRegistrarHost, keyof typeof FormRegistrarHost> &\n  Constructor<FormControlHost> &\n  Pick<typeof FormControlHost, keyof typeof FormControlHost> &\n  Constructor<ValidateHost> &\n  Pick<typeof ValidateHost, keyof typeof ValidateHost> &\n  Constructor<DisabledHost> &\n  Pick<typeof DisabledHost, keyof typeof DisabledHost> &\n  Constructor<SlotHost> &\n  Pick<typeof SlotHost, keyof typeof SlotHost> &\n  Pick<typeof LitElement, keyof typeof LitElement>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormGroupHost",
          "declaration": {
            "name": "FormGroupHost",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/form-group/FormGroupMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormGroupImplementation",
          "declaration": {
            "name": "FormGroupImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/form-group/FormGroupMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/types/registration/FormRegisteringMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormRegisteringHost",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name the host is registered with to a parent"
            },
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "type": {
                "text": "FormRegistrarHost | undefined"
              },
              "privacy": "protected",
              "description": "The registrar this FormControl registers to, Usually a descendant of FormGroup or\nChoiceGroup"
            }
          ]
        },
        {
          "kind": "function",
          "name": "FormRegisteringImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<FormRegisteringHost> &\n  Pick<typeof FormRegisteringHost, keyof typeof FormRegisteringHost> &\n  Pick<typeof LitElement, keyof typeof LitElement>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormRegisteringHost",
          "declaration": {
            "name": "FormRegisteringHost",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/registration/FormRegisteringMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormRegisteringImplementation",
          "declaration": {
            "name": "FormRegisteringImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/registration/FormRegisteringMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/types/registration/FormRegistrarMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ElementWithParentFormGroup",
          "members": [
            {
              "kind": "field",
              "name": "_parentFormGroup",
              "type": {
                "text": "FormRegistrarHost"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "FormRegistrarHost",
          "members": [
            {
              "kind": "field",
              "name": "formElements",
              "type": {
                "text": "FormControlsCollection & { [x: string]: any }"
              },
              "description": "Closely mimics the natively supported HTMLFormControlsCollection. It can be accessed\nboth like an array and an object (based on control/element names)."
            },
            {
              "kind": "method",
              "name": "addFormElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "| (FormControlHost & ElementWithParentFormGroup)\n      | (FormControlHost & HTMLElement)\n      | (HTMLElement & ElementWithParentFormGroup)"
                  }
                },
                {
                  "name": "indexToInsertAt",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Adds FormControl to `.formElements`"
            },
            {
              "kind": "method",
              "name": "removeFormElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "FormRegisteringHost"
                  }
                }
              ],
              "description": "Removes FormControl from `.formElements`"
            },
            {
              "kind": "method",
              "name": "isRegisteredFormElement",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "FormControlHost"
                  }
                }
              ],
              "description": "Whether FormControl is part of `.formElements`"
            },
            {
              "kind": "field",
              "name": "registrationComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "description": "Promise that is resolved by `._completeRegistration`. By default after one microtask,\nso children get the chance to register themselves"
            },
            {
              "kind": "field",
              "name": "initComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "description": "initComplete resolves after all pending initialization logic\n(for instance `<form-group .serializedValue=${{ child1: 'a', child2: 'b' }}>`)\nis executed."
            },
            {
              "kind": "field",
              "name": "_isFormOrFieldset",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "description": "Flag that determines how \".formElements\" should behave.\nFor a regular fieldset (see LionFieldset) we expect \".formElements\"\nto be accessible as an object.\nIn case of a radio-group, a checkbox-group or a select/listbox,\nit should act like an array (see ChoiceGroupMixin).\nUsually, when false, we deal with a choice-group (radio-group, checkbox-group,\n(multi)select)"
            },
            {
              "kind": "method",
              "name": "_onRequestToAddFormElement",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Hook for Subclassers to perform logic before an element is added"
            },
            {
              "kind": "method",
              "name": "_onRequestToChangeFormElementName",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onRequestToRemoveFormElement",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_completeRegistration",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resolves the registrationComplete promise. Subclassers can delay if needed"
            }
          ]
        },
        {
          "kind": "function",
          "name": "FormRegistrarImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<FormRegistrarHost> &\n  Pick<typeof FormRegistrarHost, keyof typeof FormRegistrarHost> &\n  Constructor<FormRegisteringHost> &\n  Pick<typeof FormRegisteringHost, keyof typeof FormRegisteringHost> &\n  Pick<typeof LitElement, keyof typeof LitElement>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ElementWithParentFormGroup",
          "declaration": {
            "name": "ElementWithParentFormGroup",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/registration/FormRegistrarMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormRegistrarHost",
          "declaration": {
            "name": "FormRegistrarHost",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/registration/FormRegistrarMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormRegistrarImplementation",
          "declaration": {
            "name": "FormRegistrarImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/registration/FormRegistrarMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/types/registration/FormRegistrarPortalMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormRegistrarPortalHost",
          "members": [
            {
              "kind": "field",
              "name": "registrationTarget",
              "type": {
                "text": "HTMLElement"
              },
              "description": "Registration target: an element, usually in the body of the dom, that captures events\nand redispatches them on host"
            },
            {
              "kind": "method",
              "name": "__redispatchEventForFormRegistrarPortalMixin",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "function",
          "name": "FormRegistrarPortalImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<FormRegistrarPortalHost> &\n  Pick<typeof FormRegistrarPortalHost, keyof typeof FormRegistrarPortalHost> &\n  Pick<typeof LitElement, keyof typeof LitElement>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormRegistrarPortalHost",
          "declaration": {
            "name": "FormRegistrarPortalHost",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/registration/FormRegistrarPortalMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormRegistrarPortalImplementation",
          "declaration": {
            "name": "FormRegistrarPortalImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/registration/FormRegistrarPortalMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/types/utils/SyncUpdatableMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SyncUpdatableHost",
          "members": [
            {
              "kind": "method",
              "name": "updateSync",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "An abstraction that has the exact same api as `requestUpdate`, but taking\ninto account:\n- [member order independence](https://github.com/webcomponents/gold-standard/wiki/Member-Order-Independence)\n- property effects start when all (light) dom has initialized (on firstUpdated)\n- property effects don't interrupt the first meaningful paint\n- compatible with propertyAccessor.`hasChanged`: no manual checks needed or accidentally\nrun property effects / events when no change happened\neffects when values didn't change\nAll code previously present in requestUpdate can be placed in this method."
            },
            {
              "kind": "method",
              "name": "__syncUpdatableInitialize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "__SyncUpdatableNamespace",
              "type": {
                "text": "SyncUpdatableNamespace"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__syncUpdatableHasChanged",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "function",
          "name": "SyncUpdatableImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<SyncUpdatableHost> &\n  Pick<typeof SyncUpdatableHost, keyof typeof SyncUpdatableHost> &\n  Pick<typeof LitElement, keyof typeof LitElement>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SyncUpdatableHost",
          "declaration": {
            "name": "SyncUpdatableHost",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/utils/SyncUpdatableMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "SyncUpdatableImplementation",
          "declaration": {
            "name": "SyncUpdatableImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/utils/SyncUpdatableMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/types/validate/ValidateMixinTypes.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ValidateHost",
          "members": [
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Application Developers to add Validators to a FormControl."
            },
            {
              "kind": "field",
              "name": "hasFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "As soon as validation happens (after modelValue/validators/validator param change), this\narray is updated with the active ValidationTypes ('error'|'warning'|'success'|'info' etc.).\nNotice the difference with `.showsFeedbackFor`, which filters `.hasFeedbackFor` based on\n`.feedbackCondition()`.\n\nFor styling purposes, will be reflected to [has-feedback-for=\"error warning\"]. This can\nbe useful for subtle visual feedback on keyup, like a red/green border around an input."
            },
            {
              "kind": "field",
              "name": "showsFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "description": "Based on outcome of feedbackCondition, this array decides what ValidationTypes should be\nshown in validationFeedback, based on meta data like interaction states.\n\nFor styling purposes, it reflects it `[shows-feedback-for=\"error warning\"]`"
            },
            {
              "kind": "field",
              "name": "shouldShowFeedbackFor",
              "type": {
                "text": "ValidationType[]"
              },
              "privacy": "private",
              "description": "A temporary storage to transition from hasFeedbackFor to showsFeedbackFor"
            },
            {
              "kind": "field",
              "name": "validationStates",
              "type": {
                "text": "{ [key: string]: { [key: string]: Object } }"
              },
              "description": "The outcome of a validation 'round'. Keyed by ValidationType and Validator name"
            },
            {
              "kind": "field",
              "name": "isPending",
              "type": {
                "text": "boolean"
              },
              "description": "Flag indicating whether async validation is pending.\nCreates attribute [is-pending] as a styling hook"
            },
            {
              "kind": "field",
              "name": "defaultValidators",
              "type": {
                "text": "Validator[]"
              },
              "description": "Used by Subclassers to add default Validators to a particular FormControl.\nA date input for instance, always needs the isDate validator."
            },
            {
              "kind": "field",
              "name": "fieldName",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "validateComplete",
              "type": {
                "text": "Promise<void>"
              }
            },
            {
              "kind": "field",
              "name": "feedbackComplete",
              "type": {
                "text": "Promise<void>"
              }
            },
            {
              "kind": "field",
              "name": "validationTypes",
              "type": {
                "text": "string[]"
              },
              "static": true
            },
            {
              "kind": "method",
              "name": "validate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "{ clearCurrentResult?: boolean }"
                  }
                }
              ],
              "description": "Triggered by:\n - modelValue change\n - change in the 'validators' array\n-  change in the config of an individual Validator\n\nThree situations are handled:\n- a1) the FormControl is empty: further execution is halted. When the Required Validator\n(being mutually exclusive to the other Validators) is applied, it will end up in the\nvalidation result (as the only Validator, since further execution was halted).\n- a2) there are synchronous Validators: this is the most common flow. When modelValue hasn't\nchanged since last async results were generated, 'sync results' are merged with the\n'async results'.\n- a3) there are asynchronous Validators: for instance when server side evaluation is needed.\nExecutions are scheduled and awaited and the 'async results' are merged with the\n'sync results'.\n\n- b) there are ResultValidators. After steps a1, a2, or a3 are finished, the holistic\nResultValidators (evaluating the total result of the 'regular' (a1, a2 and a3) validators)\nwill be run...\n\nSituations a2 and a3 are not mutually exclusive and can be triggered within one `validate()`\ncall. Situation b will occur after every call."
            },
            {
              "kind": "field",
              "name": "_visibleMessagesAmount",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "description": "The amount of feedback messages that will visible in LionValidationFeedback"
            },
            {
              "kind": "field",
              "name": "_allValidators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "description": "Combination of validators provided by Application Developer and the default validators"
            },
            {
              "kind": "field",
              "name": "_feedbackConditionMeta",
              "type": {
                "text": "object"
              },
              "privacy": "protected",
              "description": "Allows Subclassers to add meta info for feedbackCondition"
            },
            {
              "kind": "method",
              "name": "_updateFeedbackComponent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Responsible for retrieving messages from Validators and\n(delegation of) rendering them.\n\nFor `._feedbackNode` (extension of LionValidationFeedback):\n- retrieve messages from highest prio Validators\n- provide the result to custom feedback node and let the\ncustom node decide on their renderings\n\nIn both cases:\n- we compute the 'show' flag (like 'hasErrorVisible') for all types\n- we set the customValidity message of the highest prio Validator\n- we set aria-invalid=\"true\" in case hasErrorVisible is true"
            },
            {
              "kind": "method",
              "name": "_showFeedbackConditionFor",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  },
                  "description": "could be 'error', 'warning', 'info', 'success' or any other custom\nValidator type"
                },
                {
                  "name": "meta",
                  "type": {
                    "text": "object"
                  },
                  "description": "meta info (interaction states etc)"
                }
              ],
              "description": "Default feedbackCondition condition, used by Subclassers, that will be used when\n`feedbackCondition()` is not overridden by Application Developer.\nShow the validity feedback when returning true, don't show when false"
            },
            {
              "kind": "method",
              "name": "_hasFeedbackVisibleFor",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Used to translate `.hasFeedbackFor` and `.shouldShowFeedbackFor` to `.showsFeedbackFor`"
            },
            {
              "kind": "method",
              "name": "_updateShouldShowFeedbackFor",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_prioritizeAndFilterFeedback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Validator[]"
                }
              },
              "parameters": [
                {
                  "name": "opts",
                  "type": {
                    "text": "{ validationResult: Validator[] }"
                  }
                }
              ],
              "description": "Orders all active validators in this.__validationResult. Can also filter out occurrences\n(based on interaction states)."
            },
            {
              "kind": "field",
              "name": "__syncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__asyncValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__validationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__prevValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__prevShownValidationResult",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__childModelValueChanged",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__storePrevResult",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__executeValidators",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__validateCompleteResolve",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__executeSyncValidators",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "syncValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "opts",
                  "type": {
                    "text": "{ hasAsync: boolean }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__executeAsyncValidators",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "asyncValidators",
                  "type": {
                    "text": "Validator[]"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__executeResultValidators",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator[]"
                }
              },
              "parameters": [
                {
                  "name": "regularValidationResult",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__finishValidation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "{ source: 'sync' | 'async'; hasAsync?: boolean }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__clearValidationResults",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__onValidatorUpdated",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event | CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__setupValidators",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__isEmpty",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__getFeedbackMessages",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<FeedbackMessage[]>"
                }
              },
              "parameters": [
                {
                  "name": "validators",
                  "type": {
                    "text": "Validator[]"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "function",
          "name": "ValidateImplementation",
          "return": {
            "type": {
              "text": "T &\n  Constructor<ValidateHost> &\n  Pick<typeof ValidateHost, keyof typeof ValidateHost> &\n  Constructor<FormControlHost> &\n  Pick<typeof FormControlHost, keyof typeof FormControlHost> &\n  Constructor<SyncUpdatableHost> &\n  Pick<typeof SyncUpdatableHost, keyof typeof SyncUpdatableHost> &\n  Constructor<DisabledHost> &\n  Pick<typeof DisabledHost, keyof typeof DisabledHost> &\n  Constructor<SlotHost> &\n  Pick<typeof SlotHost, keyof typeof SlotHost> &\n  Constructor<ScopedElementsHost> &\n  Pick<typeof ScopedElementsHost, keyof typeof ScopedElementsHost> &\n  Pick<typeof LitElement, keyof typeof LitElement>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ValidateHost",
          "declaration": {
            "name": "ValidateHost",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/validate/ValidateMixinTypes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ValidateImplementation",
          "declaration": {
            "name": "ValidateImplementation",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/types/validate/ValidateMixinTypes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/renderLitAsNode/src/renderLitAsNode.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "renderLitAsNode",
          "return": {
            "type": {
              "text": "Element | null"
            }
          },
          "parameters": [
            {
              "name": "litHtmlTemplate",
              "type": {
                "text": "import('@lion/core').TemplateResult"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "renderLitAsNode",
          "declaration": {
            "name": "renderLitAsNode",
            "module": "packages/atom-listbox/node_modules/@lion/helpers/renderLitAsNode/src/renderLitAsNode.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/renderLitAsNode/src/renderLitAsNode.js",
      "declarations": [
        {
          "kind": "function",
          "name": "renderLitAsNode",
          "parameters": [
            {
              "name": "litHtmlTemplate",
              "type": {
                "text": "TemplateResult"
              }
            }
          ],
          "description": "Helper to render a lit TemplateResult as an offline-created DOM node\nMake sure that the top-most element in the template has no siblings,\nas they won't be taken into account. We only return firstElementChild."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "renderLitAsNode",
          "declaration": {
            "name": "renderLitAsNode",
            "module": "packages/atom-listbox/node_modules/@lion/helpers/renderLitAsNode/src/renderLitAsNode.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/renderLitAsNode/test/renderLitAsNode.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/sb-action-logger/src/SbActionLogger.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SbActionLogger",
          "members": [
            {
              "kind": "field",
              "name": "simple",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "__logCounter",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "loggerEl",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "method",
              "name": "log",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "content",
                  "type": {
                    "text": "string"
                  },
                  "description": "Content to be logged to the action logger"
                }
              ],
              "description": "Renders the passed content as a node, and appends it to the logger\nOnly supports simple values, will be interpreted to a String\nE.g. an Object will become '[object Object]'"
            },
            {
              "kind": "method",
              "name": "_logTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "content",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Protected getter that returns the template of a single log"
            },
            {
              "kind": "method",
              "name": "__appendLog",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "content",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__isConsecutiveDuplicateLog",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "content",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__handleConsecutiveDuplicateLog",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__prependLogCounterElement",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__animateCue",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__clearLogs",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "sb-action-logger",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SbActionLogger",
          "declaration": {
            "name": "SbActionLogger",
            "module": "packages/atom-listbox/node_modules/@lion/helpers/sb-action-logger/src/SbActionLogger.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/sb-action-logger/src/SbActionLogger.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SbActionLogger",
          "members": [
            {
              "kind": "field",
              "name": "loggerEl"
            },
            {
              "kind": "method",
              "name": "log",
              "parameters": [
                {
                  "name": "content",
                  "description": "Content to be logged to the action logger",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Renders the passed content as a node, and appends it to the logger\nOnly supports simple values, will be interpreted to a String\nE.g. an Object will become '[object Object]'"
            },
            {
              "kind": "method",
              "name": "_logTemplate",
              "parameters": [
                {
                  "name": "content",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Protected getter that returns the template of a single log",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "__appendLog",
              "parameters": [
                {
                  "name": "content",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__isConsecutiveDuplicateLog",
              "parameters": [
                {
                  "name": "content",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__handleConsecutiveDuplicateLog"
            },
            {
              "kind": "method",
              "name": "__prependLogCounterElement"
            },
            {
              "kind": "method",
              "name": "__animateCue"
            },
            {
              "kind": "method",
              "name": "__clearLogs"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "'Action Logger'",
              "privacy": "public",
              "attribute": "title",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "simple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "privacy": "public",
              "attribute": "simple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "__logCounter",
              "type": {
                "text": "number"
              },
              "default": "0",
              "privacy": "public",
              "attribute": "__logCounter"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "title",
              "fieldName": "title"
            },
            {
              "name": "simple",
              "fieldName": "simple"
            },
            {
              "name": "__logCounter",
              "fieldName": "__logCounter"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "sb-action-logger",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SbActionLogger",
          "declaration": {
            "name": "SbActionLogger",
            "module": "packages/atom-listbox/node_modules/@lion/helpers/sb-action-logger/src/SbActionLogger.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/sb-action-logger/test/sb-action-logger.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/sb-locale-switcher/src/SbLocaleSwitcher.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SbLocaleSwitcher",
          "members": [
            {
              "kind": "field",
              "name": "showLocales",
              "type": {
                "text": "string[]"
              }
            },
            {
              "kind": "method",
              "name": "callback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "sb-locale-switcher",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SbLocaleSwitcher",
          "declaration": {
            "name": "SbLocaleSwitcher",
            "module": "packages/atom-listbox/node_modules/@lion/helpers/sb-locale-switcher/src/SbLocaleSwitcher.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/sb-locale-switcher/src/SbLocaleSwitcher.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SbLocaleSwitcher",
          "members": [
            {
              "kind": "method",
              "name": "callback",
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showLocales",
              "type": {
                "text": "array"
              },
              "default": "['en-GB', 'en-US', 'en-AU', 'nl-NL', 'nl-BE']",
              "privacy": "public",
              "attribute": "show-locales"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "object"
              },
              "default": "{ host: this }",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "default": "undefined",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "packages/atom-listbox/node_modules/lit-element/development/lit-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "initializer"
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a `PropertyDeclaration` for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "key"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override [[`createProperty`]].",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true,
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "styles"
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__attributeNameForProperty",
              "static": true,
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "options"
                }
              ],
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "controller"
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__saveInstanceProperties",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "_requestedUpdate"
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__propertyToAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "options",
                  "default": "defaultPropertyDeclaration"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueUpdate",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "_$didUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "__markUpdated",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "default": "false",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "type": {
                "text": "null"
              },
              "description": "Name of currently reflecting property",
              "default": "null",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/reactive-element.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "show-locales",
              "fieldName": "showLocales"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "sb-locale-switcher",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SbLocaleSwitcher",
          "declaration": {
            "name": "SbLocaleSwitcher",
            "module": "packages/atom-listbox/node_modules/@lion/helpers/sb-locale-switcher/src/SbLocaleSwitcher.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/sortEachDepth/src/sortEachDepth.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "sortEachDepth",
          "return": {
            "type": {
              "text": "(a: Array<unknown>, b: Array<unknown>) => any"
            }
          },
          "parameters": [
            {
              "name": "orderPerDepth",
              "type": {
                "text": "Array.<[]>"
              },
              "description": "array of arrays giving the order of each level"
            }
          ],
          "description": "Sorts each depth level according to the provided array order."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sortEachDepth",
          "declaration": {
            "name": "sortEachDepth",
            "module": "packages/atom-listbox/node_modules/@lion/helpers/sortEachDepth/src/sortEachDepth.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/helpers/sortEachDepth/src/sortEachDepth.js",
      "declarations": [
        {
          "kind": "function",
          "name": "sortEachDepth",
          "parameters": [
            {
              "name": "orderPerDepth",
              "description": "array of arrays giving the order of each level",
              "type": {
                "text": "Array.<[]>"
              }
            }
          ],
          "description": "Sorts each depth level according to the provided array order."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sortEachDepth",
          "declaration": {
            "name": "sortEachDepth",
            "module": "packages/atom-listbox/node_modules/@lion/helpers/sortEachDepth/src/sortEachDepth.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/all-locales.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/all-locales.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/en-AU.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/en-AU.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/en-GB.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/en-GB.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/en-US.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/en-US.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/en.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/en.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/nl-BE.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/nl-BE.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/nl-NL.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/nl-NL.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/nl.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/atom-listbox/node_modules/@lion/localize/docs/assets/nl.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/formatDate.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "formatDate",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "FormatDateOptions"
              },
              "description": "Intl options are available"
            }
          ],
          "description": "Formats date based on locale and options"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "formatDate",
          "declaration": {
            "name": "formatDate",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/formatDate.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/formatDate.js",
      "declarations": [
        {
          "kind": "function",
          "name": "formatDate",
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            },
            {
              "name": "options",
              "description": "Intl options are available",
              "optional": true,
              "type": {
                "text": "FormatDateOptions"
              }
            }
          ],
          "description": "Formats date based on locale and options",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "formatDate",
          "declaration": {
            "name": "formatDate",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/formatDate.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/getDateFormatBasedOnLocale.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getDateFormatBasedOnLocale",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "description": "To compute the localized date format"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getDateFormatBasedOnLocale",
          "declaration": {
            "name": "getDateFormatBasedOnLocale",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/getDateFormatBasedOnLocale.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/getDateFormatBasedOnLocale.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getDateFormatBasedOnLocale",
          "description": "To compute the localized date format",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getDateFormatBasedOnLocale",
          "declaration": {
            "name": "getDateFormatBasedOnLocale",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/getDateFormatBasedOnLocale.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/getMonthNames.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getMonthNames",
          "return": {
            "type": {
              "text": "string[]"
            }
          },
          "parameters": [
            {
              "name": "{ locale, style }",
              "optional": true,
              "type": {
                "text": "{\n    locale?: string;\n    style?: string;\n} | undefined"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "@param {string} [options.locale] locale\n * @param {string} [options.style=long] long, short or narrow\n * "
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getMonthNames",
          "declaration": {
            "name": "getMonthNames",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/getMonthNames.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/getMonthNames.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getMonthNames",
          "parameters": [
            {
              "name": "{ locale, style = 'long' }",
              "default": "{}"
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "@param {string} [options.locale] locale\n * @param {string} [options.style=long] long, short or narrow\n * "
              }
            }
          ],
          "return": {
            "type": {
              "text": "string[]"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getMonthNames",
          "declaration": {
            "name": "getMonthNames",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/getMonthNames.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/getWeekdayNames.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getWeekdayNames",
          "return": {
            "type": {
              "text": "string[]"
            }
          },
          "parameters": [
            {
              "name": "{ locale, style, firstDayOfWeek }",
              "optional": true,
              "type": {
                "text": "{\n    locale?: string;\n    style?: string;\n    firstDayOfWeek?: number;\n} | undefined"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "@param {string} [options.locale] locale\n * @param {string} [options.style=long] long, short or narrow\n * @param {number} [options.firstDayOfWeek=0] 0 (Sunday), 1 (Monday), etc...\n * "
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getWeekdayNames",
          "declaration": {
            "name": "getWeekdayNames",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/getWeekdayNames.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/getWeekdayNames.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getWeekdayNames",
          "parameters": [
            {
              "name": "{ locale, style = 'long', firstDayOfWeek = 0 }",
              "default": "{}"
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "@param {string} [options.locale] locale\n * @param {string} [options.style=long] long, short or narrow\n * @param {number} [options.firstDayOfWeek=0] 0 (Sunday), 1 (Monday), etc...\n * "
              }
            }
          ],
          "return": {
            "type": {
              "text": "string[]"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getWeekdayNames",
          "declaration": {
            "name": "getWeekdayNames",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/getWeekdayNames.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/normalizeDateTime.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "normalizeDateTime",
          "return": {
            "type": {
              "text": "Date"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "normalizeDateTime",
          "declaration": {
            "name": "normalizeDateTime",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/normalizeDateTime.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/normalizeDateTime.js",
      "declarations": [
        {
          "kind": "function",
          "name": "normalizeDateTime",
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ],
          "return": {
            "type": {
              "text": "Date"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "normalizeDateTime",
          "declaration": {
            "name": "normalizeDateTime",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/normalizeDateTime.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/parseDate.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "parseDate",
          "return": {
            "type": {
              "text": "Date | undefined"
            }
          },
          "parameters": [
            {
              "name": "dateString",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "To parse a date into the right format"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parseDate",
          "declaration": {
            "name": "parseDate",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/parseDate.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/parseDate.js",
      "declarations": [
        {
          "kind": "function",
          "name": "parseDate",
          "parameters": [
            {
              "name": "dateString",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "To parse a date into the right format",
          "return": {
            "type": {
              "text": "Date | undefined"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parseDate",
          "declaration": {
            "name": "parseDate",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/parseDate.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/utils/getLocale.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getLocale",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "locale",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "Locale to override browser locale"
            }
          ],
          "description": "Gets the locale to use"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getLocale",
          "declaration": {
            "name": "getLocale",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/utils/getLocale.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/utils/getLocale.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getLocale",
          "parameters": [
            {
              "name": "locale",
              "description": "Locale to override browser locale",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Gets the locale to use",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getLocale",
          "declaration": {
            "name": "getLocale",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/utils/getLocale.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/formatNumber.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "formatNumber",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "number",
              "type": {
                "text": "number"
              },
              "description": "Number to be formatted"
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "FormatOptions"
              },
              "description": "Intl options are available extended by roundMode and returnIfNaN"
            }
          ],
          "description": "Formats a number based on locale and options. It uses Intl for the formatting."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "formatNumber",
          "declaration": {
            "name": "formatNumber",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/formatNumber.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/formatNumber.js",
      "declarations": [
        {
          "kind": "function",
          "name": "formatNumber",
          "parameters": [
            {
              "name": "number",
              "description": "Number to be formatted",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "options",
              "default": "({})",
              "description": "Intl options are available extended by roundMode and returnIfNaN",
              "optional": true,
              "type": {
                "text": "FormatOptions"
              }
            }
          ],
          "description": "Formats a number based on locale and options. It uses Intl for the formatting.",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "formatNumber",
          "declaration": {
            "name": "formatNumber",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/formatNumber.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/formatNumberToParts.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "roundNumber",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "number",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "roundMode",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Round the number based on the options"
        },
        {
          "kind": "function",
          "name": "formatNumberToParts",
          "return": {
            "type": {
              "text": "string | FormatNumberPart[]"
            }
          },
          "parameters": [
            {
              "name": "number",
              "type": {
                "text": "number"
              },
              "description": "Number to split up"
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "FormatNumberOptions"
              },
              "description": "Intl options are available extended by roundMode,returnIfNaN"
            }
          ],
          "description": "Splits a number up in parts for integer, fraction, group, literal, decimal and currency."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "roundNumber",
          "declaration": {
            "name": "roundNumber",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/formatNumberToParts.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "formatNumberToParts",
          "declaration": {
            "name": "formatNumberToParts",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/formatNumberToParts.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/formatNumberToParts.js",
      "declarations": [
        {
          "kind": "function",
          "name": "roundNumber",
          "parameters": [
            {
              "name": "number",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "roundMode",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Round the number based on the options",
          "return": {
            "type": {
              "text": "number"
            }
          }
        },
        {
          "kind": "function",
          "name": "formatNumberToParts",
          "parameters": [
            {
              "name": "number",
              "description": "Number to split up",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "options",
              "default": "{}",
              "description": "Intl options are available extended by roundMode,returnIfNaN",
              "optional": true,
              "type": {
                "text": "FormatNumberOptions"
              }
            }
          ],
          "description": "Splits a number up in parts for integer, fraction, group, literal, decimal and currency.",
          "return": {
            "type": {
              "text": "string | FormatNumberPart[]"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "roundNumber",
          "declaration": {
            "name": "roundNumber",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/formatNumberToParts.js"
          }
        },
        {
          "kind": "js",
          "name": "formatNumberToParts",
          "declaration": {
            "name": "formatNumberToParts",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/formatNumberToParts.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/getCurrencyName.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getCurrencyName",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "currencyIso",
              "type": {
                "text": "string"
              },
              "description": "iso code like USD"
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "FormatNumberOptions"
              },
              "description": "Intl options are available extended by roundMode"
            }
          ],
          "description": "Based on number, returns currency name like 'US dollar'"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getCurrencyName",
          "declaration": {
            "name": "getCurrencyName",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/getCurrencyName.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/getCurrencyName.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getCurrencyName",
          "parameters": [
            {
              "name": "currencyIso",
              "description": "iso code like USD",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "description": "Intl options are available extended by roundMode",
              "optional": true,
              "type": {
                "text": "FormatNumberOptions"
              }
            }
          ],
          "description": "Based on number, returns currency name like 'US dollar'",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getCurrencyName",
          "declaration": {
            "name": "getCurrencyName",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/getCurrencyName.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/getDecimalSeparator.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getDecimalSeparator",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "locale",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "To override the browser locale"
            }
          ],
          "description": "To get the decimal separator"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getDecimalSeparator",
          "declaration": {
            "name": "getDecimalSeparator",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/getDecimalSeparator.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/getDecimalSeparator.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getDecimalSeparator",
          "parameters": [
            {
              "name": "locale",
              "description": "To override the browser locale",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "To get the decimal separator",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getDecimalSeparator",
          "declaration": {
            "name": "getDecimalSeparator",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/getDecimalSeparator.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/getFractionDigits.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getFractionDigits",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "currency",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "Currency code e.g. EUR"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getFractionDigits",
          "declaration": {
            "name": "getFractionDigits",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/getFractionDigits.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/getFractionDigits.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getFractionDigits",
          "parameters": [
            {
              "name": "currency",
              "default": "'EUR'",
              "description": "Currency code e.g. EUR",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "number"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getFractionDigits",
          "declaration": {
            "name": "getFractionDigits",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/getFractionDigits.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/getGroupSeparator.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getGroupSeparator",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "locale",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "To override the browser locale"
            }
          ],
          "description": "Gets the group separator"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getGroupSeparator",
          "declaration": {
            "name": "getGroupSeparator",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/getGroupSeparator.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/getGroupSeparator.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getGroupSeparator",
          "parameters": [
            {
              "name": "locale",
              "description": "To override the browser locale",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Gets the group separator",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getGroupSeparator",
          "declaration": {
            "name": "getGroupSeparator",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/getGroupSeparator.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/normalizeCurrencyLabel.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "normalizeCurrencyLabel",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "currency",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "For Turkey fixes currency label with locale options"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "normalizeCurrencyLabel",
          "declaration": {
            "name": "normalizeCurrencyLabel",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/normalizeCurrencyLabel.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/normalizeCurrencyLabel.js",
      "declarations": [
        {
          "kind": "function",
          "name": "normalizeCurrencyLabel",
          "parameters": [
            {
              "name": "currency",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "For Turkey fixes currency label with locale options",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "normalizeCurrencyLabel",
          "declaration": {
            "name": "normalizeCurrencyLabel",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/normalizeCurrencyLabel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/parseNumber.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "parseNumber",
          "return": {
            "type": {
              "text": "number | undefined"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Number to be parsed"
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "object"
              },
              "description": "Locale Options"
            }
          ],
          "description": "Parses a number string and returns the best possible javascript number.\nFor edge cases it may use locale to give the best possible assumption.\n\nIt has 3 \"methods\" of returning numbers\n- 'unparseable': becomes just numbers\n- 'withLocale': result depends on given or global locale\n- 'heuristic': result depends on considering separators"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parseNumber",
          "declaration": {
            "name": "parseNumber",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/parseNumber.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/parseNumber.js",
      "declarations": [
        {
          "kind": "function",
          "name": "parseNumber",
          "parameters": [
            {
              "name": "value",
              "description": "Number to be parsed",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "description": "Locale Options",
              "optional": true,
              "type": {
                "text": "object"
              }
            }
          ],
          "description": "Parses a number string and returns the best possible javascript number.\nFor edge cases it may use locale to give the best possible assumption.\n\nIt has 3 \"methods\" of returning numbers\n- 'unparseable': becomes just numbers\n- 'withLocale': result depends on given or global locale\n- 'heuristic': result depends on considering separators"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parseNumber",
          "declaration": {
            "name": "parseNumber",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/parseNumber.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/date/formatDate.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/date/getDateFormatBasedOnLocale.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/date/getMonthNames.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/date/getWeekdayNames.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/date/normalizeDateTime.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/date/parseDate.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/number/formatNumber.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/number/formatNumberToParts.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/number/getCurrencyName.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/number/getDecimalSeparator.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/number/getFractionDigits.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/number/getGroupSeparator.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/test/number/parseNumber.test.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/types/src/ScopedElementsMixin.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "ScopedElementsMixin",
          "return": {
            "type": {
              "text": "T & Constructor<ScopedElementsHost>"
            }
          },
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ScopedElementsMixin",
          "declaration": {
            "name": "ScopedElementsMixin",
            "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/types/src/ScopedElementsMixin.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/types/src/types.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ScopedElementsHost",
          "members": [
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "ScopedElementsMap"
              },
              "static": true,
              "description": "Obtains the scoped elements definitions map"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "registry",
              "type": {
                "text": "CustomElementRegistry"
              },
              "description": "Obtains the CustomElementRegistry"
            },
            {
              "kind": "method",
              "name": "defineScopedElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "tagName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "klass",
                  "type": {
                    "text": "Constructor<T>"
                  }
                }
              ],
              "description": "Defines a scoped element inside the CustomElementRegistry bound to the shadowRoot."
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              },
              "privacy": "public"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Constructor",
          "declaration": {
            "name": "Constructor",
            "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/types/src/types.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ScopedElementsHost",
          "declaration": {
            "name": "ScopedElementsHost",
            "module": "packages/atom-listbox/node_modules/@open-wc/scoped-elements/types/src/types.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/base.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "legacyPrototypeMethod",
          "type": {
            "text": "(descriptor: PropertyDescriptor, proto: Object, name: PropertyKey) => void"
          }
        },
        {
          "kind": "variable",
          "name": "standardPrototypeMethod",
          "type": {
            "text": "(descriptor: PropertyDescriptor, element: ClassElement) => {\n    kind: string;\n    placement: string;\n    key: PropertyKey;\n    descriptor: PropertyDescriptor;\n}"
          }
        },
        {
          "kind": "variable",
          "name": "decorateProperty",
          "type": {
            "text": "({ finisher, descriptor, }: {\n    finisher?: ((ctor: typeof ReactiveElement, property: PropertyKey) => void) | null | undefined;\n    descriptor?: ((property: PropertyKey) => PropertyDescriptor) | undefined;\n}) => (protoOrDescriptor: ReactiveElement | ClassElement, name?: PropertyKey | undefined) => void | any"
          },
          "description": "Helper for decorating a property that is compatible with both TypeScript\nand Babel decorators. The optional `finisher` can be used to perform work on\nthe class. The optional `descriptor` should return a PropertyDescriptor\nto install for the given property.",
          "parameters": [
            {
              "description": "Optional finisher method; receives the element\nconstructor and property key as arguments and has no return value.",
              "name": "finisher",
              "type": {
                "text": "function"
              }
            },
            {
              "description": "Optional descriptor method; receives the\nproperty key as an argument and returns a property descriptor to define for\nthe given property.",
              "name": "descriptor",
              "type": {
                "text": "function"
              }
            }
          ],
          "return": {
            "type": {
              "text": "ClassElement|void"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "legacyPrototypeMethod",
          "declaration": {
            "name": "legacyPrototypeMethod",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/base.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "standardPrototypeMethod",
          "declaration": {
            "name": "standardPrototypeMethod",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/base.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "decorateProperty",
          "declaration": {
            "name": "decorateProperty",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/base.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/base.js",
      "declarations": [
        {
          "kind": "function",
          "name": "legacyPrototypeMethod",
          "parameters": [
            {
              "name": "descriptor"
            },
            {
              "name": "proto"
            },
            {
              "name": "name"
            }
          ]
        },
        {
          "kind": "function",
          "name": "standardPrototypeMethod",
          "parameters": [
            {
              "name": "descriptor"
            },
            {
              "name": "element"
            }
          ]
        },
        {
          "kind": "function",
          "name": "decorateProperty",
          "parameters": [
            {
              "name": "{ finisher, descriptor, }"
            },
            {
              "description": "Optional finisher method; receives the element\nconstructor and property key as arguments and has no return value.",
              "name": "finisher",
              "type": {
                "text": "function"
              }
            },
            {
              "description": "Optional descriptor method; receives the\nproperty key as an argument and returns a property descriptor to define for\nthe given property.",
              "name": "descriptor",
              "type": {
                "text": "function"
              }
            }
          ],
          "description": "Helper for decorating a property that is compatible with both TypeScript\nand Babel decorators. The optional `finisher` can be used to perform work on\nthe class. The optional `descriptor` should return a PropertyDescriptor\nto install for the given property.",
          "return": {
            "type": {
              "text": "ClassElement|void"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "legacyPrototypeMethod",
          "declaration": {
            "name": "legacyPrototypeMethod",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/base.js"
          }
        },
        {
          "kind": "js",
          "name": "standardPrototypeMethod",
          "declaration": {
            "name": "standardPrototypeMethod",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/base.js"
          }
        },
        {
          "kind": "js",
          "name": "decorateProperty",
          "declaration": {
            "name": "decorateProperty",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/base.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/custom-element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "customElement",
          "type": {
            "text": "(tagName: string) => (classOrDescriptor: CustomElementClass | ClassDescriptor) => any"
          },
          "description": "Class decorator factory that defines the decorated class as a custom element.\n\n```js",
          "parameters": [
            {
              "description": "The tag name of the custom element to define.",
              "name": "tagName"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "customElement",
          "declaration": {
            "name": "customElement",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/custom-element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/custom-element.js",
      "declarations": [
        {
          "kind": "function",
          "name": "customElement",
          "parameters": [
            {
              "name": "tagName",
              "description": "The tag name of the custom element to define."
            }
          ],
          "description": "Class decorator factory that defines the decorated class as a custom element.\n\n```js"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "tagName",
          "declaration": {
            "name": "clazz",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/custom-element.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "tagName",
          "declaration": {
            "name": "clazz",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/custom-element.js"
          }
        },
        {
          "kind": "js",
          "name": "customElement",
          "declaration": {
            "name": "customElement",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/custom-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/event-options.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "eventOptions",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: ReactiveElement | import(\"./base.js\").ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "type": {
                "text": "AddEventListenerOptions"
              },
              "description": "An object that specifies event listener options as accepted by\n`EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n\nCurrent browsers support the `capture`, `passive`, and `once` options. See:\nhttps://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n\n```ts\nclass MyElement {\nclicked = false;\n\nrender() {\nreturn html`\n<div"
            }
          ],
          "description": "Adds event listener options to a method used as an event listener in a\nlit-html template."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "eventOptions",
          "declaration": {
            "name": "eventOptions",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/event-options.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/event-options.js",
      "declarations": [
        {
          "kind": "function",
          "name": "eventOptions",
          "parameters": [
            {
              "name": "options",
              "description": "An object that specifies event listener options as accepted by\n`EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n\nCurrent browsers support the `capture`, `passive`, and `once` options. See:\nhttps://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n\n```ts\nclass MyElement {\nclicked = false;\n\nrender() {\nreturn html`\n<div"
            }
          ],
          "description": "Adds event listener options to a method used as an event listener in a\nlit-html template."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "eventOptions",
          "declaration": {
            "name": "eventOptions",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/event-options.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/property.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "property",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: Object | ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "PropertyDeclaration"
              }
            }
          ],
          "description": "A property decorator which creates a reactive property that reflects a\ncorresponding attribute value. When a decorated property is set\nthe element will update and render. A [[`PropertyDeclaration`]] may\noptionally be supplied to configure property features.\n\nThis decorator should only be used for public fields. As public fields,\nproperties should be considered as primarily settable by element users,\neither via attribute or the property itself.\n\nGenerally, properties that are changed by the element should be private or\nprotected fields and should use the [[`state`]] decorator.\n\nHowever, sometimes element code does need to set a public property. This\nshould typically only be done in response to user interaction, and an event\nshould be fired informing the user; for example, a checkbox sets its\n`checked` property when clicked and fires a `changed` event. Mutating public\nproperties should typically not be done for non-primitive (object or array)\nproperties. In other cases when an element needs to manage state, a private\nproperty decorated via the [[`state`]] decorator should be used. When needed,\nstate properties can be initialized via public properties to facilitate\ncomplex interactions.\n\n```ts\nclass MyElement {"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "property",
          "declaration": {
            "name": "property",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/property.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/property.js",
      "declarations": [
        {
          "kind": "function",
          "name": "property",
          "parameters": [
            {
              "name": "options"
            }
          ],
          "description": "A property decorator which creates a reactive property that reflects a\ncorresponding attribute value. When a decorated property is set\nthe element will update and render. A [[`PropertyDeclaration`]] may\noptionally be supplied to configure property features.\n\nThis decorator should only be used for public fields. As public fields,\nproperties should be considered as primarily settable by element users,\neither via attribute or the property itself.\n\nGenerally, properties that are changed by the element should be private or\nprotected fields and should use the [[`state`]] decorator.\n\nHowever, sometimes element code does need to set a public property. This\nshould typically only be done in response to user interaction, and an event\nshould be fired informing the user; for example, a checkbox sets its\n`checked` property when clicked and fires a `changed` event. Mutating public\nproperties should typically not be done for non-primitive (object or array)\nproperties. In other cases when an element needs to manage state, a private\nproperty decorated via the [[`state`]] decorator should be used. When needed,\nstate properties can be initialized via public properties to facilitate\ncomplex interactions.\n\n```ts\nclass MyElement {"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "property",
          "declaration": {
            "name": "property",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/property.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query-all.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAll",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: ReactiveElement | import(\"./base.js\").ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "selector",
              "type": {
                "text": "string"
              },
              "description": "A DOMString containing one or more selectors to match.\n\nSee:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter\nthat executes a querySelectorAll on the element's renderRoot."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAll",
          "declaration": {
            "name": "queryAll",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query-all.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query-all.js",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAll",
          "parameters": [
            {
              "name": "selector",
              "description": "A DOMString containing one or more selectors to match.\n\nSee:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter\nthat executes a querySelectorAll on the element's renderRoot."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAll",
          "declaration": {
            "name": "queryAll",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query-all.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query-assigned-nodes.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAssignedNodes",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: ReactiveElement | import(\"./base.js\").ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "slotName",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "A string name of the slot."
            },
            {
              "name": "flatten",
              "optional": true,
              "type": {
                "text": "boolean"
              },
              "description": "A boolean which when true flattens the assigned nodes,\nmeaning any assigned nodes that are slot elements are replaced with their\nassigned nodes."
            },
            {
              "name": "selector",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "A string which filters the results to elements that match\nthe given css selector.\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nreturns the `assignedNodes` of the given named `slot`. Note, the type of\nthis property should be annotated as `NodeListOf<HTMLElement>`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAssignedNodes",
          "declaration": {
            "name": "queryAssignedNodes",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query-assigned-nodes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query-assigned-nodes.js",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAssignedNodes",
          "parameters": [
            {
              "name": "slotName",
              "default": "''",
              "description": "A string name of the slot."
            },
            {
              "name": "flatten",
              "default": "false",
              "description": "A boolean which when true flattens the assigned nodes,\nmeaning any assigned nodes that are slot elements are replaced with their\nassigned nodes."
            },
            {
              "name": "selector",
              "default": "''",
              "description": "A string which filters the results to elements that match\nthe given css selector.\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nreturns the `assignedNodes` of the given named `slot`. Note, the type of\nthis property should be annotated as `NodeListOf<HTMLElement>`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAssignedNodes",
          "declaration": {
            "name": "queryAssignedNodes",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query-async.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAsync",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: ReactiveElement | import(\"./base.js\").ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "selector",
              "type": {
                "text": "string"
              },
              "description": "A DOMString containing one or more selectors to match.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nreturns a promise that resolves to the result of a querySelector on the\nelement's renderRoot done after the element's `updateComplete` promise\nresolves. When the queried property may change with element state, this\ndecorator can be used instead of requiring users to await the\n`updateComplete` before accessing the property."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAsync",
          "declaration": {
            "name": "queryAsync",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query-async.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query-async.js",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAsync",
          "parameters": [
            {
              "name": "selector",
              "description": "A DOMString containing one or more selectors to match.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nreturns a promise that resolves to the result of a querySelector on the\nelement's renderRoot done after the element's `updateComplete` promise\nresolves. When the queried property may change with element state, this\ndecorator can be used instead of requiring users to await the\n`updateComplete` before accessing the property."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAsync",
          "declaration": {
            "name": "queryAsync",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query-async.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "query",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: ReactiveElement | import(\"./base.js\").ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "selector",
              "type": {
                "text": "string"
              },
              "description": "A DOMString containing one or more selectors to match."
            },
            {
              "name": "cache",
              "optional": true,
              "type": {
                "text": "boolean"
              },
              "description": "An optional boolean which when true performs the DOM query only\nonce and caches the result.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nexecutes a querySelector on the element's renderRoot."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "query",
          "declaration": {
            "name": "query",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query.js",
      "declarations": [
        {
          "kind": "function",
          "name": "query",
          "parameters": [
            {
              "name": "selector",
              "description": "A DOMString containing one or more selectors to match."
            },
            {
              "name": "cache",
              "description": "An optional boolean which when true performs the DOM query only\nonce and caches the result.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nexecutes a querySelector on the element's renderRoot."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "query",
          "declaration": {
            "name": "query",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/query.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/state.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "state",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: Object | import(\"./base.js\").ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "InternalPropertyDeclaration"
              }
            }
          ],
          "description": "Declares a private or protected reactive property that still triggers\nupdates to the element when it changes. It does not reflect from the\ncorresponding attribute.\n\nProperties declared this way must not be used from HTML or HTML templating\nsystems, they're solely for properties internal to the element. These\nproperties may be renamed by optimization tools like closure compiler."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "state",
          "declaration": {
            "name": "state",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/state.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/state.js",
      "declarations": [
        {
          "kind": "function",
          "name": "state",
          "parameters": [
            {
              "name": "options"
            }
          ],
          "description": "Declares a private or protected reactive property that still triggers\nupdates to the element when it changes. It does not reflect from the\ncorresponding attribute.\n\nProperties declared this way must not be used from HTML or HTML templating\nsystems, they're solely for properties internal to the element. These\nproperties may be renamed by optimization tools like closure compiler."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "state",
          "declaration": {
            "name": "state",
            "module": "packages/atom-listbox/node_modules/@lit/reactive-element/development/decorators/state.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/resultValidators/DefaultSuccess.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DefaultSuccess",
          "superclass": {
            "name": "ResultValidator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/ResultValidator.js"
          },
          "members": [
            {
              "kind": "method",
              "name": "executeOnResults",
              "parameters": [
                {
                  "name": "{\n    regularValidationResult,\n    prevValidationResult,\n    prevShownValidationResult,\n    validators,\n  }"
                },
                {
                  "name": "context",
                  "type": {
                    "text": "@param {Validator[]} context.regularValidationResult\n   * @param {Validator[]} context.prevValidationResult\n   * @param {Validator[]} context.prevShownValidationResult\n   * @param {Validator[]} [context.validators]\n   * "
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ResultValidator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ResultValidator.js"
              }
            },
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DefaultSuccess",
          "declaration": {
            "name": "DefaultSuccess",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/resultValidators/DefaultSuccess.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/resultValidators/DefaultSuccess.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DefaultSuccess",
          "members": [
            {
              "kind": "method",
              "name": "executeOnResults",
              "parameters": [
                {
                  "name": "{ regularValidationResult, prevShownValidationResult }"
                },
                {
                  "name": "context",
                  "type": {
                    "text": "@param {Validator[]} context.regularValidationResult\n   * @param {Validator[]} context.prevValidationResult\n   * @param {Validator[]} context.prevShownValidationResult\n   * "
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ResultValidator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/ResultValidator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              },
              "type": {
                "text": "string"
              },
              "default": "'success'"
            },
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "ResultValidator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/ResultValidator.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DefaultSuccess",
          "declaration": {
            "name": "DefaultSuccess",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/resultValidators/DefaultSuccess.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/DateValidators.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IsDate",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "MinDate",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "MaxDate",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "MinMaxDate",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "IsDateDisabled",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IsDate",
          "declaration": {
            "name": "IsDate",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/DateValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "MinDate",
          "declaration": {
            "name": "MinDate",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/DateValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "MaxDate",
          "declaration": {
            "name": "MaxDate",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/DateValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "MinMaxDate",
          "declaration": {
            "name": "MinMaxDate",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/DateValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "IsDateDisabled",
          "declaration": {
            "name": "IsDateDisabled",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/DateValidators.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/DateValidators.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IsDate",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "MinDate",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "min",
                  "default": "this.param"
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "MaxDate",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "max",
                  "default": "this.param"
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "MinMaxDate",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "{ min = 0, max = 0 }",
                  "default": "this.param"
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "IsDateDisabled",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "isDisabledFn",
                  "default": "this.param"
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IsDate",
          "declaration": {
            "name": "IsDate",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/DateValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MinDate",
          "declaration": {
            "name": "MinDate",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/DateValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MaxDate",
          "declaration": {
            "name": "MaxDate",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/DateValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MinMaxDate",
          "declaration": {
            "name": "MinMaxDate",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/DateValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "IsDateDisabled",
          "declaration": {
            "name": "IsDateDisabled",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/DateValidators.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/NumberValidators.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IsNumber",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "MinNumber",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "MaxNumber",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "MinMaxNumber",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IsNumber",
          "declaration": {
            "name": "IsNumber",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/NumberValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "MinNumber",
          "declaration": {
            "name": "MinNumber",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/NumberValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "MaxNumber",
          "declaration": {
            "name": "MaxNumber",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/NumberValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "MinMaxNumber",
          "declaration": {
            "name": "MinMaxNumber",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/NumberValidators.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/NumberValidators.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IsNumber",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "MinNumber",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "min",
                  "default": "this.param"
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "MaxNumber",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "max",
                  "default": "this.param"
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "MinMaxNumber",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "{ min = 0, max = 0 }",
                  "default": "this.param"
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IsNumber",
          "declaration": {
            "name": "IsNumber",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/NumberValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MinNumber",
          "declaration": {
            "name": "MinNumber",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/NumberValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MaxNumber",
          "declaration": {
            "name": "MaxNumber",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/NumberValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MinMaxNumber",
          "declaration": {
            "name": "MinMaxNumber",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/NumberValidators.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/Required.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Required",
          "members": [
            {
              "kind": "field",
              "name": "_compatibleRoles",
              "type": {
                "text": "string[]"
              },
              "static": true,
              "description": "In order to prevent accessibility violations, the aria-required attribute will\nbe combined with compatible aria roles: https://www.w3.org/TR/wai-aria/#aria-required"
            },
            {
              "kind": "field",
              "name": "_compatibleTags",
              "type": {
                "text": "string[]"
              },
              "static": true,
              "description": "In order to prevent accessibility violations, the aria-required attribute will\nbe combined with compatible platform input elements"
            },
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Required",
          "declaration": {
            "name": "Required",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/Required.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/Required.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Required",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "_compatibleRoles",
              "static": true,
              "description": "In order to prevent accessibility violations, the aria-required attribute will\nbe combined with compatible aria roles: https://www.w3.org/TR/wai-aria/#aria-required"
            },
            {
              "kind": "field",
              "name": "_compatibleTags",
              "static": true,
              "description": "In order to prevent accessibility violations, the aria-required attribute will\nbe combined with compatible platform input elements"
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "{ _inputNode: inputNode }"
                },
                {
                  "name": "formControl",
                  "type": {
                    "text": "FormControlHost & HTMLElement"
                  }
                }
              ],
              "description": "We don't have an execute function, since the Required validator is 'special'.\nThe outcome depends on the modelValue of the FormControl and\nFormControl.__isEmpty / FormControl._isEmpty.",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "{ _inputNode: inputNode }"
                },
                {
                  "name": "formControl",
                  "type": {
                    "text": "FormControlHost & HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Required",
          "declaration": {
            "name": "Required",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/Required.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IsString",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "EqualsLength",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "MinLength",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "MaxLength",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "MinMaxLength",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "IsEmail",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "Pattern",
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "modelValue",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "param",
                  "optional": true,
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IsString",
          "declaration": {
            "name": "IsString",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "EqualsLength",
          "declaration": {
            "name": "EqualsLength",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "MinLength",
          "declaration": {
            "name": "MinLength",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "MaxLength",
          "declaration": {
            "name": "MaxLength",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "MinMaxLength",
          "declaration": {
            "name": "MinMaxLength",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "IsEmail",
          "declaration": {
            "name": "IsEmail",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Pattern",
          "declaration": {
            "name": "Pattern",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IsString",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "EqualsLength",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "length",
                  "default": "this.param"
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "MinLength",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "min",
                  "default": "this.param"
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "MaxLength",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "max",
                  "default": "this.param"
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "MinMaxLength",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "{ min = 0, max = 0 }",
                  "default": "this.param"
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "IsEmail",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "Pattern",
          "members": [
            {
              "kind": "field",
              "name": "validatorName",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "execute",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "?"
                  }
                },
                {
                  "name": "pattern",
                  "default": "this.param"
                }
              ],
              "return": {
                "type": {
                  "text": "Boolean|Promise<Boolean>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "async",
              "static": true,
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "_getMessage",
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "getMessage",
              "static": true,
              "parameters": [
                {
                  "name": "data",
                  "optional": true,
                  "type": {
                    "text": "MessageData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<string|Node>"
                }
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlConnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "onFormControlDisconnect",
              "parameters": [
                {
                  "name": "formControl",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "abortExecution",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "method",
              "name": "__fakeExtendsEventTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__param",
              "type": {
                "text": "?"
              },
              "default": "param",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "__config",
              "type": {
                "text": "Object.<string,?>"
              },
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "inheritedFrom": {
                "name": "Validator",
                "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
              }
            }
          ],
          "superclass": {
            "name": "Validator",
            "module": "/packages/atom-listbox/node_modules/@lion/form-core/src/validate/Validator.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IsString",
          "declaration": {
            "name": "IsString",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "EqualsLength",
          "declaration": {
            "name": "EqualsLength",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MinLength",
          "declaration": {
            "name": "MinLength",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MaxLength",
          "declaration": {
            "name": "MaxLength",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "MinMaxLength",
          "declaration": {
            "name": "MinMaxLength",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "IsEmail",
          "declaration": {
            "name": "IsEmail",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.js"
          }
        },
        {
          "kind": "js",
          "name": "Pattern",
          "declaration": {
            "name": "Pattern",
            "module": "packages/atom-listbox/node_modules/@lion/form-core/src/validate/validators/StringValidators.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/addLeadingZero.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "addLeadingZero",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "dateString",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "To add a leading zero to a single number"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addLeadingZero",
          "declaration": {
            "name": "addLeadingZero",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/addLeadingZero.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/addLeadingZero.js",
      "declarations": [
        {
          "kind": "function",
          "name": "addLeadingZero",
          "parameters": [
            {
              "name": "dateString",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "To add a leading zero to a single number",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addLeadingZero",
          "declaration": {
            "name": "addLeadingZero",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/addLeadingZero.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/clean.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "clean",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "dateAsString",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "To clean date from added characters from IE"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "clean",
          "declaration": {
            "name": "clean",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/clean.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/clean.js",
      "declarations": [
        {
          "kind": "function",
          "name": "clean",
          "parameters": [
            {
              "name": "dateAsString",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "To clean date from added characters from IE",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "clean",
          "declaration": {
            "name": "clean",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/clean.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/forceShortMonthNamesForEnGb.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "forceShortMonthNamesForEnGb",
          "return": {
            "type": {
              "text": "string[]"
            }
          },
          "parameters": [
            {
              "name": "months",
              "type": {
                "text": "string[]"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceShortMonthNamesForEnGb",
          "declaration": {
            "name": "forceShortMonthNamesForEnGb",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/forceShortMonthNamesForEnGb.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/forceShortMonthNamesForEnGb.js",
      "declarations": [
        {
          "kind": "function",
          "name": "forceShortMonthNamesForEnGb",
          "parameters": [
            {
              "name": "months",
              "type": {
                "text": "string[]"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceShortMonthNamesForEnGb",
          "declaration": {
            "name": "forceShortMonthNamesForEnGb",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/forceShortMonthNamesForEnGb.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/normalizeIntlDate.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "normalizeIntlDate",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "locale",
              "optional": true,
              "type": {
                "text": "string"
              }
            },
            {
              "name": "{ weekday, year, month, day }",
              "optional": true,
              "type": {
                "text": "import(\"../../../types/LocalizeMixinTypes\").FormatDateOptions | undefined"
              }
            },
            {
              "description": "Intl options are available",
              "name": "options",
              "optional": true,
              "type": {
                "text": "FormatDateOptions"
              }
            }
          ],
          "description": "To filter out some added characters in IE"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "normalizeIntlDate",
          "declaration": {
            "name": "normalizeIntlDate",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/normalizeIntlDate.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/normalizeIntlDate.js",
      "declarations": [
        {
          "kind": "function",
          "name": "normalizeIntlDate",
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "locale",
              "default": "''",
              "optional": true,
              "type": {
                "text": "string"
              }
            },
            {
              "name": "{ weekday, year, month, day }",
              "default": "{}"
            },
            {
              "description": "Intl options are available",
              "name": "options",
              "optional": true,
              "type": {
                "text": "FormatDateOptions"
              }
            }
          ],
          "description": "To filter out some added characters in IE",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "normalizeIntlDate",
          "declaration": {
            "name": "normalizeIntlDate",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/normalizeIntlDate.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/pad.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "pad",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "n",
              "type": {
                "text": "string"
              },
              "description": "number in string format"
            }
          ],
          "description": "To get the absolute value of a number."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "pad",
          "declaration": {
            "name": "pad",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/pad.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/pad.js",
      "declarations": [
        {
          "kind": "function",
          "name": "pad",
          "parameters": [
            {
              "name": "n",
              "description": "number in string format",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "To get the absolute value of a number.",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "pad",
          "declaration": {
            "name": "pad",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/pad.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/sanitizedDateTimeFormat.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "sanitizedDateTimeFormat",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ],
          "description": "To sanitize a date from IE11 handling"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sanitizedDateTimeFormat",
          "declaration": {
            "name": "sanitizedDateTimeFormat",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/sanitizedDateTimeFormat.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/sanitizedDateTimeFormat.js",
      "declarations": [
        {
          "kind": "function",
          "name": "sanitizedDateTimeFormat",
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ],
          "description": "To sanitize a date from IE11 handling",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sanitizedDateTimeFormat",
          "declaration": {
            "name": "sanitizedDateTimeFormat",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/sanitizedDateTimeFormat.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/splitDate.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "splitDate",
          "return": {
            "type": {
              "text": "ArrayLike.<string> | null"
            }
          },
          "parameters": [
            {
              "name": "dateAsString",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "To split a date into days, months, years, etc"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "splitDate",
          "declaration": {
            "name": "splitDate",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/splitDate.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/splitDate.js",
      "declarations": [
        {
          "kind": "function",
          "name": "splitDate",
          "parameters": [
            {
              "name": "dateAsString",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "To split a date into days, months, years, etc",
          "return": {
            "type": {
              "text": "ArrayLike.<string> | null"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "splitDate",
          "declaration": {
            "name": "splitDate",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/splitDate.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/trim.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "trim",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "dateAsString",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "To trim the date"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "trim",
          "declaration": {
            "name": "trim",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/trim.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/trim.js",
      "declarations": [
        {
          "kind": "function",
          "name": "trim",
          "parameters": [
            {
              "name": "dateAsString",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "To trim the date",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "trim",
          "declaration": {
            "name": "trim",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/date/utils/trim.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/emptyStringWhenNumberNan.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "emptyStringWhenNumberNan",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "returnIfNaN",
              "type": {
                "text": "string|undefined"
              }
            }
          ],
          "description": "When number is NaN we should return an empty string or returnIfNaN param"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "emptyStringWhenNumberNan",
          "declaration": {
            "name": "emptyStringWhenNumberNan",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/emptyStringWhenNumberNan.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/emptyStringWhenNumberNan.js",
      "declarations": [
        {
          "kind": "function",
          "name": "emptyStringWhenNumberNan",
          "parameters": [
            {
              "name": "returnIfNaN",
              "type": {
                "text": "string|undefined"
              }
            }
          ],
          "description": "When number is NaN we should return an empty string or returnIfNaN param",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "emptyStringWhenNumberNan",
          "declaration": {
            "name": "emptyStringWhenNumberNan",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/emptyStringWhenNumberNan.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalSpaces.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "normalSpaces",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "normalSpaces",
          "declaration": {
            "name": "normalSpaces",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalSpaces.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalSpaces.js",
      "declarations": [
        {
          "kind": "function",
          "name": "normalSpaces",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "normalSpaces",
          "declaration": {
            "name": "normalSpaces",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalSpaces.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceAddGroupSeparators.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "forceAddGroupSeparators",
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          },
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            },
            {
              "name": "groupSeparator",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Add separators when they are not present"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceAddGroupSeparators",
          "declaration": {
            "name": "forceAddGroupSeparators",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceAddGroupSeparators.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceAddGroupSeparators.js",
      "declarations": [
        {
          "kind": "function",
          "name": "forceAddGroupSeparators",
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            },
            {
              "name": "groupSeparator",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Add separators when they are not present",
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceAddGroupSeparators",
          "declaration": {
            "name": "forceAddGroupSeparators",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceAddGroupSeparators.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceCurrencyToEnd.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "forceCurrencyToEnd",
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          },
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            }
          ],
          "description": "For Dutch and Belgian amounts the currency should be at the end of the string"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceCurrencyToEnd",
          "declaration": {
            "name": "forceCurrencyToEnd",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceCurrencyToEnd.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceCurrencyToEnd.js",
      "declarations": [
        {
          "kind": "function",
          "name": "forceCurrencyToEnd",
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            }
          ],
          "description": "For Dutch and Belgian amounts the currency should be at the end of the string",
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceCurrencyToEnd",
          "declaration": {
            "name": "forceCurrencyToEnd",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceCurrencyToEnd.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceENAUSymbols.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "forceENAUSymbols",
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          },
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            },
            {
              "name": "{ currency, currencyDisplay }",
              "optional": true,
              "type": {
                "text": "import(\"../../../../types/LocalizeMixinTypes\").FormatNumberOptions | undefined"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "FormatNumberOptions"
              }
            }
          ],
          "description": "Change the symbols for locale 'en-AU', due to bug in Chrome"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceENAUSymbols",
          "declaration": {
            "name": "forceENAUSymbols",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceENAUSymbols.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceENAUSymbols.js",
      "declarations": [
        {
          "kind": "function",
          "name": "forceENAUSymbols",
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            },
            {
              "name": "{ currency, currencyDisplay }",
              "default": "{}"
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "FormatNumberOptions"
              }
            }
          ],
          "description": "Change the symbols for locale 'en-AU', due to bug in Chrome",
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceENAUSymbols",
          "declaration": {
            "name": "forceENAUSymbols",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceENAUSymbols.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceNormalSpaces.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "forceNormalSpaces",
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          },
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            }
          ],
          "description": "Parts with forced \"normal\" spaces"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceNormalSpaces",
          "declaration": {
            "name": "forceNormalSpaces",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceNormalSpaces.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceNormalSpaces.js",
      "declarations": [
        {
          "kind": "function",
          "name": "forceNormalSpaces",
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            }
          ],
          "description": "Parts with forced \"normal\" spaces",
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceNormalSpaces",
          "declaration": {
            "name": "forceNormalSpaces",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceNormalSpaces.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceSpaceBetweenCurrencyCodeAndNumber.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "forceSpaceBetweenCurrencyCodeAndNumber",
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          },
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            },
            {
              "name": "{ currency, currencyDisplay }",
              "optional": true,
              "type": {
                "text": "import(\"../../../../types/LocalizeMixinTypes\").FormatNumberOptions | undefined"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "FormatNumberOptions"
              }
            }
          ],
          "description": "When in some locales there is no space between currency and amount it is added"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceSpaceBetweenCurrencyCodeAndNumber",
          "declaration": {
            "name": "forceSpaceBetweenCurrencyCodeAndNumber",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceSpaceBetweenCurrencyCodeAndNumber.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceSpaceBetweenCurrencyCodeAndNumber.js",
      "declarations": [
        {
          "kind": "function",
          "name": "forceSpaceBetweenCurrencyCodeAndNumber",
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            },
            {
              "name": "{ currency, currencyDisplay }",
              "default": "{}"
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "FormatNumberOptions"
              }
            }
          ],
          "description": "When in some locales there is no space between currency and amount it is added",
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceSpaceBetweenCurrencyCodeAndNumber",
          "declaration": {
            "name": "forceSpaceBetweenCurrencyCodeAndNumber",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceSpaceBetweenCurrencyCodeAndNumber.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceSpaceInsteadOfZeroForGroup.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "forceSpaceInsteadOfZeroForGroup",
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          },
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceSpaceInsteadOfZeroForGroup",
          "declaration": {
            "name": "forceSpaceInsteadOfZeroForGroup",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceSpaceInsteadOfZeroForGroup.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceSpaceInsteadOfZeroForGroup.js",
      "declarations": [
        {
          "kind": "function",
          "name": "forceSpaceInsteadOfZeroForGroup",
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            }
          ],
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceSpaceInsteadOfZeroForGroup",
          "declaration": {
            "name": "forceSpaceInsteadOfZeroForGroup",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceSpaceInsteadOfZeroForGroup.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceTryCurrencyCode.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "forceTryCurrencyCode",
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          },
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            },
            {
              "name": "{ currency, currencyDisplay }",
              "optional": true,
              "type": {
                "text": "import(\"../../../../types/LocalizeMixinTypes\").FormatNumberOptions | undefined"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "FormatNumberOptions"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceTryCurrencyCode",
          "declaration": {
            "name": "forceTryCurrencyCode",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceTryCurrencyCode.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceTryCurrencyCode.js",
      "declarations": [
        {
          "kind": "function",
          "name": "forceTryCurrencyCode",
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            },
            {
              "name": "{ currency, currencyDisplay }",
              "default": "{}"
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "FormatNumberOptions"
              }
            }
          ],
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceTryCurrencyCode",
          "declaration": {
            "name": "forceTryCurrencyCode",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceTryCurrencyCode.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceYenSymbol.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "forceYenSymbol",
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          },
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            },
            {
              "name": "{ currency, currencyDisplay }",
              "optional": true,
              "type": {
                "text": "import(\"../../../../types/LocalizeMixinTypes\").FormatNumberOptions | undefined"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "FormatNumberOptions"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceYenSymbol",
          "declaration": {
            "name": "forceYenSymbol",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceYenSymbol.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceYenSymbol.js",
      "declarations": [
        {
          "kind": "function",
          "name": "forceYenSymbol",
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            },
            {
              "name": "{ currency, currencyDisplay }",
              "default": "{}"
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "FormatNumberOptions"
              }
            }
          ],
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceYenSymbol",
          "declaration": {
            "name": "forceYenSymbol",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/forceYenSymbol.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/normalizeIntl.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "normalizeIntl",
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          },
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "FormatNumberOptions"
              }
            },
            {
              "name": "_locale",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Normalizes function \"formatNumberToParts\""
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "normalizeIntl",
          "declaration": {
            "name": "normalizeIntl",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/normalizeIntl.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/normalizeIntl.js",
      "declarations": [
        {
          "kind": "function",
          "name": "normalizeIntl",
          "parameters": [
            {
              "name": "formattedParts",
              "type": {
                "text": "FormatNumberPart[]"
              }
            },
            {
              "name": "options",
              "default": "{}",
              "type": {
                "text": "FormatNumberOptions"
              }
            },
            {
              "name": "_locale",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Normalizes function \"formatNumberToParts\"",
          "return": {
            "type": {
              "text": "FormatNumberPart[]"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "normalizeIntl",
          "declaration": {
            "name": "normalizeIntl",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-format-number-to-parts/normalizeIntl.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-get-currency-name/forceCurrencyNameForPHPEnGB.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "forceCurrencyNameForPHPEnGB",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "currencyName",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceCurrencyNameForPHPEnGB",
          "declaration": {
            "name": "forceCurrencyNameForPHPEnGB",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-get-currency-name/forceCurrencyNameForPHPEnGB.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-get-currency-name/forceCurrencyNameForPHPEnGB.js",
      "declarations": [
        {
          "kind": "function",
          "name": "forceCurrencyNameForPHPEnGB",
          "parameters": [
            {
              "name": "currencyName",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forceCurrencyNameForPHPEnGB",
          "declaration": {
            "name": "forceCurrencyNameForPHPEnGB",
            "module": "packages/atom-listbox/node_modules/@lion/localize/src/number/utils/normalize-get-currency-name/forceCurrencyNameForPHPEnGB.js"
          }
        }
      ]
    }
  ]
}
